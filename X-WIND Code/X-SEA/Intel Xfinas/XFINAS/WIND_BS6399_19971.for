      SUBROUTINE WIND_BS6399_1997 (IOPT_WIND,IOPT_ADD_WIND)
      IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER*4 (i-n)
      COMMON /INOU/ ITI,ITO,ISO,NDATI,NPLOT,NKFAC,NELEM,
     1              IFPR(10),IFPL(10)
      
      SELECTCASE(IOPT_WIND)
      CASE (9) ! STANDARD METHOD
      READ (ITI,*) IOPT_CATEGORY,IOPT_FACTOR,V_WIND,AMEN_HEIGHT,ASEPARRA_BUILDING,FRICTION_COEFF,CLOS_DISTANCE
     1            ,ASA,ASD,ASS,ASP,ASH,DIREC_COFF1,DIREC_COFF2
      
      ! EFFECTIVE WIND SPEED
      ! AVB?
      AVS = V_WIND*ASA*ASD*ASS*ASP!*ASH
      
      IF (IOPT_FORCE.EQ.0) FORCE_COEFF = 1.0D0 ! NOT CONSIDER FORCE COEFFICIENT
      CALL STORY_STANDARD_BS6399_1997 (IOPT_CATEGORY,CLOS_DISTANCE,AVS,IOPT_FACTOR,AMEN_HEIGHT
     1                                ,ASEPARRA_BUILDING,VELO_PRESSSURE,AMEN_HEIGHT,DIREC_COFF1,DIREC_COFF2)
      
      IF (IOPT_ADD_WIND.EQ.1) CALL WIND_ADD_FORCE (ITO_ADD)
      
      CASE (10)! DIRECTIONAL METHOD
          
      READ (ITI,*) IOPT_CATEGORY,IOPT_FACTOR,V_WIND,AMEN_HEIGHT,ASEPARRA_BUILDING,FRICTION_COEFF,CLOS_DISTANCE
     1            ,ASA,ASD,ASS,ASP,ASH,DIREC_COFF1,DIREC_COFF2
      
      AVS = V_WIND*ASA*ASD*ASS*ASP!*ASH

      IF (IOPT_ADD_WIND.EQ.1) CALL WIND_ADD_FORCE (ITO_ADD)
      
      ENDSELECT
      END
C	==================================================================
      SUBROUTINE FACTOR_ABS (IOPT_CATEGORY,ELEVATION,CLOS_DISTANCE,ASB)
      IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER*4 (i-n)
      DIMENSION ABS_01_COUNTRY(16),ABS_2_COUNTRY(16),ABS_10_COUNTRY(16),ABS_100_COUNTRY(16)
      DIMENSION ABS_2_TOWN(16),ABS_10_TOWN(16),ABS_100_TOWN(16)
      DIMENSION DATA_ABS(16)
      DATA ABS_01_COUNTRY /2D0,5D0,10D0,15D0,20D0,30D0,50D0,100D0
     1                 ,1.48D0,1.65D0,1.78D0,1.85D0,1.90D0,1.96D0,2.04D0,2.12D0/
      DATA ABS_2_COUNTRY/2D0,5D0,10D0,15D0,20D0,30D0,50D0,100D0
     1                 ,1.40D0,1.62D0,1.78D0,1.85D0,1.90D0,1.96D0,2.04D0,2.12D0/
      DATA ABS_10_COUNTRY /2D0,5D0,10D0,15D0,20D0,30D0,50D0,100D0
     1                 ,1.35D0,1.57D0,1.73D0,1.82D0,1.89D0,1.96D0,2.04D0,2.12D0/
      DATA ABS_100_COUNTRY /2D0,5D0,10D0,15D0,20D0,30D0,50D0,100D0
     1                 ,1.26D0,1.45D0,1.62D0,1.71D0,1.77D0,1.85D0,1.95D0,2.07D0/
      
      DATA ABS_2_TOWN /2D0,5D0,10D0,15D0,20D0,30D0,50D0,100D0
     1                 ,1.18D0,1.50D0,1.73D0,1.85D0,1.90D0,1.96D0,2.04D0,2.12D0/
      DATA ABS_10_TOWN /2D0,5D0,10D0,15D0,20D0,30D0,50D0,100D0
     1                 ,1.15D0,1.45D0,1.69D0,1.82D0,1.89D0,1.96D0,2.04D0,2.12D0/
      DATA ABS_100_TOWN /2D0,5D0,10D0,15D0,20D0,30D0,50D0,100D0
     1                 ,1.07D0,1.36D0,1.58D0,1.71D0,1.77D0,1.85D0,1.95D0,2.07D0/
      
      
      SELECTCASE(IOPT_CATEGORY)
          
      CASE (1) ! COUNTRY
        IF (CLOS_DISTANCE.LE.0.1D0)THEN ! UNIT KM
        DATA_ABS(1:16) = ABS_01_COUNTRY(1:16)    
        ELSEIF (CLOS_DISTANCE.LE.0.1D0.AND.CLOS_DISTANCE.LE.2.0D0)THEN
        DATA_ABS(1:8) = ABS_2_COUNTRY(1:8)     
           DO I = 1,8
           DATA_ABS(8+I) = ABS_2_COUNTRY(8+I) - ABS_01_COUNTRY(8+I)
           ENDDO
        ELSEIF (CLOS_DISTANCE.GT.2.0D0.AND.CLOS_DISTANCE.LE.10.0D0)THEN
        DATA_ABS(1:8) = ABS_10_COUNTRY(1:8)     
           DO I = 1,8
           DATA_ABS(8+I) = ABS_10_COUNTRY(8+I) - ABS_2_COUNTRY(8+I)
           ENDDO
        ELSEIF (CLOS_DISTANCE.GT.10.0D0.AND.CLOS_DISTANCE.LT.100D0)THEN
        DATA_ABS(1:8) = ABS_100_COUNTRY(1:8)     
           DO I = 1,8
           DATA_ABS(8+I) = ABS_100_COUNTRY(8+I) - ABS_10_COUNTRY(8+I)
           ENDDO   
        ELSEIF (CLOS_DISTANCE.GT.100D0)THEN
          DATA_ABS(1:16) = ABS_100_COUNTRY(1:16)    
        ENDIF
          
      CASE (2) ! TOWN 
        IF (CLOS_DISTANCE.LE.2.0D0)THEN
        DATA_ABS(1:16) = ABS_2_TOWN(1:16)    
        ELSEIF (CLOS_DISTANCE.GT.2.0D0.AND.CLOS_DISTANCE.LE.10D0)THEN
        DATA_ABS(1:8) = ABS_10_TOWN(1:8)     
           DO I = 1,8
           DATA_ABS(8+I) = ABS_10_TOWN(8+I) - ABS_2_TOWN(8+I)
           ENDDO
        ELSEIF (CLOS_DISTANCE.GT.10.0D0.AND.CLOS_DISTANCE.LE.100)THEN
        DATA_ABS(1:8) = ABS_100_COUNTRY(1:8)     
           DO I = 1,8
           DATA_ABS(8+I) = ABS_100_COUNTRY(8+I) - ABS_10_COUNTRY(8+I)
           ENDDO
        ELSEIF (CLOS_DISTANCE.GE.100)THEN
        DATA_ABS(1:16) = ABS_100_TOWN(1:16)    
        ENDIF
          
      ENDSELECT
      END
C	==================================================================
      SUBROUTINE STORY_STANDARD_BS6399_1997 (IOPT_CATEGORY,CLOS_DISTANCE,AVS,IOPT_FACTOR,AMEN_HEIGHT,ASEPARRA_BUILDING
     1                                      ,VELO_PRESSSURE,BUILD_HEIG,DIREC_COFF1,DIREC_COFF2)
      IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER*4 (i-n)
      COMMON /FLOOR/ IFLOOR,NFLOOR,NSN0
      COMMON /MGRAV/ NGRAV
      COMMON /WIND_LATERAL/ WIND_D(3,10000),WIND_CASE(500),IN_FLOOR
      DIMENSION AREA_OUT1(IFLOOR),AREA_OUT2(IFLOOR)
      DIMENSION ELEVATION(IFLOOR)
      DIMENSION FORCE1(IFLOOR),FORCE2(IFLOOR)
      DIMENSION APF_X(IFLOOR),APF_Y(IFLOOR)
      DIMENSION FORCE_FRICTION1(IFLOOR),FORCE_FRICTION2(IFLOOR)
      
      AREA_OUT1 = 0.
      AREA_OUT2 = 0.
      FORCE1 = 0.
      FORCE2 = 0.
      
      ! CALCULATE AREA
      CALL FLOOR_AREA_SPAN (AREA_OUT1,AREA_OUT2)
      ! CALCULATE ELEVATION
      CALL L_B_LENGTH (RATIO_L,RATIO_B,ELEVATION)
      
      ! CALCULATE AKB
      CALL FACTOR_AKB (IOPT_FACTOR,AKB)
      ! CALCULATE ACR
      CALL FACTOR_ACR (ELEVATION(IFLOOR),AKB,ACR)
      
      DO I = 1,IFLOOR   
      IF (I.NE.IFLOOR-1)   CALL FACTOR_ACA (ELEVATION(I),ACA)
      IF (I.EQ.IFLOOR-1)   CALL FACTOR_ACA (ELEVATION(IFLOOR),ACA)
      
      IF (I.NE.IFLOOR)   CALL FACTOR_ABS (IOPT_CATEGORY,ELEVATION(I+1),CLOS_DISTANCE,ASB)
      IF (I.EQ.IFLOOR)   CALL FACTOR_ABS (IOPT_CATEGORY,ELEVATION(IFLOOR),CLOS_DISTANCE,ASB)
      ! EFFECTIVE WIND SPEED
      AVE = AVS*ASB 
      ! DYNAMIC PRESSURE 
      VELO_PRESSSURE = 0.613D0*(AVE**2D0)   ! UNIT N/M**2
      
      ! WINDWARD
      ACE1 = 0.8D0
      ACE2 = -0.3D0
      
      ! LEEWARD 
      ACE3 = 0.8D0
      ACE4 = -0.3D0
      
      ! FRICTIONAL DRAG PRESSURE
      !APF_F   = VELO_PRESSSURE*FRICTION_COEFF*ACA
      APF_X(I)   = VELO_PRESSSURE*ACA*(ACE1-ACE2) ! 1ST DIRECTION
      APF_Y(I)   = VELO_PRESSSURE*ACA*(ACE3-ACE4) ! 2ND DIRECTION
      
      ! **** PLEASE CHECK AS ****
      !AS      = 0.9D0*AREA
      AWF_X   = 0.85D0*APF_X(I)*AREA_OUT2(I)*(1+ACR)! + APF_X*AS
      AWF_Y   = 0.85D0*APF_Y(I)*AREA_OUT1(I)*(1+ACR)! + APF_Y*AS
      
      FORCE1(I) = AWF_X*DIREC_COFF1
      FORCE2(I) = AWF_Y*DIREC_COFF2
      ENDDO
      
      ! FRICTION FORCE
      DO I =1,IFLOOR
       IF (I.EQ.1.OR.I.EQ.IFLOOR)THEN
       FORCE_FRICTION1(I) = APF_X(I)*AREA_OUT1(I)
       FORCE_FRICTION1(I) = APF_Y(I)*AREA_OUT1(I)
       ELSEIF (I.NE.1)THEN
       FORCE_FRICTION1(I) = (APF_X(I)*AREA_OUT1(I))+(APF_X(I-1)*AREA_OUT1(I-1))
       FORCE_FRICTION2(I) = (APF_Y(I)*AREA_OUT2(I))+(APF_Y(I-1)*AREA_OUT1(I-1))
       ENDIF
       !FORCE1(I) = PF*AREA_OUT2(I)*DIREC_COFF1*FORCE_COEFF
      ENDDO
      
      DO I = 1,IFLOOR
      SELECTCASE(NGRAV)
      CASE(1)
        IN_FLOOR           = IN_FLOOR + 1
        IF (I.EQ.1.OR.I.EQ.IFLOOR) THEN
        WIND_D(1,IN_FLOOR) = 0.0D0
        WIND_D(2,IN_FLOOR) = FORCE1(I)/2D0 + FORCE_FRICTION1(I)
        WIND_D(3,IN_FLOOR) = FORCE2(I)/2D0 + FORCE_FRICTION2(I)
        ELSEIF (I.NE.1) THEN
        WIND_D(1,IN_FLOOR) = 0.0D0
        WIND_D(2,IN_FLOOR) = (FORCE1(I) + FORCE1(I-1))/2D0 + FORCE_FRICTION1(I)
        WIND_D(3,IN_FLOOR) = (FORCE2(I) + FORCE2(I-1))/2D0 + FORCE_FRICTION2(I)
        ENDIF
      CASE(2)
        IN_FLOOR           = IN_FLOOR + 1
        IF (I.EQ.1.OR.I.EQ.IFLOOR) THEN
        WIND_D(1,IN_FLOOR) = FORCE1(I)/2D0 + FORCE_FRICTION1(I)
        WIND_D(2,IN_FLOOR) = 0.0D0
        WIND_D(3,IN_FLOOR) = FORCE2(I)/2D0 + FORCE_FRICTION2(I)
        ELSEIF (I.NE.1) THEN
        WIND_D(1,IN_FLOOR) = (FORCE1(I) + FORCE1(I-1))/2D0 + FORCE_FRICTION1(I)
        WIND_D(2,IN_FLOOR) = 0.0D0
        WIND_D(3,IN_FLOOR) = (FORCE2(I) + FORCE2(I-1))/2D0 + FORCE_FRICTION2(I)
        ENDIF
      CASE(3)
        IN_FLOOR           = IN_FLOOR + 1
        IF (I.EQ.1.OR.I.EQ.IFLOOR) THEN
        WIND_D(1,IN_FLOOR) = FORCE1(I)/2D0 + FORCE_FRICTION1(I)
        WIND_D(2,IN_FLOOR) = 0.0D0
        WIND_D(3,IN_FLOOR) = FORCE2(I)/2D0 + FORCE_FRICTION2(I)
        ELSEIF (I.NE.1) THEN
        WIND_D(1,IN_FLOOR) = (FORCE1(I) + FORCE1(I-1))/2D0 + FORCE_FRICTION1(I)
        WIND_D(2,IN_FLOOR) = (FORCE2(I) + FORCE2(I-1))/2D0 + FORCE_FRICTION2(I)
        WIND_D(3,IN_FLOOR) = 0.0D0
        ENDIF
      ENDSELECT
      ENDDO
      
      END
C	==================================================================
      SUBROUTINE FACTOR_ACA (ELEVATION,ACA)
      IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER*4 (i-n)
      ! FIGURE 4 PAGE 16
      
      END
C	==================================================================
      SUBROUTINE FACTOR_AKB (IOPT_FACTOR,AKB)
      IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER*4 (i-n)
      SELECTCASE(IOPT_FACTOR)
      CASE (1)
      AKB = 8.0D0
      CASE (2)
      AKB = 4.0D0
      CASE (3)
      AKB = 2.0D0
      CASE (4)
      AKB = 1.0D0
      CASE (5)
      AKB = 0.5D0
      ENDSELECT    
      END
      
C	==================================================================
      SUBROUTINE FACTOR_ACR (AMEN_HEIGHT,AKB,ACR)
      IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER*4 (i-n)
      ASEPARRA_BUILDING = 0.1D0
      AA1 = AKB*(AMEN_HEIGHT/ASEPARRA_BUILDING)**(0.75D0)
      AA2 = 800D0*LOG(AMEN_HEIGHT/ASEPARRA_BUILDING)
      ACR = AA1/AA2
      END