C	=======================================================================
C	=== CONSTRUCTION ANALYSIS =============== SONGSAK NOV2007 =============
C	=======================================================================
      SUBROUTINE SETENV  
	IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER*4 (I-N)	
	DIMENSION GRAV(3),UTOL(9),IDOFB(9)

	CALL FREBUF
	CALL FREECH
      CALL FREREL('D',DATE,1) !STARTING DAY
      CALL FREREL('T',TEMP,1) 
      CALL FREREL('G',GRAV,3) 



C	---------------------------------------------------------------------
C     TOLERANCE
C	---------------------------------------------------------------------      
	UTOL(1:9) = 1.0E-4                                  
      CALL DEFNREL('%TOL',KTOL,1,10)
C	CALL FREBUF
C	CALL FREECH
C	CALL FREREL('T',UTOL(1),9)
	FNIT = 30.0D0
C	CALL FREREL('N',FNIT,1)  !MAX ITERATION
	DO I = 1,9
	CALL RELFILL('%TOL',UTOL(I),1,I,1)
	ENDDO
	CALL RELFILL('%TOL',FNIT   ,1,10,1)

                   
      CALL DEFNINT('%COV',KCOV,1,10) !CONVERGENCE FLAG
	CALL INTZERO('%COV')

C	---------------------------------------------------------------------
C     SOLUTION CONTROL ARRAY
C	---------------------------------------------------------------------                                         
      CALL DEFNINT('%SOL',KSOL,1,10)
	CALL INTZERO('%SOL')

C	---------------------------------------------------------------------
C     SOLUTION DAY + AMBIENT TEMP (CELCIOUS)
C	---------------------------------------------------------------------      
C	BLOCK 1 = ANALYSIS DAY 
C	BLOCK 2 = PREVIOUS DAY (START DAY FOR INITIAL) 
C	BLOCK 3 = AMBIENT TEMP                
      CALL DEFNREL('%EAY',KEAY,1,3)   
	CALL RELZERO('%EAY')
	CALL RELFILL('%EAY',DATE   ,1,2,1)
	CALL RELFILL('%EAY',TEMP   ,1,3,1)

C	---------------------------------------------------------------------
C     GRAVITY
C	---------------------------------------------------------------------      
C	BLOCK 1 = GRAVITY VALUE IN X DIRECTION
C	BLOCK 2 = GRAVITY VALUE IN Y DIRECTION
C	BLOCK 3 = GRAVITY VALUE IN Z DIRECTION                  
      CALL DEFNREL('%GRV',KGRV,1,3)   
	CALL RELFILL('%GRV',GRAV(1),1,1,1)
	CALL RELFILL('%GRV',GRAV(2),1,2,1)
	CALL RELFILL('%GRV',GRAV(3),1,3,1)


C	---------------------------------------------------------------------
C     DATA FOR WHOLE ANALYSIS STEP
C	---------------------------------------------------------------------   

	CALL INTFILL('%NUB',NSN,1,1,0)
	CALL INTFILL('%NUB',NSF,1,2,0)

      CALL DEFNINT ('$NXF',KNXF,1  ,NSN) !EXISTING FLAG FOR NODE
	CALL INTZERO ('$NXF')

C	----------------------------------------
C	CALLING IDOFB
C	----------------------------------------
	DO I = 1,9
	CALL INTFILL('%DOB',IDOFB(I),1,I,0)
	ENDDO
      CALL DEFNINT ('$MBC',KMBC,NSF,NSN) !BOUNDARY CONDITION
	CALL INTZERO ('$MBC')
	DO ISN = 1,NSN
	DO ISF = 1,NSF
	IF(IDOFB(ISF).NE.0) CALL INTFILL('$MBC',2,ISF,ISN,1)
	ENDDO
	ENDDO
	
      CALL DEFNINT ('$NBC',KNBC,  1,NSN) !BOUNDARY CONDITION FLAG (STORE THE LAX NUMBER)
	CALL INTZERO ('$NBC')
      CALL DEFNREL ('$XLD',KXLD,NSF,NSN) !TOTAL NODAL JOINT LOAD
	CALL RELZERO ('$XLD')
      CALL DEFNREL ('$XDS',KXDS,NSF,NSN) !TOTAL NODAL DISPLACEMENT
	CALL RELZERO ('$XDS')


      CALL DEFNREL ('$XLI',KXLI,NSF,NSN) !INCREMENTAL NODAL JOINT LOAD
	CALL RELZERO ('$XLI')
      CALL DEFNREL ('$XDI',KXDI,NSF,NSN) !INCREMENTAL NODAL DISPLACEMENT
	CALL RELZERO ('$XDI')

C	---------------------------------------------------------------------
C     FLAG FOR INITIALIZE STIFFNESS FOR 1 TIME ANALYSIS
C	---------------------------------------------------------------------                                         
      CALL DEFNINT('%SNI',KSNI,1,1)
	CALL INTZERO('%SNI')



C	---------------------------------------------------------------------
C     DATA FOR FOR LOAD COMBINATION
C	---------------------------------------------------------------------   

      CALL DEFNREL ('-LDD',KLDD,NSF,NSN) !DEAD LOAD
	CALL RELZERO ('-LDD')
C	---------
      CALL DEFNREL ('-LTV',KLTV,NSF,NSN) !TRAVELER LOAD
	CALL RELZERO ('-LTV')
C	---------
      CALL DEFNREL ('-LST',KLST,NSF,NSN) !SETTLEMENT LOAD
	CALL RELZERO ('-LST')
C	---------
      CALL DEFNREL ('-LTM',KLTM,NSF,NSN) !TEMPERATURE LOAD
	CALL RELZERO ('-LTM')
C	---------
      CALL DEFNREL ('-LCT',KLCT,NSF,NSN) !CONSTRUCTION LOAD
	CALL RELZERO ('-LCT')
C	---------
      CALL DEFNREL ('-LTP',KLTP,NSF,NSN) !TENDON PRIMARY LOAD
	CALL RELZERO ('-LTP')
C	---------
      CALL DEFNREL ('-LTS',KLTS,NSF,NSN) !TENDON SECONDARY LOAD
	CALL RELZERO ('-LTS')
C	---------
      CALL DEFNREL ('-LCP',KLTP,NSF,NSN) !CREEP PRIMARY LOAD
	CALL RELZERO ('-LCP')
C	---------
      CALL DEFNREL ('-LCS',KLTS,NSF,NSN) !CREEP SECONDARY LOAD
	CALL RELZERO ('-LCS')

C	--------------------------
C	--------------------------

      CALL DEFNREL ('-ODD',KLDD,NSF,NSN) !DEAD LOAD
	CALL RELZERO ('-ODD')
C	---------
      CALL DEFNREL ('-OTV',KLTV,NSF,NSN) !TRAVELER LOAD
	CALL RELZERO ('-OTV')
C	---------
      CALL DEFNREL ('-OST',KLST,NSF,NSN) !SETTLEMENT LOAD
	CALL RELZERO ('-OST')
C	---------
      CALL DEFNREL ('-OTM',KLTM,NSF,NSN) !TEMPERATURE LOAD
	CALL RELZERO ('-OTM')
C	---------
      CALL DEFNREL ('-OCT',KLCT,NSF,NSN) !CONSTRUCTION LOAD
	CALL RELZERO ('-OCT')
C	---------
      CALL DEFNREL ('-OTP',KLTP,NSF,NSN) !TENDON PRIMARY LOAD
	CALL RELZERO ('-OTP')
C	---------
      CALL DEFNREL ('-OTS',KLTS,NSF,NSN) !TENDON SECONDARY LOAD
	CALL RELZERO ('-OTS')
C	---------
      CALL DEFNREL ('-OCP',KLTP,NSF,NSN) !CREEP PRIMARY LOAD
	CALL RELZERO ('-OCP')
C	---------
      CALL DEFNREL ('-OCS',KLTS,NSF,NSN) !CREEP SECONDARY LOAD
	CALL RELZERO ('-OCS')
C	---------
      CALL DEFNREL ('-ONL',KLNL,NSF,NSN) !NONLINEAR EFFECT
	CALL RELZERO ('-ONL')
C	--------------------------
C	--------------------------

      CALL DEFNREL ('#LDD',KLDD,NSF,NSN) !INCREMENTAL NODAL DEAD LOAD
	CALL RELZERO ('#LDD')
C	---------
      CALL DEFNREL ('#LTV',KLTV,NSF,NSN) !INCREMENTAL TRAVELER LOAD
	CALL RELZERO ('#LTV')
      CALL DEFNREL ('*LTV',KLTV,NSF,NSN) !TEMPORARY FORM TRAVELER LOAD (FOR FORM TRAVELER LOAD WHICH REMOVE THEM SELF AFTER COMPLETE ONE STEP)
	CALL RELZERO ('*LTV')	
C	---------
      CALL DEFNREL ('#LST',KLST,NSF,NSN) !INCREMENTAL SETTLEMENT LOAD
	CALL RELZERO ('#LST')
C	---------
      CALL DEFNREL ('#LTM',KLTM,NSF,NSN) !INCREMENTAL TEMPERATURE LOAD
	CALL RELZERO ('#LTM')
C	---------
      CALL DEFNREL ('#LCT',KLCT,NSF,NSN) !INCREMENTAL CONSTRUCTION LOAD
	CALL RELZERO ('#LCT')
C	---------
      CALL DEFNREL ('#LTP',KLTP,NSF,NSN) !INCREMENTAL TENDON PRIMARY LOAD
	CALL RELZERO ('#LTP')
C	---------
      CALL DEFNREL ('#LTS',KLTS,NSF,NSN) !INCREMENTAL TENDON SECONDARY LOAD
	CALL RELZERO ('#LTS')
C	---------
      CALL DEFNREL ('#LCP',KLTP,NSF,NSN) !INCREMENTAL CREEP PRIMARY LOAD
	CALL RELZERO ('#LCP')
C	---------
      CALL DEFNREL ('#LCS',KLTS,NSF,NSN) !INCREMENTAL CREEP SECONDARY LOAD
	CALL RELZERO ('#LCS')

C	--------------------------
C	--------------------------

      CALL DEFNREL ('+XDD',KLDD,NSF,NSN) !TOTAL NODAL DEAD DISPLACEMENT
	CALL RELZERO ('+XDD')
C	---------
      CALL DEFNREL ('+XTV',KLTV,NSF,NSN) !TOTAL TRAVELER DISPLACEMENT
	CALL RELZERO ('+XTV')
C	---------
      CALL DEFNREL ('+XST',KLST,NSF,NSN) !TOTAL SETTLEMENT DISPLACEMENT
	CALL RELZERO ('+XST')
C	---------
      CALL DEFNREL ('+XTM',KLTM,NSF,NSN) !TOTAL TEMPERATURE DISPLACEMENT
	CALL RELZERO ('+XTM')
C	---------
      CALL DEFNREL ('+XCT',KLCT,NSF,NSN) !TOTAL CONSTRUCTION DISPLACEMENT
	CALL RELZERO ('+XCT')
C	---------
      CALL DEFNREL ('+XTP',KLTP,NSF,NSN) !TOTAL TENDON PRIMARY DISPLACEMENT
	CALL RELZERO ('+XTP')
C	---------
      CALL DEFNREL ('+XTS',KLTS,NSF,NSN) !TOTAL TENDON SECONDARY DISPLACEMENT
	CALL RELZERO ('+XTS')
C	---------
      CALL DEFNREL ('+XCP',KLTP,NSF,NSN) !TOTAL CREEP PRIMARY DISPLACEMENT
	CALL RELZERO ('+XCP')
C	---------
      CALL DEFNREL ('+XCS',KLTS,NSF,NSN) !TOTAL CREEP SECONDARY DISPLACEMENT
	CALL RELZERO ('+XCS')
C	---------
      CALL DEFNREL ('+XNL',KLNL,NSF,NSN) !TOTAL NONLINEAR EFFECT DISPLACEMENT
	CALL RELZERO ('+XNL')
C	--------------------------
C	--------------------------






	RETURN

	END


C	=======================================================================
C	=== CONSTRUCTION ANALYSIS =============== SONGSAK NOV2007 =============
C	=======================================================================
      SUBROUTINE CSACOMB 
	IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER*4 (I-N)	
	DIMENSION LC(10)

   
	CALL DEFNINT ('$AYS',KAYS, 1,  10) !ANALYSIS NUMBER DATA
	CALL INTZERO ('$AYS')

	CALL FREBUF
	CALL FREECH
      CALL FREINT('N',NCOM,1) !NUMBER OF LOAD COMBINATION CASE
	IF(NCOM.LE.0) RETURN

      CALL DEFNINT ('$LCM',KLCM,20,NCOM) !LOAD COMBINATION DATA
	CALL INTZERO ('$LCM')   

      DO ICOM = 1,NCOM

	CALL FREBUF
	CALL FREECH
      CALL FREINT('N',NC,1) !COMBINATION CASE No.
      CALL FREINT('S',MC,1) !ANALYSIS No.
      CALL FREINT('B',IB,1) !FIRST OR LAST STEP
      CALL FREINT('L',LS,1) !LOAD CASE NO.
	LC(1:10) = 0
      CALL FREINT('C',LC,10) !LOAD COMPONENT  1=DEAD  2=TRAVELER  3=SETTLEMENT  4=TEMP  5=CONSTRUCTION  6=TENDON PR  7=TENDON SC  8=NONMCH PR  9=NONMCH SC  10=TOTAL

	CALL INTFILL('$LCM',MC,1,NC,1)
	CALL INTFILL('$LCM',IB,2,NC,1)
	CALL INTFILL('$LCM',LS,3,NC,1)
	DO I = 1,10
	N = 5 + I
	CALL INTFILL('$LCM',LC(I),N,NC,1)
	ENDDO

	ENDDO



	RETURN

	END


C	=======================================================================
C	=== CONSTRUCTION ANALYSIS =============== SONGSAK NOV2007 =============
C	=======================================================================
      SUBROUTINE CONCOM  
	IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER*4 (I-N)	

      LOGICAL TESTC
	CHARACTER*1 NOP
	DIMENSION NOP(8)
C	LELMC ELEMENT COMMAND
C		  = 0 REMOVE
C		  = 1 BUILD
C		  = 2 MODIFIED
C	LSUPC SUPPORT COMMAND
C		  = 0 FREE
C		  = 1 FIX CURRENT
C		  = 2 FIX ORIGINAL
C		  = 3 FIX WITH SPECIFIX VALUE
C	LTENC TENDON COMMAND
C		  = 0 REMOVE
C		  = 1 JACKING
C		  = 2 RESTRESS
C	LSETC SETTLEMENT COMMAND
C		  = 0 ADDED
C		  = 1 REPLACE
C	LTRVC TRAVELER COMMAND
C		  = 0 REMOVE
C		  = 1 MOVE
C		  = 2 ADDED LOAD
C	LLINK LINK COMMAND
C		  = 0 REMOVE
C		  = 1 INSTALL
C	LLODC LOAD COMMAND
C		  = 0 REMOVE
C		  = 1 ADDED
C		  = 2 REPLACE
C	LEODC ELEMENT LOAD COMMAND
C		  = 0 REPLACE
C		  = 1 ADDED
C	LSOLV = SOLVE - CALCULATION


	CALL CSACOMB   !LOAD COMBINATION DATA
	CALL SETENV

C	ANALYSIS NUMBER USE IN LOAD COMBINATION
	IALYS = 0

C     FLAG FOR TEMPORARY FORM TRAVELER LOAD (0=NO FORM TRAVELER EXIST  1=FORM TRAVELER EXIST  2=FORM TRAVELER PREPARE TO REMOVE FROM NEXT STEP)
      IFTRAV = 0    !0=NO FORM TRAVELER EXIST
      
C	READ OPERATION-----
10	CONTINUE	
	CALL FREBUF
	CALL FREECH
      CALL FRECHA(' ',NOP,8,1)

C	DETERMINE OPERATION
15	IF(.NOT.TESTC('UPDATE',NOP,6))	GO TO 20
	CALL UPDTDIS
      GO TO 10
C
20	IF(.NOT.TESTC('TRAVELER',NOP,8))	GO TO 25
	CALL TRVBUL
      GO TO 10
C
25	IF(.NOT.TESTC('INSTALL',NOP,7))	GO TO 30
	CALL GRLINS
      GO TO 10
C
30	IF(.NOT.TESTC('TENDON',NOP,6))	GO TO 35
	CALL TENFJAK
      GO TO 10
C
35	IF(.NOT.TESTC('LINK',NOP,4))	GO TO 40
	CALL LNKBUL
      GO TO 10
C
40	IF(.NOT.TESTC('SUPPORT',NOP,7))	GO TO 45
	CALL SUPBUL
      GO TO 10
C
45	IF(.NOT.TESTC('NODELOAD',NOP,8)) GO TO 50
	CALL NODACT
      GO TO 10
C
50	IF(.NOT.TESTC('NODEMOVE',NOP,8)) GO TO 55
	CALL NODPRE
      GO TO 10
C
55	IF(.NOT.TESTC('ELEMLOAD',NOP,8)) GO TO 60
	CALL GRLLOD
      GO TO 10
C
60	IF(.NOT.TESTC('SPRING',NOP,6)) GO TO 65
	CALL SPIGBUL
      GO TO 10
C      
65	IF(.NOT.TESTC('FTRAVEL',NOP,7)) GO TO 70  !FORM TRAVELER LOAD
	CALL TRAVELOD
	IFTRAV = 1    !1=FORM TRAVELER EXIST
      GO TO 10
C
70	IF(.NOT.TESTC('SOLVE',NOP,5))	GO TO 75


      IF(IFTRAV.EQ.1) THEN  !ADD THE FORM TRAVELER LOAD TO INC. EXTERNAL LOAD AND INC. TRAVELER LOAD
          IFTRAV = 2    !2=FORM TRAVELER PREPARE TO REMOVE FROM NEXT STEP
          FACTOR = 1.0D0
	    CALL LOCADD('$XLI','*LTV',FACTOR,2) !
	    CALL LOCADD('#LTV','*LTV',FACTOR,2) !
      ENDIF
      
	CALL EXSCLR  !CLEAR BEFORE SOLVE

	IALYS = IALYS + 1
	CALL INTFILL('$AYS',IALYS,1,1,1)  !STORE ANALYSIS NUMBER
	
	CALL CONSOLVE

	CALL RELZERO ('$XLI') !CLEAR THE INCREMENTAL NODAL LOAD
	CALL RELZERO ('$XDI') !CLEAR THE INCREMENTAL NODAL DISP

	CALL RELZERO ('#LDD')
	CALL RELZERO ('#LTV')
	CALL RELZERO ('#LST')
	CALL RELZERO ('#LTM')
	CALL RELZERO ('#LCT')
	CALL RELZERO ('#LTP')
	CALL RELZERO ('#LTS')
	CALL RELZERO ('#LCP')
	CALL RELZERO ('#LCS')

      IF(IFTRAV.EQ.2) THEN  !REMOVE THE FORM TRAVELER LOAD FROM INC. EXTERNAL LOAD AND INC. TRAVELER LOAD
          IFTRAV = 0    !FORM TRAVELER REMOVED, THEN --> 0=NO FORM TRAVELER EXIST
          FACTOR =-1.0D0
	    CALL LOCADD('$XLI','*LTV',FACTOR,2) !
	    CALL LOCADD('#LTV','*LTV',FACTOR,2) !
	    CALL RELZERO ('*LTV') !FORM TRAVELER LOAD AUTOMATICALLY CLEARED AFTER FINISH CONSTRUCTION ANALYSIS STEP
      ENDIF
      
      GO TO 10
C
75	IF(.NOT.TESTC('STOP',NOP,4))	GO TO 80
	RETURN

80	GOTO 10



	RETURN

	END



C	=======================================================================
C	=== CONSTRUCTION ANALYSIS =============== SONGSAK NOV2007 =============
C	=======================================================================
	SUBROUTINE EXSCLR
	IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER*4 (I-N)
      DIMENSION IDOFB(9)
C	CLEAR DATA IF NON EXISTED NODE


	CALL INTFILL('%NUB',NSN,1,1,0)
	CALL INTFILL('%NUB',NSF,1,2,0)	  

C	----------------------------------------
C	CALLING IDOFB
C	----------------------------------------
	DO I = 1,9
	CALL INTFILL('%DOB',IDOFB(I),1,I,0)
	ENDDO

	DO 2000 ISN = 1,NSN
	CALL INTFILL('$NXF',IX,1,ISN,0) !IX = EXISTING FLAG
	IF(IX.LE.0) THEN
	DO ISF = 1,NSF
	CALL INTFILL('$NXF',0,1,ISN,1)
	CALL RELFILL('$XDS',0.0D0,ISF,ISN,1)  !CLEAR DISP. 
	CALL RELFILL('$XDI',0.0D0,ISF,ISN,1)  !CLEAR INC DISP. 
	CALL RELFILL('$XLD',0.0D0,ISF,ISN,1)  !CLEAR LOAD. 
	CALL RELFILL('$XLI',0.0D0,ISF,ISN,1)  !CLEAR INC LOAD.
	 
	CALL INTFILL('$MBC',0    ,ISF,ISN,1)  !CLEAR SUPPORT COND
	IF(IDOFB(ISF).NE.0) CALL INTFILL('$MBC',2,ISF,ISN,1)
	
	CALL INTFILL('$NBC',0    ,ISF,ISN,1)  !CLEAR SUPPORT LAX SET
C	--------------------------
      CALL RELFILL('-LDD',0.0D0,ISF,ISN,1) !NODAL DEAD LOAD
      CALL RELFILL('-LTV',0.0D0,ISF,ISN,1) !TRAVELER LOAD
      CALL RELFILL('-OTV',0.0D0,ISF,ISN,1) !TRAVELER OLD INTERNAL LOAD
      CALL RELFILL('-LST',0.0D0,ISF,ISN,1) !SETTLEMENT LOAD
      CALL RELFILL('-LTM',0.0D0,ISF,ISN,1) !TEMPERATURE LOAD
      CALL RELFILL('-LCT',0.0D0,ISF,ISN,1) !CONSTRUCTION LOAD
      CALL RELFILL('-LTP',0.0D0,ISF,ISN,1) !TENDON PRIMARY LOAD
      CALL RELFILL('-LTS',0.0D0,ISF,ISN,1) !TENDON SECONDARY LOAD
      CALL RELFILL('-LCP',0.0D0,ISF,ISN,1) !CREEP PRIMARY LOAD
      CALL RELFILL('-LCS',0.0D0,ISF,ISN,1) !CREEP SECONDARY LOAD
C	--------------------------
      CALL RELFILL('-ODD',0.0D0,ISF,ISN,1) !NODAL DEAD LOAD
      CALL RELFILL('-OTV',0.0D0,ISF,ISN,1) !TRAVELER LOAD
      CALL RELFILL('-OTV',0.0D0,ISF,ISN,1) !TRAVELER OLD INTERNAL LOAD
      CALL RELFILL('-OST',0.0D0,ISF,ISN,1) !SETTLEMENT LOAD
      CALL RELFILL('-OTM',0.0D0,ISF,ISN,1) !TEMPERATURE LOAD
      CALL RELFILL('-OCT',0.0D0,ISF,ISN,1) !CONSTRUCTION LOAD
      CALL RELFILL('-OTP',0.0D0,ISF,ISN,1) !TENDON PRIMARY LOAD
      CALL RELFILL('-OTS',0.0D0,ISF,ISN,1) !TENDON SECONDARY LOAD
      CALL RELFILL('-OCP',0.0D0,ISF,ISN,1) !CREEP PRIMARY LOAD
      CALL RELFILL('-OCS',0.0D0,ISF,ISN,1) !CREEP SECONDARY LOAD
C	--------------------------
      CALL RELFILL('#LDD',0.0D0,ISF,ISN,1) !INCREMENTAL NODAL DEAD LOAD
      CALL RELFILL('#LTV',0.0D0,ISF,ISN,1) !INCREMENTAL TRAVELER LOAD
      CALL RELFILL('#LST',0.0D0,ISF,ISN,1) !INCREMENTAL SETTLEMENT LOAD
      CALL RELFILL('#LTM',0.0D0,ISF,ISN,1) !INCREMENTAL TEMPERATURE LOAD
      CALL RELFILL('#LCT',0.0D0,ISF,ISN,1) !INCREMENTAL CONSTRUCTION LOAD
      CALL RELFILL('#LTP',0.0D0,ISF,ISN,1) !INCREMENTAL TENDON PRIMARY LOAD
      CALL RELFILL('#LTS',0.0D0,ISF,ISN,1) !INCREMENTAL TENDON SECONDARY LOAD
      CALL RELFILL('#LCP',0.0D0,ISF,ISN,1) !INCREMENTAL CREEP PRIMARY LOAD
      CALL RELFILL('#LCS',0.0D0,ISF,ISN,1) !INCREMENTAL CREEP SECONDARY LOAD
C	--------------------------
      CALL RELFILL('+XDD',0.0D0,ISF,ISN,1) !TOTAL NODAL DEAD DISPLACEMENT
      CALL RELFILL('+XTV',0.0D0,ISF,ISN,1) !TOTAL TRAVELER DISPLACEMENT
      CALL RELFILL('+XST',0.0D0,ISF,ISN,1) !TOTAL SETTLEMENT DISPLACEMENT
      CALL RELFILL('+XTM',0.0D0,ISF,ISN,1) !TOTAL TEMPERATURE DISPLACEMENT
      CALL RELFILL('+XCT',0.0D0,ISF,ISN,1) !TOTAL CONSTRUCTION DISPLACEMENT
      CALL RELFILL('+XTP',0.0D0,ISF,ISN,1) !TOTAL TENDON PRIMARY DISPLACEMENT
      CALL RELFILL('+XTS',0.0D0,ISF,ISN,1) !TOTAL TENDON SECONDARY DISPLACEMENT
      CALL RELFILL('+XCP',0.0D0,ISF,ISN,1) !TOTAL CREEP PRIMARY DISPLACEMENT
      CALL RELFILL('+XCS',0.0D0,ISF,ISN,1) !TOTAL CREEP SECONDARY DISPLACEMENT
C	--------------------------
	ENDDO
	ENDIF
2000	CONTINUE



C	---------------------------------------------------------------------
C     DATA FOR FOR LOAD COMBINATION
C	---------------------------------------------------------------------   





	RETURN
	END


C	=======================================================================
C	=== CONSTRUCTION ANALYSIS =============== SONGSAK NOV2007 =============
C	======================================================================= 
      SUBROUTINE GRLINS
	IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER*4 (I-N)

C	------------------------------
C     ELEMENT OPERATION
C	------------------------------
C	LELMC ELEMENT COMMAND
C		  = 0 REMOVE
C		  = 1 BUILD
C		  = 2 MODIFIED

C	FILE FOR PRINTING  NOT=ISO
	CALL INTFILL('%IOL',NOT,1,3,0)

C	-----------------------------------------------------
C     FRAME ELEMENT EXISTENCE CODE:
C      = 0 ELEMENT HAS NEVER EXISTED & CURRENTLY REMOVED
C      = 1 CURRENTLY INSTALLED

C	READ COMMAND
C	CALL FREBUF
C	CALL FREECH

      NL = 0
      CALL FREINT('N',NL  ,1)	  !ELEMENT NUMBER

      IO = 0
      CALL FREINT('O',IO  ,1)	  !ELEMENT OPERATION
		
      IPRT = 1 
      CALL FREINT('P',IPRT,1)   !SECTION PART 

	ICNA = 0
      CALL FREINT('I',ICNA,1)   !FLAG FOR CALCULATION OF NEW N.A.

	LUPT = 1
	CALL FREINT('U',LUPT,1)   !FLAG FOR INSTALL TO UPDATED CONFIG.

	CAST = 0.0D0
      CALL FREREL('D',CAST,1)   !CASTING DAY

	FOCJ = 0.0D0
      CALL FREREL('F',FOCJ,1)   !TENSIONING FORCE OR INITIAL LENGTH FOR CABLE

C	-----------------------------------------------------
	IF(NL.LE.0) RETURN

C	----------------------------------------------------
C	GET GROUP & ELEMENT NUMBER DUE TO INPUT GID NUMBER
C	----------------------------------------------------
	CALL INTFILL('%GDM',IEG,1,NL,0)
	CALL INTFILL('%GDM',IEL,2,NL,0)

C	WRITE(*,*) NL,IEG,IEL	
	IF(IEG.EQ.0.OR.IEL.EQ.0) RETURN
C	-------------------------------------------

C	STORE COMMAND
      CALL DEFNREL('BUIL',KBLD,1,10)
      CALL RELFILL('BUIL',1.0D0*NL  ,1,1,1)
      CALL RELFILL('BUIL',1.0D0*IO  ,1,2,1)
      CALL RELFILL('BUIL',1.0D0*IPRT,1,3,1)
      CALL RELFILL('BUIL',1.0D0*ICNA,1,4,1)
      CALL RELFILL('BUIL',1.0D0*LUPT,1,5,1)
      CALL RELFILL('BUIL',      CAST,1,6,1)
      CALL RELFILL('BUIL',      FOCJ,1,7,1)

	CALL ELLBUL(IEG,IEL)

	CALL DELTREL('BUIL')

      RETURN
      END

C	=======================================================================
C	=== CONSTRUCTION ANALYSIS =============== SONGSAK NOV2007 =============
C	=======================================================================

      SUBROUTINE ELLBUL(IEG,IEL)
	IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER*4 (I-N)
C     ELEMENT OPERATION


	CALL MDUBUL(IEG,IEL)


	RETURN
	END



C	=======================================================================
C	=== CONSTRUCTION ANALYSIS =============== SONGSAK NOV2007 =============
C	=======================================================================

      SUBROUTINE MDUBUL(IEG,IEL)
	IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER*4 (I-N)
C     ELEMENT OPERATION

	CALL INTFILL('%GRP',ITYPE,1 ,IEG,0) !

	SELECTCASE(ITYPE)


	CASE(2)
	CALL LIEBUL(IEG,IEL)

	CASE(5)
	CALL FMEBUL(IEG,IEL)

	CASE(9)
	CALL SHEBUL(IEG,IEL)

	CASE(10)
	CALL SOEBUL(IEG,IEL)

	ENDSELECT



	RETURN
	END




C	=======================================================================
C	=== CONSTRUCTION ANALYSIS =============== SONGSAK NOV2007 =============
C	=======================================================================

      SUBROUTINE LIEBUL(IEG,IEL)
	IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER*4 (I-N)
C     TRUSS AND CABLE ELEMENT OPERATION


	CALL INTFILL('%GRP',ISTYP,2 ,IEG,0) !

	SELECTCASE(ISTYP)

	CASE(3,4,7)
	CALL LINBUL(IEG,IEL)


	ENDSELECT



	RETURN
	END




C	=======================================================================
C	=== CONSTRUCTION ANALYSIS =============== SONGSAK NOV2007 =============
C	=======================================================================
      SUBROUTINE FMEBUL(IEG,IEL)
	IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER*4 (I-N)
C     FRAME ELEMENT OPERATION


	CALL INTFILL('%GRP',ISTYP,2 ,IEG,0) !

	SELECTCASE(ISTYP)

	CASE(5)
	CALL FRMBUL(IEG,IEL)


	ENDSELECT



	RETURN
	END




C	=======================================================================
C	=== CONSTRUCTION ANALYSIS =============== SONGSAK NOV2007 =============
C	=======================================================================
      SUBROUTINE SHEBUL(IEG,IEL)
	IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER*4 (I-N)
C     FRAME ELEMENT OPERATION


	CALL INTFILL('%GRP',ISTYP,2 ,IEG,0) !

	SELECTCASE(ISTYP)

	CASE(1)
	CALL SHLBUL(IEG,IEL)

	CASE(4)
	CALL SHLBUL(IEG,IEL)

	ENDSELECT



	RETURN
	END


C	=======================================================================
C	=== CONSTRUCTION ANALYSIS ================ PROMIN NOV2010 =============
C	=======================================================================
      SUBROUTINE SOEBUL(IEG,IEL)
	IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER*4 (I-N)
C     FRAME ELEMENT OPERATION


	CALL INTFILL('%GRP',ISTYP,2 ,IEG,0) !

	SELECTCASE(ISTYP)

	CASE(1) ! SOLICO
	CALL SOLBUL(IEG,IEL)

	CASE(6) ! SOLIDEAS
	CALL SOLBUL(IEG,IEL)

	ENDSELECT

	RETURN
	END



C	=======================================================================
C	=== CONSTRUCTION ANALYSIS =============== SONGSAK NOV2007 =============
C	=======================================================================


      SUBROUTINE LINBUL(IEG,IEL)
	IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER*4 (I-N)
C     TRUSS&CABLE ELEMENT OPERATION
	DIMENSION NPM(10),NPI(10)
	ALLOCATABLE IF1(:),IF2(:),IF3(:)
	ALLOCATABLE AF4(:),AF5(:),AF6(:),AF7(:),AF8(:)
	ALLOCATABLE FEM(:)
	ALLOCATABLE IAX(:),AAX(:)



	CALL RELFILL('%EAY',TODAY,1,2,0)   !CURRENT DAY

C	GET COMMAND 
      CALL RELFILL('BUIL',FNL  ,1,1,0)
      CALL RELFILL('BUIL',FIO  ,1,2,0)
      CALL RELFILL('BUIL',FIPRT,1,3,0)
      CALL RELFILL('BUIL',FICNA,1,4,0)
      CALL RELFILL('BUIL',FLUPT,1,5,0)
      CALL RELFILL('BUIL',CAST ,1,6,0)
      CALL RELFILL('BUIL',FOCJ ,1,7,0)

	NL   = INT(FNL  )
	IO   = INT(FIO  )
	IPRT = INT(FIPRT)
	ICNA = INT(FICNA)
	LUPT = INT(FLUPT)

C	----------------------------------------
C	GROUP DATA
C	----------------------------------------
	CALL INTFILL('%GRP',ITYPE,1 ,IEG,0) !
	CALL INTFILL('%GRP',ISTYP,2 ,IEG,0) !
	CALL INTFILL('%GRP',NELE ,3 ,IEG,0) !
	CALL INTFILL('%GRP',MPRT ,4 ,IEG,0) ! MAXP
	CALL INTFILL('%GRP',MGAS ,5 ,IEG,0) !
	CALL INTFILL('%GRP',MFIB ,6 ,IEG,0) !
	CALL INTFILL('%GRP',NEF  ,7 ,IEG,0) !
	CALL INTFILL('%GRP',NNM  ,8 ,IEG,0) !
	CALL INTFILL('%GRP',NNF  ,9 ,IEG,0) !
	CALL INTFILL('%GRP',NGR  ,10,IEG,0) !
	CALL INTFILL('%GRP',NGS  ,11,IEG,0) !
	CALL INTFILL('%GRP',NGT  ,12,IEG,0) !
C	GROUP FILE
	CALL INTFILL('%GRF',N1   ,1 ,IEG,0) !
	CALL INTFILL('%GRF',N2   ,2 ,IEG,0) !
	CALL INTFILL('%GRF',N3   ,3 ,IEG,0) !
	CALL INTFILL('%GRF',N4   ,4 ,IEG,0) !
	CALL INTFILL('%GRF',N5   ,5 ,IEG,0) !
	CALL INTFILL('%GRF',N6   ,6 ,IEG,0) !
	CALL INTFILL('%GRF',N7   ,7 ,IEG,0) !
	CALL INTFILL('%GRF',N8   ,8 ,IEG,0) !
	CALL INTFILL('%GRF',N9   ,9 ,IEG,0) !
	CALL INTFILL('%GRF',N10  ,10,IEG,0) !

	CALL INTFILL('%GRF',NDX1 ,11,IEG,0) !
	CALL INTFILL('%GRF',NDX2 ,12,IEG,0) !
	CALL INTFILL('%GRF',NDX3 ,13,IEG,0) !
	CALL INTFILL('%GRF',NDX4 ,14,IEG,0) !
	CALL INTFILL('%GRF',NDX5 ,15,IEG,0) !
	CALL INTFILL('%GRF',NDX6 ,16,IEG,0) !
	CALL INTFILL('%GRF',NDX7 ,17,IEG,0) !
	CALL INTFILL('%GRF',NDX8 ,18,IEG,0) !
	CALL INTFILL('%GRF',NDX9 ,19,IEG,0) !
	CALL INTFILL('%GRF',NDX10,20,IEG,0) !
	
	CALL INTFILL('%GRF',NFLI ,21,IEG,0) !
	CALL INTFILL('%GRF',NFLR ,22,IEG,0) !
	
	CALL INTFILL('%GRF',LASI ,23,IEG,0) !
	CALL INTFILL('%GRF',LASR ,24,IEG,0) !
C	----------------------------------------
	ALLOCATE(IF1(N1),IF2(N2),IF3(N3))
	ALLOCATE(AF4(N4),AF5(N5),AF6(N6),AF7(N7),AF8(N8))
	ALLOCATE(FEM(NEF))
	ALLOCATE(IAX(LASI),AAX(LASR))

      READ(NFLI,REC=IEL) IAX
      READ(NFLR,REC=IEL) AAX
C	-------------------------------------------------
	SELECTCASE(IO)
C	-------------------------------------------------


	CASE(0)  !REMOVE
C	==============================================
	NPM(1) = N3
	NPI(1) = N3
	CALL CALLINTG(IF3,IAX,NDX3,NPM,NPI,1,'READ') !CALLING IF3
	IXIST = IF3(4)  !TOTAL EXISTING FLAG 
	NPRT  = IF3(6)  !NUMBER OF PART
C	-----------------------------------------
	IF(IPRT.LE.0.OR.IPRT.GT.NPRT) RETURN


	NPM(1) = N6
	NPI(1) = N6
	CALL CALLREAL(AF6,AAX,NDX6,NPM,NPI,1,'READ') !CALLING AF6

	NPM(1) = N8
	NPI(1) = N8
	CALL CALLREAL(AF8,AAX,NDX8,NPM,NPI,1,'READ') !CALLING AF8 FOR FIXEND
C	-----------------------------------------
	NPM(1:2) = [N4,MPRT]
	NPI(1:2) = [N4,1   ]
	CALL CALLREAL(AF4,AAX,NDX4,NPM,NPI,2,'READ') !CALLING AF4
	IPIST = INT(AF4(1))

C	SET ELEMENT EXISTENCE FLAG IPIST
C		= 0 element has never existed & currently removed
C		= 1 currently installed
	IF(IXIST.EQ.0) GOTO 3000


C	UPDATE PART INFORMATION	
	AF4(1) = FLOAT(0)                 !EXISTING FLAG
      AF4(3) = 0.0D0			        !CASTING DATE
      AF4(4) = 0.0D0				    !INSTALLATION UPDATE
      AF4(6) = 0.0D0				    !PRETENSION OR INITIAL LENGTH


	NPM(1) = N1
	NPI(1) = N1
	CALL CALLINTG(IF1,IAX,NDX1,NPM,NPI,1,'READ') !CALLING ELEMENT NODE NUMBER
	NPM(1) = N2
	NPI(1) = N2
	CALL CALLINTG(IF2,IAX,NDX2,NPM,NPI,1,'READ') !CALLING ELEMENT ORIGINAL EQUATION NUMBER


C	ADD *REVERSE* SELFWEIGHT TO INCREMENTAL NODAL JOINT LOAD
	FAC = -1.0D0            !REVERSE OF DEAD LAOD	
	FEM(1:NEF) = 0.0D0
	CALL SEFWLIE(IEG,IEL,FEM,IAX)
	DO IEF = 1,NEF
	IEQ  = IF2(IEF)						!IF2(1:NEF) = ORIGINAL ELEMENT EQAUATION
	CALL RELFILL('$XLI',FAC*FEM(IEF),IEQ,1,2)   
	CALL RELFILL('#LDD',FAC*FEM(IEF),IEQ,1,2)  !REMOVE FROM DEAD LOAD   
	NUM = IEF+NEF+NEF+NEF
	AF6(NUM) = AF6(NUM)+FAC*FEM(IEF)        !ACCUMULATE FIXEND FORCES.
	NUM = IEF
	AF8(NUM) = AF8(NUM)+FAC*FEM(IEF)        !ACCUMULATE DEAD LOAD.
	ENDDO

C	---------------------------------------------------------	
	IF3(4) = IF3(4) - 1       !DECREASE ELEMENT TOTAL EXISTING FLAG
	IF(IF3(4).LT.0) IF3(4) = 0
C	NEXT IS FOR TOTALLY REMOVED ELEM.
	IF3(7) = 0                !CLEAR ELEMENT FIRST INSTALLATION DAY
C	------------------------------------


C	----------------------
C	CLEAR WORKING ARRAY
	NPM(1:4)  = [N5,MFIB,MGAS,MPRT]
	NPI(1:4)  = [N5,1   ,1   ,1   ]
	CALL CALLREAL(AF5,AAX,NDX5,NPM,NPI,4,'READ') !CALLING AF5 FOR FIBER WORKING ARRAY
	AF5(1:N5) = 0.0D0 !CLEAR IT HERE (MAKE FRESH ELEMENT)                           
	NPM(1:4)  = [N5,MFIB,MGAS,MPRT]
	NPI(1:4)  = [N5,1   ,1   ,1   ]
	CALL CALLREAL(AF5,AAX,NDX5,NPM,NPI,4,'WRIT') !CALLING AF5 FOR FIBER WORKING ARRAY
C	----------------------


	DO IEF = 1,NEF
	    IEQ  = IF2(IEF)				        !IF2(1:NEF) = ORIGINAL EQAUATION
	    NUM  = IEF+NEF+NEF+NEF
	    FRV  = -1.0D0*AF6(NUM)                !REVERSE FIXEND FORCE
	    CALL RELFILL('$XLI',FRV,IEQ,1,2)      !REMOVE FROM INCREMENTAL LOAD 
	    AF6(NUM) = 0.0D0                      !CLEAR FIXEND
	ENDDO

	DO IEF = 1,NEF
	    IEQ  = IF2(IEF)						!IF2(1:NEF) = ORIGINAL EQAUATION
	    NUM  = IEF+NEF*4
	    FRV  = -1.0D0*AF8(NUM)                !REVERSE FIXEND CONSTRUCTION FORCE
	    CALL RELFILL('#LCT',FRV,IEQ,1,2)      !REMOVE FROM INCREMENTAL CONSTRUCTION LOAD 
	    AF8(NUM) = 0.0D0                      !CLEAR FIXEND
	ENDDO


C	ELEMENT INITIAL DISPLACEMENTS	
	AF6(1:N6) = 0.0D0					!CLEAR ELEMENT ERECTED DISP.  + FORCE

C	ACCUMULATE NODAL EXISTING FLAG
	DO INM = 1,NNM
	    ISN = IF1(INM)
	    CALL INTFILL('$NXF',-1,1,ISN,2)      
	ENDDO

C	------------------------------------
3000	CONTINUE


	NPM(1) = N6
	NPI(1) = N6
	CALL CALLREAL(AF6,AAX,NDX6,NPM,NPI,1,'WRIT') !BACK UP AF6 
C	-----------------------------------------
	NPM(1) = N8
	NPI(1) = N8
	CALL CALLREAL(AF8,AAX,NDX8,NPM,NPI,1,'WRIT') !BACKUP AF8 FOR FIXEND
C	-----------------------------------------
	NPM(1) = N3
	NPI(1) = N3
	CALL CALLINTG(IF3,IAX,NDX3,NPM,NPI,1,'WRIT') !UPDATE ELEMENT DATA
C	-----------------------------------------
	NPM(1:2) = [N4,MPRT]
	NPI(1:2) = [N4,1   ]
	CALL CALLREAL(AF4,AAX,NDX4,NPM,NPI,2,'WRIT') !UPDATE PART DATA
C	------------------------------------
      WRITE(NFLI,REC=NELE+IEL) IF3(4) !WRITE EXISTING FLAG TO LAST RECORD OF ELEMENT INTEGER DATA (INCREASE THE SPEED PURPOSE)
C	==============================================



	CASE(1) !INSTALL
C	==============================================
	NPM(1) = N3
	NPI(1) = N3
	CALL CALLINTG(IF3,IAX,NDX3,NPM,NPI,1,'READ') !CALLING IF3
	IXIST = IF3(4)  !TOTAL EXISTING FLAG 
	NPRT  = IF3(6)  !NUMBER OF PART
C	-----------------------------------------
	IF(IPRT.LE.0.OR.IPRT.GT.NPRT) RETURN

	NPM(1) = N6
	NPI(1) = N6
	CALL CALLREAL(AF6,AAX,NDX6,NPM,NPI,1,'READ') !CALLING AF6

	NPM(1) = N8
	NPI(1) = N8
	CALL CALLREAL(AF8,AAX,NDX8,NPM,NPI,1,'READ') !CALLING AF8 FOR FIXEND
C	-----------------------------------------
	NPM(1:2) = [N4,MPRT]
	NPI(1:2) = [N4,1   ]
	CALL CALLREAL(AF4,AAX,NDX4,NPM,NPI,2,'READ') !CALLING AF4
	IPIST = INT(AF4(1))

C	SET ELEMENT EXISTENCE FLAG IPIST
C		= 0 element has never existed & currently removed
C		= 1 currently installed
	IF(IXIST.GT.0) GOTO 2000

C	UPDATE PART INFORMATION	
	AF4(1) = FLOAT(1)              !EXISTING FLAG
      AF4(3) = DMIN1(CAST,TODAY)     !CASTING DATE
      AF4(4) = TODAY				   !INSTALLATION UPDATE
      AF4(6) = FOCJ				   !PRETENSION OR INITIAL LENGTH


	NPM(1) = N1
	NPI(1) = N1
	CALL CALLINTG(IF1,IAX,NDX1,NPM,NPI,1,'READ') !CALLING ELEMENT NODE NUMBER
	NPM(1) = N2
	NPI(1) = N2
	CALL CALLINTG(IF2,IAX,NDX2,NPM,NPI,1,'READ') !CALLING ELEMENT ORIGINAL EQUATION NUMBER


C	ADD SELFWEIGHT TO INCREMENTAL NODAL JOINT LOAD
	FAC = 1.0D0            !ADD DEAD LAOD	
	FEM(1:NEF) = 0.0D0
	CALL SEFWLIE(IEG,IEL,FEM,IAX)
	DO IEF = 1,NEF
	IEQ  = IF2(IEF)						!IF2(1:NEF) = ORIGINAL ELEMENT EQAUATION
	CALL RELFILL('$XLI',FAC*FEM(IEF),IEQ,1,2)   
	CALL RELFILL('#LDD',FAC*FEM(IEF),IEQ,1,2)  !DEAD LOAD   
	NUM = IEF+NEF+NEF+NEF
	AF6(NUM) = AF6(NUM)+FAC*FEM(IEF)        !ACCUMULATE FIXEND FORCES.
	NUM = IEF
	AF8(NUM) = AF8(NUM)+FAC*FEM(IEF)        !ACCUMULATE DEAD LOAD.
	ENDDO

C	---------------------------------------------------------	
C	NEXT IS FOR NEWLY INSTALLATION ELEM.
	IF3(4) = IF3(4) + 1                 !ACCUMULATE ELEMENT EXISTING FLAG
	IF3(7) = INT(TODAY)					!ELEMENT FIRST INSTALLATION DAY
C	------------------------------------
C	ELEMENT INITIAL DISPLACEMENTS	
	
	IF(LUPT.EQ.1) THEN
	DO IEF = 1,NEF
	IEQ  = IF2(IEF)						!IF2(1:NEF) = ELEMENT ORIGINAL EQAUATION
	CALL RELFILL('$XDS',AF6(IEF),IEQ,1,0)    !TRANSFER ELEMENT ERECTED DISP. TO AF6(1:NEF)
	ENDDO
	ENDIF


C	ACCUMULATE NODAL EXISTING FLAG
	DO INM = 1,NNM
	ISN = IF1(INM)
	CALL INTFILL('$NXF',1,1,ISN,2)      
	ENDDO
 
C	------------------------------------
2000	CONTINUE


	NPM(1) = N6
	NPI(1) = N6
	CALL CALLREAL(AF6,AAX,NDX6,NPM,NPI,1,'WRIT') !BACK UP AF6 
C	-----------------------------------------
	NPM(1) = N8
	NPI(1) = N8
	CALL CALLREAL(AF8,AAX,NDX8,NPM,NPI,1,'WRIT') !BACKUP AF8 FOR FIXEND
C	-----------------------------------------
	NPM(1) = N3
	NPI(1) = N3
	CALL CALLINTG(IF3,IAX,NDX3,NPM,NPI,1,'WRIT') !UPDATE ELEMENT DATA
C	-----------------------------------------
	NPM(1:2) = [N4,MPRT]
	NPI(1:2) = [N4,1   ]
	CALL CALLREAL(AF4,AAX,NDX4,NPM,NPI,2,'WRIT') !UPDATE PART DATA
C	------------------------------------
      WRITE(NFLI,REC=NELE+IEL) IF3(4) !WRITE EXISTING FLAG TO LAST RECORD OF ELEMENT INTEGER DATA (INCREASE THE SPEED PURPOSE)
C	==============================================



	CASE(2)  !RESTRESS
C	==============================================
	NPM(1) = N3
	NPI(1) = N3
	CALL CALLINTG(IF3,IAX,NDX3,NPM,NPI,1,'READ') !CALLING IF3
	IXIST = IF3(4)  !TOTAL EXISTING FLAG 
	NPRT  = IF3(6)  !NUMBER OF PART
C	-----------------------------------------
	IF(IPRT.LE.0.OR.IPRT.GT.NPRT) RETURN


	NPM(1) = N6
	NPI(1) = N6
	CALL CALLREAL(AF6,AAX,NDX6,NPM,NPI,1,'READ') !CALLING AF6
C	-----------------------------------------
	NPM(1:2) = [N4,MPRT]
	NPI(1:2) = [N4,1   ]
	CALL CALLREAL(AF4,AAX,NDX4,NPM,NPI,2,'READ') !CALLING AF4
	IPIST = INT(AF4(1))

C	SET ELEMENT EXISTENCE FLAG IPIST
C		= 0 element has never existed & currently removed
C		= 1 currently installed
	IF(IXIST.EQ. 0) GOTO 4000

C	UPDATE PART INFORMATION	
	AF4(1) = FLOAT(1)              !EXISTING FLAG
      AF4(3) = DMIN1(CAST,TODAY)     !CASTING DATE
      AF4(4) = TODAY				   !INSTALLATION UPDATE
      AF4(6) = FOCJ				   !PRETENSION OR INITIAL LENGTH

	NPM(1) = N2
	NPI(1) = N2
	CALL CALLINTG(IF2,IAX,NDX2,NPM,NPI,1,'READ') !CALLING ELEMENT ORIGINAL EQUATION NUMBER

C	ELEMENT INITIAL DISPLACEMENTS	
	DO IEF = 1,NEF
	IEQ  = IF2(IEF)						     !IF2(1:NEF) = ELEMENT ORIGINAL EQAUATION
	CALL RELFILL('$XDS',AF6(IEF),IEQ,1,0)    !TRANSFER ELEMENT ERECTED DISP. TO AF6(1:NEF)
	ENDDO

C	----------------------
C	CLEAR WORKING ARRAY
	NPM(1:4)  = [N5,MFIB,MGAS,MPRT]
	NPI(1:4)  = [N5,1   ,1   ,1   ]
	CALL CALLREAL(AF5,AAX,NDX5,NPM,NPI,4,'READ') !CALLING AF5 FOR FIBER WORKING ARRAY
	AF5(1:N5) = 0.0D0 !CLEAR IT HERE (MAKE FRESH ELEMENT)                           
	NPM(1:4)  = [N5,MFIB,MGAS,MPRT]
	NPI(1:4)  = [N5,1   ,1   ,1   ]
	CALL CALLREAL(AF5,AAX,NDX5,NPM,NPI,4,'WRIT') !CALLING AF5 FOR FIBER WORKING ARRAY
C	----------------------

C	------------------------------------
4000	CONTINUE

	NPM(1) = N6
	NPI(1) = N6
	CALL CALLREAL(AF6,AAX,NDX6,NPM,NPI,1,'WRIT') !BACK UP AF6 
C	-----------------------------------------
	NPM(1) = N3
	NPI(1) = N3
	CALL CALLINTG(IF3,IAX,NDX3,NPM,NPI,1,'WRIT') !UPDATE ELEMENT DATA
C	-----------------------------------------
	NPM(1:2) = [N4,MPRT]
	NPI(1:2) = [N4,1   ]
	CALL CALLREAL(AF4,AAX,NDX4,NPM,NPI,2,'WRIT') !UPDATE PART DATA
C	------------------------------------
      WRITE(NFLI,REC=NELE+IEL) IF3(4) !WRITE EXISTING FLAG TO LAST RECORD OF ELEMENT INTEGER DATA (INCREASE THE SPEED PURPOSE)
C	==============================================



C	-------------------------------------------------
	ENDSELECT
C	-------------------------------------------------

      WRITE(NFLI,REC=IEL) IAX
      WRITE(NFLR,REC=IEL) AAX
      
	DEALLOCATE(IAX,AAX)
      
	DEALLOCATE(IF1,IF2,IF3,AF4,AF5,AF6,AF7)
	DEALLOCATE(AF8)
	DEALLOCATE(FEM)



	RETURN

	END



C	=======================================================================
C	=== CONSTRUCTION ANALYSIS =============== SONGSAK NOV2007 =============
C	=======================================================================
      SUBROUTINE FRMBUL(IEG,IEL)
	IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER*4 (I-N)
C     FRAME ELEMENT OPERATION
	DIMENSION NPM(10),NPI(10)
	ALLOCATABLE IF1(:),IF2(:),IF3(:)
	ALLOCATABLE AF4(:),AF5(:),AF6(:),AF7(:),AF8(:),AF10(:)
	ALLOCATABLE FEM(:),FEL(:)
	ALLOCATABLE IAX(:),AAX(:)



	CALL RELFILL('%EAY',TODAY,1,2,0)   !CURRENT DAY

C	GET COMMAND 
      CALL RELFILL('BUIL',FNL  ,1,1,0)
      CALL RELFILL('BUIL',FIO  ,1,2,0)
      CALL RELFILL('BUIL',FIPRT,1,3,0)
      CALL RELFILL('BUIL',FICNA,1,4,0)
      CALL RELFILL('BUIL',FLUPT,1,5,0)
      CALL RELFILL('BUIL',CAST ,1,6,0)

	NL   = INT(FNL  )
	IO   = INT(FIO  )
	LPRT = INT(FIPRT)
	ICNA = INT(FICNA)
	LUPT = INT(FLUPT)

C	----------------------------------------
C	GROUP DATA
C	----------------------------------------
	CALL INTFILL('%GRP',ITYPE,1 ,IEG,0) !
	CALL INTFILL('%GRP',ISTYP,2 ,IEG,0) !
	CALL INTFILL('%GRP',NELE ,3 ,IEG,0) !
	CALL INTFILL('%GRP',MPRT ,4 ,IEG,0) ! MAXP
	CALL INTFILL('%GRP',MGAS ,5 ,IEG,0) !
	CALL INTFILL('%GRP',MFIB ,6 ,IEG,0) !
	CALL INTFILL('%GRP',NEF  ,7 ,IEG,0) !
	CALL INTFILL('%GRP',NNM  ,8 ,IEG,0) !
	CALL INTFILL('%GRP',NNF  ,9 ,IEG,0) !
	CALL INTFILL('%GRP',NGR  ,10,IEG,0) !
	CALL INTFILL('%GRP',NGS  ,11,IEG,0) !
	CALL INTFILL('%GRP',NGT  ,12,IEG,0) !
C	GROUP FILE
	CALL INTFILL('%GRF',N1   ,1 ,IEG,0) !
	CALL INTFILL('%GRF',N2   ,2 ,IEG,0) !
	CALL INTFILL('%GRF',N3   ,3 ,IEG,0) !
	CALL INTFILL('%GRF',N4   ,4 ,IEG,0) !
	CALL INTFILL('%GRF',N5   ,5 ,IEG,0) !
	CALL INTFILL('%GRF',N6   ,6 ,IEG,0) !
	CALL INTFILL('%GRF',N7   ,7 ,IEG,0) !
	CALL INTFILL('%GRF',N8   ,8 ,IEG,0) !
	CALL INTFILL('%GRF',N9   ,9 ,IEG,0) !
	CALL INTFILL('%GRF',N10  ,10,IEG,0) !

	CALL INTFILL('%GRF',NDX1 ,11,IEG,0) !
	CALL INTFILL('%GRF',NDX2 ,12,IEG,0) !
	CALL INTFILL('%GRF',NDX3 ,13,IEG,0) !
	CALL INTFILL('%GRF',NDX4 ,14,IEG,0) !
	CALL INTFILL('%GRF',NDX5 ,15,IEG,0) !
	CALL INTFILL('%GRF',NDX6 ,16,IEG,0) !
	CALL INTFILL('%GRF',NDX7 ,17,IEG,0) !
	CALL INTFILL('%GRF',NDX8 ,18,IEG,0) !
	CALL INTFILL('%GRF',NDX9 ,19,IEG,0) !
	CALL INTFILL('%GRF',NDX10,20,IEG,0) !
	
	CALL INTFILL('%GRF',NFLI ,21,IEG,0) !
	CALL INTFILL('%GRF',NFLR ,22,IEG,0) !
	
	CALL INTFILL('%GRF',LASI ,23,IEG,0) !
	CALL INTFILL('%GRF',LASR ,24,IEG,0) !
C	----------------------------------------
	ALLOCATE(IF1(N1),IF2(N2),IF3(N3),AF4(N4),AF5(N5),AF6(N6),AF7(N7))
	ALLOCATE(AF8(N8),AF10(N10))
	ALLOCATE(FEM(NEF),FEL(NEF))
	ALLOCATE(IAX(LASI),AAX(LASR))

      READ(NFLI,REC=IEL) IAX
      READ(NFLR,REC=IEL) AAX

	
	DO 8000 IPRT = 1,MPRT
	    IF(LPRT.NE.-1) THEN  !(-1 IS FOR ALL PART)
	      IF(IPRT.NE.LPRT) GOTO 8000   
	    ENDIF

C	-------------------------------------------------
	SELECTCASE(IO)
C	-------------------------------------------------


	CASE(0)  !REMOVE
C	==============================================
	NPM(1) = N3
	NPI(1) = N3
	CALL CALLINTG(IF3,IAX,NDX3,NPM,NPI,1,'READ') !CALLING IF3
	IXIST = IF3(4)  !TOTAL EXISTING FLAG 
	NPRT  = IF3(6)  !NUMBER OF PART
	IF(IXIST.EQ.0) RETURN
C	-----------------------------------------
	IF(IPRT.LE.0.OR.IPRT.GT.NPRT) RETURN

	NPM(1) = N6
	NPI(1) = N6
	CALL CALLREAL(AF6,AAX,NDX6,NPM,NPI,1,'READ') !CALLING AF6

	NPM(1) = N8
	NPI(1) = N8
	CALL CALLREAL(AF8,AAX,NDX8,NPM,NPI,1,'READ') !CALLING AF8 FOR FIXEND

	NPM(1:2) = [N10,MPRT]
	NPI(1:2) = [N10,IPRT]
	CALL CALLREAL(AF10,AAX,NDX10,NPM,NPI,2,'READ')  !CALLING AF10 ERECTED DISP FOR EACH PART
C	-----------------------------------------
	NPM(1:2) = [N4,MPRT]
	NPI(1:2) = [N4,IPRT]
	CALL CALLREAL(AF4,AAX,NDX4,NPM,NPI,2,'READ') !CALLING AF4
	IPIST = INT(AF4(1))

C	SET ELEMENT EXISTENCE FLAG IPIST
C		= 0 element has never existed & currently removed
C		= 1 currently installed
	IF(IPIST.EQ.0) GOTO 3000


C	UPDATE PART INFORMATION	
	AF4(1) = FLOAT(0)              !EXISTING FLAG
      AF4(3) = 0.0D0			       !CASTING DATE
      AF4(4) = 0.0D0				   !INSTALLATION UPDATE


	NPM(1) = N1
	NPI(1) = N1
	CALL CALLINTG(IF1,IAX,NDX1,NPM,NPI,1,'READ') !CALLING ELEMENT NODE NUMBER
	NPM(1) = N2
	NPI(1) = N2
	CALL CALLINTG(IF2,IAX,NDX2,NPM,NPI,1,'READ') !CALLING ELEMENT ORIGINAL EQUATION NUMBER


C	ADD *REVERSE* SELFWEIGHT TO INCREMENTAL NODAL JOINT LOAD
	FAC = -1.0D0            !REVERSE OF DEAD LAOD	
	FEM(1:NEF) = 0.0D0
	FEL(1:NEF) = 0.0D0
	CALL SEFWFRM(IEG,IEL,IPRT,FEM,FEL,IAX,AAX)
	DO IEF = 1,NEF
	IEQ  = IF2(IEF)						!IF2(1:NEF) = ORIGINAL ELEMENT EQAUATION
	CALL RELFILL('$XLI',FAC*FEM(IEF),IEQ,1,2)   
	CALL RELFILL('#LDD',FAC*FEM(IEF),IEQ,1,2)  !REMOVE FROM DEAD LOAD   
	NUM = IEF+NEF+NEF+NEF
	AF6(NUM) = AF6(NUM)+FAC*FEL(IEF)        !ACCUMULATE FIXEND FORCES.
	NUM = IEF
	AF8(NUM) = AF8(NUM)+FAC*FEL(IEF)        !ACCUMULATE DEAD LOAD.
	ENDDO

C	ELEMENT PART INITIAL DISPLACEMENTS	JAN09
	AF10(1:NEF) = 0.0D0					!CLEAR ELEMENT ERECTED DISP. FOR THIS PART  AF10(1:NEF)

C	---------------------------------------------------------	
	IF3(4) = IF3(4) - 1
	IF(IF3(4).GT.0) GOTO 3000  !IF ELEMENT STILL EXIST ..NO NEED TO UPDATE THE INITIAL DISPLACEMENT (TO BE MODIFIED TO PUT IN EACH PART)

C	NEXT IS FOR TOTALLY REMOVED ELEM.
	IF3(7) = 0                !CLEAR ELEMENT FIRST INSTALLATION DAY
C	------------------------------------


	DO IEF = 1,NEF
	IEQ  = IF2(IEF)						!IF2(1:NEF) = ORIGINAL EQAUATION
	NUM  = IEF+NEF+NEF+NEF
	FRV  = -1.0D0*AF6(NUM)              !REVERSE FIXEND FORCE
	CALL RELFILL('$XLI',FRV,IEQ,1,2)    !REMOVE FROM INCREMENTAL LOAD 
	AF6(NUM) = 0.0D0                    !CLEAR FIXEND
	ENDDO

	DO IEF = 1,NEF
	IEQ  = IF2(IEF)						!IF2(1:NEF) = ORIGINAL EQAUATION
	NUM  = IEF+NEF*4
	FRV  = -1.0D0*AF8(NUM)              !REVERSE FIXEND CONSTRUCTION FORCE
	CALL RELFILL('#LCT',FRV,IEQ,1,2)    !REMOVE FROM INCREMENTAL CONSTRUCTION LOAD 
	AF8(NUM) = 0.0D0                    !CLEAR FIXEND
	ENDDO


C	ELEMENT INITIAL DISPLACEMENTS	
	AF6(1:NEF) = 0.0D0					!CLEAR ELEMENT ERECTED DISP.  AF6(1:NEF)

C	ACCUMULATE NODAL EXISTING FLAG
	DO INM = 1,NNM
	ISN = IF1(INM)
	CALL INTFILL('$NXF',-1,1,ISN,2)      
	ENDDO

C	------------------------------------
3000	CONTINUE

	NPM(1) = N6
	NPI(1) = N6
	CALL CALLREAL(AF6,AAX,NDX6,NPM,NPI,1,'WRIT') !BACK UP AF6 
C	-----------------------------------------
	NPM(1) = N8
	NPI(1) = N8
	CALL CALLREAL(AF8,AAX,NDX8,NPM,NPI,1,'WRIT') !BACKUP AF8 FOR FIXEND
C	-----------------------------------------
	NPM(1) = N3
	NPI(1) = N3
	CALL CALLINTG(IF3,IAX,NDX3,NPM,NPI,1,'WRIT') !UPDATE ELEMENT DATA
C	-----------------------------------------
	NPM(1:2) = [N4,MPRT]
	NPI(1:2) = [N4,IPRT]
	CALL CALLREAL(AF4,AAX,NDX4,NPM,NPI,2,'WRIT') !UPDATE PART DATA
C	------------------------------------
	NPM(1:2) = [N10,MPRT]
	NPI(1:2) = [N10,IPRT]
	CALL CALLREAL(AF10,AAX,NDX10,NPM,NPI,2,'WRIT') !BACKUP AF10 ERECTED DISP FOR EACH PART
C	-----------------------------------------
      WRITE(NFLI,REC=NELE+IEL) IF3(4) !WRITE EXISTING FLAG TO LAST RECORD OF ELEMENT INTEGER DATA (INCREASE THE SPEED PURPOSE)
C	==============================================



	CASE(1) !INSTALL
C	==============================================
	NPM(1) = N3
	NPI(1) = N3
	CALL CALLINTG(IF3,IAX,NDX3,NPM,NPI,1,'READ') !CALLING IF3
	IXIST = IF3(4)  !TOTAL EXISTING FLAG 
	NPRT  = IF3(6)  !NUMBER OF PART
C	-----------------------------------------
	IF(IPRT.LE.0.OR.IPRT.GT.NPRT) RETURN

	NPM(1) = N6
	NPI(1) = N6
	CALL CALLREAL(AF6,AAX,NDX6,NPM,NPI,1,'READ') !CALLING AF6 (FOR ERECTED DISP.)

	NPM(1) = N8
	NPI(1) = N8
	CALL CALLREAL(AF8,AAX,NDX8,NPM,NPI,1,'READ') !CALLING AF8 FOR FIXEND

	NPM(1:2) = [N10,MPRT]
	NPI(1:2) = [N10,IPRT]
	CALL CALLREAL(AF10,AAX,NDX10,NPM,NPI,2,'READ')  !CALLING AF10 ERECTED DISP FOR EACH PART
C	-----------------------------------------
	NPM(1:2) = [N4,MPRT]
	NPI(1:2) = [N4,IPRT]
	CALL CALLREAL(AF4,AAX,NDX4,NPM,NPI,2,'READ') !CALLING AF4
	IPIST = INT(AF4(1))

C	SET ELEMENT EXISTENCE FLAG IPIST
C		= 0 element has never existed & currently removed
C		= 1 currently installed
	IF(IPIST.GT.0) GOTO 2000

C	UPDATE PART INFORMATION	
	AF4(1) = FLOAT(1)              !EXISTING FLAG
      AF4(3) = DMIN1(CAST,TODAY)     !CASTING DATE
      AF4(4) = TODAY				   !INSTALLATION UPDATE


	NPM(1) = N1
	NPI(1) = N1
	CALL CALLINTG(IF1,IAX,NDX1,NPM,NPI,1,'READ') !CALLING ELEMENT NODE NUMBER
	NPM(1) = N2
	NPI(1) = N2
	CALL CALLINTG(IF2,IAX,NDX2,NPM,NPI,1,'READ') !CALLING ELEMENT ORIGINAL EQUATION NUMBER


C	ADD SELFWEIGHT TO INCREMENTAL NODAL JOINT LOAD	
	FAC = 1.0D0            !APPLY DEAD LAOD	
	FEM(1:NEF) = 0.0D0
	FEL(1:NEF) = 0.0D0
	CALL SEFWFRM(IEG,IEL,IPRT,FEM,FEL,IAX,AAX)
	DO IEF = 1,NEF
	IEQ  = IF2(IEF)						!IF2(1:NEF) = ORIGINAL EQAUATION
	CALL RELFILL('$XLI',FAC*FEM(IEF),IEQ,1,2)  
	CALL RELFILL('#LDD',FAC*FEM(IEF),IEQ,1,2)  !DEAD LOAD   
	NUM = IEF+NEF+NEF+NEF
	AF6(NUM) = AF6(NUM)+FAC*FEL(IEF)        !ACCUMULATE FIXEND FORCES.
	NUM = IEF
	AF8(NUM) = AF8(NUM)+FAC*FEL(IEF)        !ACCUMULATE DEAD LOAD.
	ENDDO
C	------------------------------------
C	ELEMENT PART INITIAL DISPLACEMENTS	JAN09
	IF(LUPT.EQ.1) THEN
	DO IEF = 1,NEF
	IEQ  = IF2(IEF)						!IF2(1:NEF) = ELEMENT ORIGINAL EQAUATION
	CALL RELFILL('$XDS',AF10(IEF),IEQ,1,0)    !TRANSFER ELEMENT ERECTED DISP. TO AF6(1:NEF)
	ENDDO
	ENDIF
C	------------------------------------


C	---------------------------------------------------------	
	IF(IXIST.GT.0) THEN
	IF3(4) = IF3(4) + 1                 !ACCUMULATE ELEMENt EXISTING FLAG
	GOTO 2000  !IF ELEMENT ALREADY EXIST ..NO NEED TO UPDATE THE INITIAL DISPLACEMENT (TO BE MODIFIED TO PUT IN EACH PART)
	ENDIF

C	NEXT IS FOR NEWLY INSTALLATION ELEM.
	IF3(4) = IF3(4) + 1                 !ACCUMULATE ELEMENT EXISTING FLAG
	IF3(7) = INT(TODAY)					!ELEMENT FIRST INSTALLATION DAY
C	------------------------------------
C	ELEMENT INITIAL DISPLACEMENTS	
	
	IF(LUPT.EQ.1) THEN
	DO IEF = 1,NEF
	IEQ  = IF2(IEF)						!IF2(1:NEF) = ELEMENT ORIGINAL EQAUATION
	CALL RELFILL('$XDS',AF6(IEF),IEQ,1,0)    !TRANSFER ELEMENT ERECTED DISP. TO AF6(1:NEF)
	ENDDO
	ENDIF


C	ACCUMULATE NODAL EXISTING FLAG
	DO INM = 1,NNM
	ISN = IF1(INM)
	CALL INTFILL('$NXF',1,1,ISN,2)   
	ENDDO
 
C	------------------------------------
2000	CONTINUE


	NPM(1) = N6
	NPI(1) = N6
	CALL CALLREAL(AF6,AAX,NDX6,NPM,NPI,1,'WRIT') !BACK UP AF6 
C	-----------------------------------------
	NPM(1) = N8
	NPI(1) = N8
	CALL CALLREAL(AF8,AAX,NDX8,NPM,NPI,1,'WRIT') !BACKUP AF8 FOR FIXEND
C	-----------------------------------------
	NPM(1) = N3
	NPI(1) = N3
	CALL CALLINTG(IF3,IAX,NDX3,NPM,NPI,1,'WRIT') !UPDATE ELEMENT DATA
C	-----------------------------------------
	NPM(1:2) = [N4,MPRT]
	NPI(1:2) = [N4,IPRT]
	CALL CALLREAL(AF4,AAX,NDX4,NPM,NPI,2,'WRIT') !UPDATE PART DATA
C	------------------------------------
	NPM(1:2) = [N10,MPRT]
	NPI(1:2) = [N10,IPRT]
	CALL CALLREAL(AF10,AAX,NDX10,NPM,NPI,2,'WRIT') !BACKUP AF10 ERECTED DISP FOR EACH PART
C	-----------------------------------------
      WRITE(NFLI,REC=NELE+IEL) IF3(4) !WRITE EXISTING FLAG TO LAST RECORD OF ELEMENT INTEGER DATA (INCREASE THE SPEED PURPOSE)
C	==============================================



C	-------------------------------------------------
	ENDSELECT
C	-------------------------------------------------

8000	CONTINUE

      WRITE(NFLI,REC=IEL) IAX
      WRITE(NFLR,REC=IEL) AAX
      
	DEALLOCATE(IAX,AAX)

	DEALLOCATE(IF1,IF2,IF3,AF4,AF5,AF6,AF7)
	DEALLOCATE(AF8,AF10)
	DEALLOCATE(FEM,FEL)


	RETURN

	END



C	=======================================================================
C	=== CONSTRUCTION ANALYSIS =============== SONGSAK NOV2007 =============
C	=======================================================================
      SUBROUTINE SHLBUL(IEG,IEL)
	IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER*4 (I-N)
C     SHELL ELEMENT OPERATION
	DIMENSION NPM(10),NPI(10)
	ALLOCATABLE IF1(:),IF2(:),IF3(:),AF4(:),AF5(:),AF6(:),AF7(:)
	ALLOCATABLE AF8(:)
	ALLOCATABLE FEM(:)
	ALLOCATABLE IAX(:),AAX(:)



	CALL RELFILL('%EAY',TODAY,1,2,0)   !CURRENT DAY

C	GET COMMAND 
      CALL RELFILL('BUIL',FNL  ,1,1,0)
      CALL RELFILL('BUIL',FIO  ,1,2,0)
      CALL RELFILL('BUIL',FIPRT,1,3,0)
      CALL RELFILL('BUIL',FICNA,1,4,0)
      CALL RELFILL('BUIL',FLUPT,1,5,0)
      CALL RELFILL('BUIL',CAST ,1,6,0)

	NL   = INT(FNL  )
	IO   = INT(FIO  )
	LPRT = INT(FIPRT)
	ICNA = INT(FICNA)
	LUPT = INT(FLUPT)

C	----------------------------------------
C	GROUP DATA
C	----------------------------------------
	CALL INTFILL('%GRP',ITYPE,1 ,IEG,0) !
	CALL INTFILL('%GRP',ISTYP,2 ,IEG,0) !
	CALL INTFILL('%GRP',NELE ,3 ,IEG,0) !
	CALL INTFILL('%GRP',MPRT ,4 ,IEG,0) ! MAXP
	CALL INTFILL('%GRP',MGAS ,5 ,IEG,0) !
	CALL INTFILL('%GRP',MFIB ,6 ,IEG,0) !
	CALL INTFILL('%GRP',NEF  ,7 ,IEG,0) !
	CALL INTFILL('%GRP',NNM  ,8 ,IEG,0) !
	CALL INTFILL('%GRP',NNF  ,9 ,IEG,0) !
	CALL INTFILL('%GRP',NGR  ,10,IEG,0) !
	CALL INTFILL('%GRP',NGS  ,11,IEG,0) !
	CALL INTFILL('%GRP',NGT  ,12,IEG,0) !
C	GROUP FILE
	CALL INTFILL('%GRF',N1   ,1 ,IEG,0) !
	CALL INTFILL('%GRF',N2   ,2 ,IEG,0) !
	CALL INTFILL('%GRF',N3   ,3 ,IEG,0) !
	CALL INTFILL('%GRF',N4   ,4 ,IEG,0) !
	CALL INTFILL('%GRF',N5   ,5 ,IEG,0) !
	CALL INTFILL('%GRF',N6   ,6 ,IEG,0) !
	CALL INTFILL('%GRF',N7   ,7 ,IEG,0) !
	CALL INTFILL('%GRF',N8   ,8 ,IEG,0) !
	CALL INTFILL('%GRF',N9   ,9 ,IEG,0) !
	CALL INTFILL('%GRF',N10  ,10,IEG,0) !

	CALL INTFILL('%GRF',NDX1 ,11,IEG,0) !
	CALL INTFILL('%GRF',NDX2 ,12,IEG,0) !
	CALL INTFILL('%GRF',NDX3 ,13,IEG,0) !
	CALL INTFILL('%GRF',NDX4 ,14,IEG,0) !
	CALL INTFILL('%GRF',NDX5 ,15,IEG,0) !
	CALL INTFILL('%GRF',NDX6 ,16,IEG,0) !
	CALL INTFILL('%GRF',NDX7 ,17,IEG,0) !
	CALL INTFILL('%GRF',NDX8 ,18,IEG,0) !
	CALL INTFILL('%GRF',NDX9 ,19,IEG,0) !
	CALL INTFILL('%GRF',NDX10,20,IEG,0) !
	
	CALL INTFILL('%GRF',NFLI ,21,IEG,0) !
	CALL INTFILL('%GRF',NFLR ,22,IEG,0) !
	
	CALL INTFILL('%GRF',LASI ,23,IEG,0) !
	CALL INTFILL('%GRF',LASR ,24,IEG,0) !

C	----------------------------------------
	ALLOCATE(IF1(N1),IF2(N2),IF3(N3),AF4(N4),AF5(N5),AF6(N6),AF7(N7))
	ALLOCATE(AF8(N8))
	ALLOCATE(FEM(NEF))
	ALLOCATE(IAX(LASI),AAX(LASR))

      READ(NFLI,REC=IEL) IAX
      READ(NFLR,REC=IEL) AAX
	
	DO 8000 IPRT = 1,MPRT
	    IF(LPRT.NE.-1) THEN  !(-1 IS FOR ALL PART)
	      IF(IPRT.NE.LPRT) GOTO 8000   
	    ENDIF

C	-------------------------------------------------
	SELECTCASE(IO)
C	-------------------------------------------------


	CASE(0)  !REMOVE
C	==============================================
	NPM(1) = N3
	NPI(1) = N3
	CALL CALLINTG(IF3,IAX,NDX3,NPM,NPI,1,'READ') !CALLING IF3
	IXIST = IF3(4)  !TOTAL EXISTING FLAG 
	NPRT  = IF3(6)  !NUMBER OF PART
	IF(IXIST.EQ.0) RETURN
C	-----------------------------------------
	IF(IPRT.LE.0.OR.IPRT.GT.NPRT) RETURN

	NPM(1) = N6
	NPI(1) = N6
	CALL CALLREAL(AF6,AAX,NDX6,NPM,NPI,1,'READ') !CALLING AF6

	NPM(1) = N8
	NPI(1) = N8
	CALL CALLREAL(AF8,AAX,NDX8,NPM,NPI,1,'READ') !CALLING AF8 FOR FIXEND
C	-----------------------------------------
	NPM(1:2) = [N4,MPRT]
	NPI(1:2) = [N4,IPRT]
	CALL CALLREAL(AF4,AAX,NDX4,NPM,NPI,2,'READ') !CALLING AF4
	IPIST = INT(AF4(1))

C	SET ELEMENT EXISTENCE FLAG IPIST
C		= 0 element has never existed & currently removed
C		= 1 currently installed
	IF(IPIST.EQ. 0) GOTO 3000


C	UPDATE PART INFORMATION	
	AF4(1) = FLOAT(0)              !EXISTING FLAG
      AF4(3) = 0.0D0			       !CASTING DATE
      AF4(4) = 0.0D0				   !INSTALLATION UPDATE


	NPM(1) = N1
	NPI(1) = N1
	CALL CALLINTG(IF1,IAX,NDX1,NPM,NPI,1,'READ') !CALLING ELEMENT NODE NUMBER
	NPM(1) = N2
	NPI(1) = N2
	CALL CALLINTG(IF2,IAX,NDX2,NPM,NPI,1,'READ') !CALLING ELEMENT ORIGINAL EQUATION NUMBER


C	ADD *REVERSE* SELFWEIGHT TO INCREMENTAL NODAL JOINT LOAD
	FAC = -1.0D0            !REVERSE OF DEAD LAOD	
	FEM(1:NEF) = 0.0D0
	CALL SEFWSHL(IEG,IEL,IPRT,FEM,IAX)
	DO IEF = 1,NEF
	IEQ  = IF2(IEF)						!IF2(1:NEF) = ORIGINAL ELEMENT EQAUATION
	CALL RELFILL('$XLI',FAC*FEM(IEF),IEQ,1,2)   
	CALL RELFILL('#LDD',FAC*FEM(IEF),IEQ,1,2)  !REMOVE FROM DEAD LOAD   
	NUM = IEF+NEF+NEF+NEF
	AF6(NUM) = AF6(NUM)+FAC*FEM(IEF)        !ACCUMULATE FIXEND FORCES.
	NUM = IEF
	AF8(NUM) = AF8(NUM)+FAC*FEM(IEF)        !ACCUMULATE DEAD LOAD.
	ENDDO

C	---------------------------------------------------------	
	IF3(4) = IF3(4) - 1
	IF(IF3(4).GT.0) GOTO 3000  !IF ELEMENT STILL EXIST ..NO NEED TO UPDATE THE INITIAL DISPLACEMENT (TO BE MODIFIED TO PUT IN EACH PART)

C	NEXT IS FOR TOTALLY REMOVED ELEM.
	IF3(7) = 0                !CLEAR ELEMENT FIRST INSTALLATION DAY
C	------------------------------------


	DO IEF = 1,NEF
	IEQ  = IF2(IEF)						!IF2(1:NEF) = ORIGINAL EQAUTION
	NUM  = IEF+NEF+NEF+NEF
	FRV  = -1.0D0*AF6(NUM)              !REVERSE FIXEND FORCE
	CALL RELFILL('$XLI',FRV,IEQ,1,2)    !REMOVE FROM INCREMENTAL LOAD 
	AF6(NUM) = 0.0D0                    !CLEAR FIXEND
	ENDDO

	DO IEF = 1,NEF
	IEQ  = IF2(IEF)						!IF2(1:NEF) = ORIGINAL EQAUATION
	NUM  = IEF+NEF*4
	FRV  = -1.0D0*AF8(NUM)              !REVERSE FIXEND CONSTRUCTION FORCE
	CALL RELFILL('#LCT',FRV,IEQ,1,2)    !REMOVE FROM INCREMENTAL CONSTRUCTION LOAD 
	AF8(NUM) = 0.0D0                    !CLEAR FIXEND
	ENDDO


C	ELEMENT INITIAL DISPLACEMENTS	
	AF6(1:NEF) = 0.0D0					!CLEAR ELEMENT ERECTED DISP.  AF6(1:NEF)

C	ACCUMULATE NODAL EXISTING FLAG
	DO INM = 1,NNM
	ISN = IF1(INM)
	CALL INTFILL('$NXF',-1,1,ISN,2)      
	ENDDO

C	------------------------------------
3000	CONTINUE


	NPM(1) = N6
	NPI(1) = N6
	CALL CALLREAL(AF6,AAX,NDX6,NPM,NPI,1,'WRIT') !BACK UP AF6 
C	-----------------------------------------
	NPM(1) = N8
	NPI(1) = N8
	CALL CALLREAL(AF8,AAX,NDX8,NPM,NPI,1,'WRIT') !BACKUP AF8 FOR FIXEND
C	-----------------------------------------
	NPM(1) = N3
	NPI(1) = N3
	CALL CALLINTG(IF3,IAX,NDX3,NPM,NPI,1,'WRIT') !UPDATE ELEMENT DATA
C	-----------------------------------------
	NPM(1:2) = [N4,MPRT]
	NPI(1:2) = [N4,IPRT]
	CALL CALLREAL(AF4,AAX,NDX4,NPM,NPI,2,'WRIT') !UPDATE PART DATA
C	------------------------------------
      WRITE(NFLI,REC=NELE+IEL) IF3(4) !WRITE EXISTING FLAG TO LAST RECORD OF ELEMENT INTEGER DATA (INCREASE THE SPEED PURPOSE)
C	==============================================



	CASE(1) !INSTALL

C	==============================================
	NPM(1) = N3
	NPI(1) = N3
	CALL CALLINTG(IF3,IAX,NDX3,NPM,NPI,1,'READ') !CALLING IF3
	IXIST = IF3(4)  !TOTAL EXISTING FLAG 
	NPRT  = IF3(6)  !NUMBER OF PART
C	-----------------------------------------

	IF(IPRT.LE.0.OR.IPRT.GT.NPRT) RETURN


	NPM(1) = N6
	NPI(1) = N6
	CALL CALLREAL(AF6,AAX,NDX6,NPM,NPI,1,'READ') !CALLING AF6 (FOR ERECTED DISP.)

	NPM(1) = N8
	NPI(1) = N8
	CALL CALLREAL(AF8,AAX,NDX8,NPM,NPI,1,'READ') !CALLING AF8 FOR FIXEND
C	-----------------------------------------
	NPM(1:2) = [N4,MPRT]
	NPI(1:2) = [N4,IPRT]
	CALL CALLREAL(AF4,AAX,NDX4,NPM,NPI,2,'READ') !CALLING AF4
	IPIST = INT(AF4(1))

C	SET ELEMENT EXISTENCE FLAG IPIST
C		= 0 element has never existed & currently removed
C		= 1 currently installed
	IF(IPIST.GT.0) GOTO 2000

C	UPDATE PART INFORMATION	
	AF4(1) = FLOAT(1)              !EXISTING FLAG
      AF4(3) = DMIN1(CAST,TODAY)     !CASTING DATE
      AF4(4) = TODAY				   !INSTALLATION UPDATE


	NPM(1) = N1
	NPI(1) = N1
	CALL CALLINTG(IF1,IAX,NDX1,NPM,NPI,1,'READ') !CALLING ELEMENT NODE NUMBER
	NPM(1) = N2
	NPI(1) = N2
	CALL CALLINTG(IF2,IAX,NDX2,NPM,NPI,1,'READ') !CALLING ELEMENT ORIGINAL EQUATION NUMBER
	

C	ADD SELFWEIGHT TO INCREMENTAL NODAL JOINT LOAD	
	FAC = 1.0D0            !APPLY DEAD LAOD	
	FEM(1:NEF) = 0.0D0
	CALL SEFWSHL(IEG,IEL,IPRT,FEM,IAX)


	DO IEF = 1,NEF
	IEQ  = IF2(IEF)						!IF2(1:NEF) = ORIGINAL EQAUATION
	CALL RELFILL('$XLI',FAC*FEM(IEF),IEQ,1,2)   
	CALL RELFILL('#LDD',FAC*FEM(IEF),IEQ,1,2)  !DEAD LOAD   
	NUM = IEF+NEF+NEF+NEF
	AF6(NUM) = AF6(NUM)+FAC*FEM(IEF)        !ACCUMULATE FIXEND FORCES.
	NUM = IEF
	AF8(NUM) = AF8(NUM)+FAC*FEM(IEF)        !ACCUMULATE DEAD LOAD.
	ENDDO


C	---------------------------------------------------------	
	IF(IXIST.GT.0) THEN
	IF3(4) = IF3(4) + 1                 !ACCUMULATE ELEMENt EXISTING FLAG
	GOTO 2000  !IF ELEMENT ALREADY EXIST ..NO NEED TO UPDATE THE INITIAL DISPLACEMENT (TO BE MODIFIED TO PUT IN EACH PART)
	ENDIF

C	NEXT IS FOR NEWLY INSTALLATION ELEM.
	IF3(4) = IF3(4) + 1                 !ACCUMULATE ELEMENT EXISTING FLAG
	IF3(7) = INT(TODAY)					!ELEMENT FIRST INSTALLATION DAY
C	------------------------------------
C	ELEMENT INITIAL DISPLACEMENTS	
	
	IF(LUPT.EQ.1) THEN
	DO IEF = 1,NEF
	IEQ  = IF2(IEF)						!IF2(1:NEF) = ELEMENT ORIGINAL EQAUATION
	CALL RELFILL('$XDS',AF6(IEF),IEQ,1,0)    !TRANSFER ELEMENT ERECTED DISP. TO AF6(1:NEF)
	ENDDO
	ENDIF


C	ACCUMULATE NODAL EXISTING FLAG
	DO INM = 1,NNM
	ISN = IF1(INM)
	CALL INTFILL('$NXF',1,1,ISN,2)      
	ENDDO
 
C	------------------------------------
2000	CONTINUE


	NPM(1) = N6
	NPI(1) = N6
	CALL CALLREAL(AF6,AAX,NDX6,NPM,NPI,1,'WRIT') !BACK UP AF6 
C	-----------------------------------------
	NPM(1) = N8
	NPI(1) = N8
	CALL CALLREAL(AF8,AAX,NDX8,NPM,NPI,1,'WRIT') !BACKUP AF8 FOR FIXEND
C	-----------------------------------------
	NPM(1) = N3
	NPI(1) = N3
	CALL CALLINTG(IF3,IAX,NDX3,NPM,NPI,1,'WRIT') !UPDATE ELEMENT DATA
C	-----------------------------------------
	NPM(1:2) = [N4,MPRT]
	NPI(1:2) = [N4,IPRT]
	CALL CALLREAL(AF4,AAX,NDX4,NPM,NPI,2,'WRIT') !UPDATE PART DATA
C	------------------------------------
      WRITE(NFLI,REC=NELE+IEL) IF3(4) !WRITE EXISTING FLAG TO LAST RECORD OF ELEMENT INTEGER DATA (INCREASE THE SPEED PURPOSE)
C	==============================================



C	-------------------------------------------------
	ENDSELECT
C	-------------------------------------------------

8000	CONTINUE

      WRITE(NFLI,REC=IEL) IAX
      WRITE(NFLR,REC=IEL) AAX
      
	DEALLOCATE(IAX,AAX)

	DEALLOCATE(IF1,IF2,IF3,AF4,AF5,AF6,AF7)
	DEALLOCATE(AF8)
	DEALLOCATE(FEM)


	RETURN

	END





C	=======================================================================
C	=== CONSTRUCTION ANALYSIS =============== PRAMIN OCT 2010 =============
C	=======================================================================
      ! SOLID ELEMENT
      SUBROUTINE SOLBUL(IEG,IEL)  
	IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER*4 (I-N)
C     SHELL ELEMENT OPERATION
	DIMENSION NPM(10),NPI(10)
	ALLOCATABLE IF1(:),IF2(:),IF3(:),AF4(:),AF5(:),AF6(:),AF7(:)
	ALLOCATABLE AF8(:)
	ALLOCATABLE FEM(:)
	ALLOCATABLE IAX(:),AAX(:)

	CALL RELFILL('%EAY',TODAY,1,2,0)   !CURRENT DAY

C	GET COMMAND 
      CALL RELFILL('BUIL',FNL  ,1,1,0)
      CALL RELFILL('BUIL',FIO  ,1,2,0)
      CALL RELFILL('BUIL',FIPRT,1,3,0)
      CALL RELFILL('BUIL',FICNA,1,4,0)
      CALL RELFILL('BUIL',FLUPT,1,5,0)
      CALL RELFILL('BUIL',CAST ,1,6,0)

	NL   = INT(FNL  )
	IO   = INT(FIO  )
	LPRT = INT(FIPRT)
	ICNA = INT(FICNA)
	LUPT = INT(FLUPT)

C	----------------------------------------
C	GROUP DATA
C	----------------------------------------
	CALL INTFILL('%GRP',ITYPE,1 ,IEG,0) !
	CALL INTFILL('%GRP',ISTYP,2 ,IEG,0) !
	CALL INTFILL('%GRP',NELE ,3 ,IEG,0) !
	CALL INTFILL('%GRP',MPRT ,4 ,IEG,0) ! MAXP
	CALL INTFILL('%GRP',MGAS ,5 ,IEG,0) !
	CALL INTFILL('%GRP',MFIB ,6 ,IEG,0) !
	CALL INTFILL('%GRP',NEF  ,7 ,IEG,0) !
	CALL INTFILL('%GRP',NNM  ,8 ,IEG,0) !
	CALL INTFILL('%GRP',NNF  ,9 ,IEG,0) !
	CALL INTFILL('%GRP',NGR  ,10,IEG,0) !
	CALL INTFILL('%GRP',NGS  ,11,IEG,0) !
	CALL INTFILL('%GRP',NGT  ,12,IEG,0) !
C	GROUP FILE
	CALL INTFILL('%GRF',N1   ,1 ,IEG,0) !
	CALL INTFILL('%GRF',N2   ,2 ,IEG,0) !
	CALL INTFILL('%GRF',N3   ,3 ,IEG,0) !
	CALL INTFILL('%GRF',N4   ,4 ,IEG,0) !
	CALL INTFILL('%GRF',N5   ,5 ,IEG,0) !
	CALL INTFILL('%GRF',N6   ,6 ,IEG,0) !
	CALL INTFILL('%GRF',N7   ,7 ,IEG,0) !
	CALL INTFILL('%GRF',N8   ,8 ,IEG,0) !
	CALL INTFILL('%GRF',N9   ,9 ,IEG,0) !
	CALL INTFILL('%GRF',N10  ,10,IEG,0) !

	CALL INTFILL('%GRF',NDX1 ,11,IEG,0) !
	CALL INTFILL('%GRF',NDX2 ,12,IEG,0) !
	CALL INTFILL('%GRF',NDX3 ,13,IEG,0) !
	CALL INTFILL('%GRF',NDX4 ,14,IEG,0) !
	CALL INTFILL('%GRF',NDX5 ,15,IEG,0) !
	CALL INTFILL('%GRF',NDX6 ,16,IEG,0) !
	CALL INTFILL('%GRF',NDX7 ,17,IEG,0) !
	CALL INTFILL('%GRF',NDX8 ,18,IEG,0) !
	CALL INTFILL('%GRF',NDX9 ,19,IEG,0) !
	CALL INTFILL('%GRF',NDX10,20,IEG,0) !
	
	CALL INTFILL('%GRF',NFLI ,21,IEG,0) !
	CALL INTFILL('%GRF',NFLR ,22,IEG,0) !
	
	CALL INTFILL('%GRF',LASI ,23,IEG,0) !
	CALL INTFILL('%GRF',LASR ,24,IEG,0) !

C	----------------------------------------
	ALLOCATE(IF1(N1),IF2(N2),IF3(N3),AF4(N4),AF5(N5),AF6(N6),AF7(N7))
	ALLOCATE(AF8(N8))
	ALLOCATE(FEM(NEF))
	ALLOCATE(IAX(LASI),AAX(LASR))

      READ(NFLI,REC=IEL) IAX
      READ(NFLR,REC=IEL) AAX
	
	DO 8000 IPRT = 1,MPRT
	    IF(LPRT.NE.-1) THEN  !(-1 IS FOR ALL PART)
	      IF(IPRT.NE.LPRT) GOTO 8000   
	    ENDIF

C	-------------------------------------------------
	SELECTCASE(IO)
C	-------------------------------------------------
	CASE(0)  !REMOVE
C	==============================================
C	IF3 -----------------------------------------
	NPM(1) = N3
	NPI(1) = N3
	CALL CALLINTG(IF3,IAX,NDX3,NPM,NPI,1,'READ') !CALLING IF3
	IXIST = IF3(4)  !TOTAL EXISTING FLAG 
	NPRT  = IF3(6)  !NUMBER OF PART
	IF(IXIST.EQ.0) RETURN

	IF(IPRT.LE.0.OR.IPRT.GT.NPRT) RETURN
C	AF6 -----------------------------------------
	NPM(1) = N6
	NPI(1) = N6
	CALL CALLREAL(AF6,AAX,NDX6,NPM,NPI,1,'READ') !CALLING AF6
C	AF8 -----------------------------------------
	NPM(1) = N8
	NPI(1) = N8
	CALL CALLREAL(AF8,AAX,NDX8,NPM,NPI,1,'READ') !CALLING AF8 FOR FIXEND
C	AF4 -----------------------------------------
	NPM(1:2) = [N4,MPRT]
	NPI(1:2) = [N4,IPRT]
	CALL CALLREAL(AF4,AAX,NDX4,NPM,NPI,2,'READ') !CALLING AF4
	IPIST = INT(AF4(1))
C	---------------------------------------------
C	SET ELEMENT EXISTENCE FLAG IPIST
C		= 0 element has never existed & currently removed
C		= 1 currently installed
	IF(IPIST.EQ. 0) GOTO 3000


C	UPDATE PART INFORMATION	
	AF4(1) = FLOAT(0)                !EXISTING FLAG
      AF4(3) = 0.0D0			       !CASTING DATE
      AF4(4) = 0.0D0				   !INSTALLATION UPDATE

C	IF1 -----------------------------------------
	NPM(1) = N1
	NPI(1) = N1
	CALL CALLINTG(IF1,IAX,NDX1,NPM,NPI,1,'READ') !CALLING ELEMENT NODE NUMBER
C	IF2 -----------------------------------------	
	NPM(1) = N2
	NPI(1) = N2
	CALL CALLINTG(IF2,IAX,NDX2,NPM,NPI,1,'READ') !CALLING ELEMENT ORIGINAL EQUATION NUMBER

C	=============================================
C     REMOVE SELFWEIGHT
C	=============================================
C	ADD *REVERSE* SELFWEIGHT TO INCREMENTAL NODAL JOINT LOAD
	FAC = -1.0D0            !REVERSE OF DEAD LAOD	
	FEM(1:NEF) = 0.0D0
	CALL SEFWSOD(IEG,IEL,IPRT,FEM,IAX)
	DO IEF = 1,NEF
	IEQ  = IF2(IEF)						!IF2(1:NEF) = ORIGINAL ELEMENT EQAUATION
	CALL RELFILL('$XLI',FAC*FEM(IEF),IEQ,1,2)   
	CALL RELFILL('#LDD',FAC*FEM(IEF),IEQ,1,2)  !REMOVE FROM DEAD LOAD   
	NUM = IEF+NEF+NEF+NEF
	AF6(NUM) = AF6(NUM)+FAC*FEM(IEF)        !ACCUMULATE FIXEND FORCES.
	NUM = IEF
	AF8(NUM) = AF8(NUM)+FAC*FEM(IEF)        !ACCUMULATE DEAD LOAD.
	ENDDO

C	---------------------------------------------------------	
	IF3(4) = IF3(4) - 1
	IF(IF3(4).GT.0) GOTO 3000  !IF ELEMENT STILL EXIST ..NO NEED TO UPDATE THE INITIAL DISPLACEMENT (TO BE MODIFIED TO PUT IN EACH PART)

C	NEXT IS FOR TOTALLY REMOVED ELEM.
	IF3(7) = 0                !CLEAR ELEMENT FIRST INSTALLATION DAY

C	=============================================
C     REMOVE ELEMENT
C	=============================================
	DO IEF = 1,NEF
	IEQ  = IF2(IEF)						!IF2(1:NEF) = ORIGINAL EQAUTION
	NUM  = IEF+NEF+NEF+NEF
	FRV  = -1.0D0*AF6(NUM)              !REVERSE FIXEND FORCE
	CALL RELFILL('$XLI',FRV,IEQ,1,2)    !REMOVE FROM INCREMENTAL LOAD 
	AF6(NUM) = 0.0D0                    !CLEAR FIXEND
	ENDDO

	DO IEF = 1,NEF
	IEQ  = IF2(IEF)						!IF2(1:NEF) = ORIGINAL EQAUATION
	NUM  = IEF+NEF*4
	FRV  = -1.0D0*AF8(NUM)              !REVERSE FIXEND CONSTRUCTION FORCE
	CALL RELFILL('#LCT',FRV,IEQ,1,2)    !REMOVE FROM INCREMENTAL CONSTRUCTION LOAD 
	AF8(NUM) = 0.0D0                    !CLEAR FIXEND
	ENDDO


C	ELEMENT INITIAL DISPLACEMENTS	
	AF6(1:NEF) = 0.0D0					!CLEAR ELEMENT ERECTED DISP.  AF6(1:NEF)

C	ACCUMULATE NODAL EXISTING FLAG
	DO INM = 1,NNM
	ISN = IF1(INM)
	CALL INTFILL('$NXF',-1,1,ISN,2)      
	ENDDO

C	=======================================
3000	CONTINUE


	NPM(1) = N6
	NPI(1) = N6
	CALL CALLREAL(AF6,AAX,NDX6,NPM,NPI,1,'WRIT') !BACK UP AF6 
C	-----------------------------------------
	NPM(1) = N8
	NPI(1) = N8
	CALL CALLREAL(AF8,AAX,NDX8,NPM,NPI,1,'WRIT') !BACKUP AF8 FOR FIXEND
C	-----------------------------------------
	NPM(1) = N3
	NPI(1) = N3
	CALL CALLINTG(IF3,IAX,NDX3,NPM,NPI,1,'WRIT') !UPDATE ELEMENT DATA
C	-----------------------------------------
	NPM(1:2) = [N4,MPRT]
	NPI(1:2) = [N4,IPRT]
	CALL CALLREAL(AF4,AAX,NDX4,NPM,NPI,2,'WRIT') !UPDATE PART DATA
C	------------------------------------
      WRITE(NFLI,REC=NELE+IEL) IF3(4) !WRITE EXISTING FLAG TO LAST RECORD OF ELEMENT INTEGER DATA (INCREASE THE SPEED PURPOSE)


C	==============================================
	CASE(1) !INSTALL
C	==============================================
	NPM(1) = N3
	NPI(1) = N3
	CALL CALLINTG(IF3,IAX,NDX3,NPM,NPI,1,'READ') !CALLING IF3
	IXIST = IF3(4)  !TOTAL EXISTING FLAG 
	NPRT  = IF3(6)  !NUMBER OF PART
C	-----------------------------------------

	IF(IPRT.LE.0.OR.IPRT.GT.NPRT) RETURN

	NPM(1) = N6
	NPI(1) = N6
	CALL CALLREAL(AF6,AAX,NDX6,NPM,NPI,1,'READ') !CALLING AF6 (FOR ERECTED DISP.)
C	-----------------------------------------
	NPM(1) = N8
	NPI(1) = N8
	CALL CALLREAL(AF8,AAX,NDX8,NPM,NPI,1,'READ') !CALLING AF8 FOR FIXEND
C	-----------------------------------------
	NPM(1:2) = [N4,MPRT]
	NPI(1:2) = [N4,IPRT]
	CALL CALLREAL(AF4,AAX,NDX4,NPM,NPI,2,'READ') !CALLING AF4
	IPIST = INT(AF4(1))

C	SET ELEMENT EXISTENCE FLAG IPIST
C		= 0 element has never existed & currently removed
C		= 1 currently installed
	IF(IPIST.GT.0) GOTO 2000

C	UPDATE PART INFORMATION	
	AF4(1) = FLOAT(1)              !EXISTING FLAG
      AF4(3) = DMIN1(CAST,TODAY)     !CASTING DATE
      AF4(4) = TODAY				   !INSTALLATION UPDATE

C	-----------------------------------------
	NPM(1) = N1
	NPI(1) = N1
	CALL CALLINTG(IF1,IAX,NDX1,NPM,NPI,1,'READ') !CALLING ELEMENT NODE NUMBER
C	-----------------------------------------	
	NPM(1) = N2
	NPI(1) = N2
	CALL CALLINTG(IF2,IAX,NDX2,NPM,NPI,1,'READ') !CALLING ELEMENT ORIGINAL EQUATION NUMBER

C	=============================================
C     ADD SELFWEIGHT
C	=============================================
C	ADD SELFWEIGHT TO INCREMENTAL NODAL JOINT LOAD	
	FAC = 1.0D0            !APPLY DEAD LAOD	
	FEM(1:NEF) = 0.0D0
	CALL SEFWSOD(IEG,IEL,IPRT,FEM,IAX)

C	-----------------------------------------
	DO IEF = 1,NEF
	IEQ  = IF2(IEF)						!IF2(1:NEF) = ORIGINAL EQAUATION
	CALL RELFILL('$XLI',FAC*FEM(IEF),IEQ,1,2)   
	CALL RELFILL('#LDD',FAC*FEM(IEF),IEQ,1,2)  !DEAD LOAD   
	NUM = IEF+NEF+NEF+NEF
	AF6(NUM) = AF6(NUM)+FAC*FEM(IEF)        !ACCUMULATE FIXEND FORCES.
	NUM = IEF
	AF8(NUM) = AF8(NUM)+FAC*FEM(IEF)        !ACCUMULATE DEAD LOAD.
	ENDDO

C	---------------------------------------------------------	
	IF(IXIST.GT.0) THEN
	IF3(4) = IF3(4) + 1                 !ACCUMULATE ELEMENt EXISTING FLAG
	GOTO 2000  !IF ELEMENT ALREADY EXIST ..NO NEED TO UPDATE THE INITIAL DISPLACEMENT (TO BE MODIFIED TO PUT IN EACH PART)
	ENDIF

C	NEXT IS FOR NEWLY INSTALLATION ELEM.
	IF3(4) = IF3(4) + 1                 !ACCUMULATE ELEMENT EXISTING FLAG
	IF3(7) = INT(TODAY)					!ELEMENT FIRST INSTALLATION DAY
C	------------------------------------

C	=============================================
C     INSTALL ELEMENT
C	=============================================	
C	ELEMENT INITIAL DISPLACEMENTS	
	IF(LUPT.EQ.1) THEN
	DO IEF = 1,NEF
	IEQ  = IF2(IEF)						!IF2(1:NEF) = ELEMENT ORIGINAL EQAUATION
	CALL RELFILL('$XDS',AF6(IEF),IEQ,1,0)    !TRANSFER ELEMENT ERECTED DISP. TO AF6(1:NEF)
	ENDDO
	ENDIF


C	ACCUMULATE NODAL EXISTING FLAG
	DO INM = 1,NNM
	ISN = IF1(INM)
	CALL INTFILL('$NXF',1,1,ISN,2)      
	ENDDO
 
C	------------------------------------
2000	CONTINUE

	NPM(1) = N6
	NPI(1) = N6
	CALL CALLREAL(AF6,AAX,NDX6,NPM,NPI,1,'WRIT') !BACK UP AF6 
C	-----------------------------------------
	NPM(1) = N8
	NPI(1) = N8
	CALL CALLREAL(AF8,AAX,NDX8,NPM,NPI,1,'WRIT') !BACKUP AF8 FOR FIXEND
C	-----------------------------------------
	NPM(1) = N3
	NPI(1) = N3
	CALL CALLINTG(IF3,IAX,NDX3,NPM,NPI,1,'WRIT') !UPDATE ELEMENT DATA
C	-----------------------------------------
	NPM(1:2) = [N4,MPRT]
	NPI(1:2) = [N4,IPRT]
	CALL CALLREAL(AF4,AAX,NDX4,NPM,NPI,2,'WRIT') !UPDATE PART DATA
C	------------------------------------
      WRITE(NFLI,REC=NELE+IEL) IF3(4) !WRITE EXISTING FLAG TO LAST RECORD OF ELEMENT INTEGER DATA (INCREASE THE SPEED PURPOSE)
C	==============================================

C	-------------------------------------------------
	ENDSELECT
C	-------------------------------------------------

8000	CONTINUE

      WRITE(NFLI,REC=IEL) IAX
      WRITE(NFLR,REC=IEL) AAX
      
	DEALLOCATE(IAX,AAX)

	DEALLOCATE(IF1,IF2,IF3,AF4,AF5,AF6,AF7)
	DEALLOCATE(AF8)
	DEALLOCATE(FEM)

	RETURN
	END	


C	=======================================================================
C	=== CONSTRUCTION ANALYSIS =============== SONGSAK NOV2007 =============
C	=======================================================================

      SUBROUTINE LNKBUL
	IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER*4 (I-N)
	DIMENSION  ND(2)
	ALLOCATABLE IE(:)
C     LINK OPERATION

C	LLINK LINK COMMAND
C		  = 0 REMOVE
C		  = 1 INSTALL UPDATE SHAPE
C		  = 2 INSTALL ORIGINAL SHAPE

	CALL RELFILL('%EAY',TODAY,1,2,0)   !CURRENT DAY

C	READ COMMAND
C	CALL FREBUF
C	CALL FREECH

      CALL FREINT('N',IEL,1)	 !LINK NUMBER

      IOP = 0
      CALL FREINT('O',IO ,1)   !OPERATION FLAG

	ND(1:2) = 0
      CALL FREINT('D',ND ,2)   !NODE TO INSTALL
	
	MAT = 0
      CALL FREINT('M',MAT,1)   !MATERIAL SET

	NNM  = 2
	CALL RELFILL('+LNK',FNNF,5,IEL,0)  !NNF
	CALL RELFILL('+LNK',FNEF,6,IEL,0)  !NEF
	CALL RELFILL('+LNK',FLNK,7,IEL,0)  !LINK
	NNF = INT(FNNF)
	NEF = INT(FNEF)
	LINK= INT(FLNK)		
	ALLOCATE(IE(NEF))
C	-------------------------------------------------
	SELECTCASE(IO)
C	-------------------------------------------------


	CASE(0)  !REMOVE
C	==============================================

	CALL RELFILL('+LNK',XIST,4,IEL,0)
	IXIST = INT(XIST)

C	SET ELEMENT EXISTENCE FLAG IPIST
C		= 0 element has never existed & currently removed
C		= 1 currently installed
	IF(IXIST.EQ. 0) GOTO 3000


C	UPDATE PART INFORMATION	
	ZERO = 0.0D0

	CALL RELFILL('+LNK',FI,1,IEL,0)
	CALL RELFILL('+LNK',FJ,2,IEL,0)
	ND(1) = INT(FI)
	ND(2) = INT(FJ)
	CALL RELFILL('+LNK',ZERO,1,IEL,1) !NOD1
	CALL RELFILL('+LNK',ZERO,2,IEL,1) !NOD2
	CALL RELFILL('+LNK',ZERO,3,IEL,1) !MAT SET
	CALL RELFILL('+LNK',ZERO,4,IEL,1) !EXISTING FLAG


	DO IWOK = 1,NEF+NEF+NEF+NEF+24+24
	NUM = 10+IWOK
	CALL RELFILL('+LNK',ZERO,NUM,IEL,1) !CLEAR ALL WORKING ARRAY
	ENDDO

C	ACCUMULATE NODAL EXISTING FLAG
	DO INM = 1,NNM
	ISN = ND(INM)
	CALL INTFILL('$NXF',-1,1,ISN,2)      
	ENDDO

C	------------------------------------
3000	CONTINUE

C	==============================================



	CASE(1,2) !INSTALL
C	==============================================


	CALL RELFILL('+LNK',XIST,4,IEL,0)
	IXIST = INT(XIST)

C	SET ELEMENT EXISTENCE FLAG IPIST
C		= 0 element has never existed & currently removed
C		= 1 currently installed
	IF(IXIST.GT. 1) GOTO 2000

C	UPDATE PART INFORMATION	
	XIST = FLOAT(1)
	CALL RELFILL('+LNK',XIST,4,IEL,1)

	FI = FLOAT(ND(1))
	CALL RELFILL('+LNK',FI,1,IEL,1)
	FJ = FLOAT(ND(2))
	CALL RELFILL('+LNK',FJ,2,IEL,1)
	FM = FLOAT(MAT)
	CALL RELFILL('+LNK',FM,3,IEL,1)


	CALL GETEQNR(LINK,NNM,NNF,ND,IE)
	DO II = 1,NEF
	NUM = 10 + II
	TN = FLOAT(IE(II))
	CALL RELFILL('+LNK',TN,NUM,IEL,1)
	ENDDO


C	ELEMENT INITIAL DISPLACEMENTS	
	
	DO IEF = 1,NEF
	IEQ  = IE(IEF)						  !ORIGINAL EQAUATION
	EDISO = 0.0D0
	IF(IO.EQ.1) CALL RELFILL('$XDS',EDISO,IEQ,1  ,0)  !ERECTED DISP.   FOR INSTALL TO UPDATE CONFIG
	NUM = 10+NEF+NEF+NEF+IEF
	CALL RELFILL('+LNK',EDISO,NUM,IEL,1)  !STORE ERECTEC DISP.
	ENDDO

C	ACCUMULATE NODAL EXISTING FLAG
	DO INM = 1,NNM
	ISN = ND(INM)
	CALL INTFILL('$NXF',1,1,ISN,2)      
	ENDDO
 
C	------------------------------------
2000	CONTINUE

C	==============================================



C	-------------------------------------------------
	ENDSELECT
C	-------------------------------------------------


	DEALLOCATE(IE)


	RETURN

	END



C	=======================================================================
C	=== CONSTRUCTION ANALYSIS =============== SONGSAK NOV2007 =============
C	=======================================================================
      SUBROUTINE TRVBUL
	IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER*4 (I-N)
	ALLOCATABLE IE(:),ND(:)
C     TRAVELER OPERATION

C	LTRVC TRAVELER COMMAND
C		  = 0 REMOVE
C		  = 1 MOVE
C		  = 2 ADDED LOAD
	DIMENSION ISNO(30)

	CALL RELFILL('%EAY',TODAY,1,2,0)   !CURRENT DAY

C	READ COMMAND
C	CALL FREBUF
C	CALL FREECH

      CALL FREINT('N',IEL,1)	 !TRAVELER NUMBER

      IO = 0
      CALL FREINT('O',IO ,1)   !OPERATION FLAG

	NNM = 0
      CALL FREINT('X',NNM,1)   !NUM NOD.
	ALLOCATE(ND(NNM))

	ND(1:NNM) = 0
      CALL FREINT('D',ND ,NNM) !NODE TO INSTALL
	
	MAT = 0
      CALL FREINT('M',MAT,1)   !MATERIAL SET


C	WRITE(*,*) 'M',MAT,' ND',ND(1:NNM)
C	PAUSE

	NNMW = NNM
	MATW = MAT


	CALL RELFILL('+TRV',FNNF,4,IEL,0)  !NNF
	CALL RELFILL('+TRV',FLNK,5,IEL,0)  !LINK
	NNF = INT(FNNF)
	LINK= INT(FLNK)	
	

			
C	-------------------------------------------------
	SELECTCASE(IO)
C	-------------------------------------------------


	CASE(0)  !REMOVE
C	==============================================

	CALL RELFILL('+TRV',XIST,3,IEL,0)
	IXIST = INT(XIST)

C	SET ELEMENT EXISTENCE FLAG IPIST
C		= 0 element has never existed & currently removed
C		= 1 currently installed
	IF(IXIST.EQ. 0) GOTO 3000


C	UPDATE PART INFORMATION	
	ZERO = 0.0D0

	CALL RELFILL('+TRV',FNM ,1,IEL,0)
	NNM = INT(FNM)
	NEF = NNF*NNM
	CALL RELFILL('+TRV',FMT ,2,IEL,0)
	MAT = INT(FMT)
	
	DO 90 IDR = 1,3
	CALL RELFILL('%GRV',GRAV,1 ,IDR,0)   !GRAVITY VALUE
	CALL RELFILL('+TRS',WEIG,8 ,MAT,0)   !TOTAL MASS

	DO INM = 1,NNM
	NUM = 10 + INM
	CALL RELFILL('+TRV',TN,NUM,IEL,0)    !NOD NUMBER
	ISN = INT(TN)
	WW = GRAV*WEIG/FNM*-1.0D0
	CALL RELFILL('$XLI',WW,IDR,ISN,2)  !REMOVE SELFWEIGHT LOAD 
	CALL RELFILL('#LTV',WW,IDR,ISN,2)  !REMOVE SELFWEIGHT FROM DEAD LOAD
	ENDDO
90	CONTINUE

	DO IWOK = 1,NNM+NEF+NEF+NEF+NEF+NEF
	NUM = 10+IWOK
	CALL RELFILL('+TRV',ZERO,NUM,IEL,1) !CLEAR ALL WORKING ARRAY
	ENDDO

C	ACCUMULATE NODAL EXISTING FLAG
	DO INM = 1,NNM
	NUM = 10 + INM
	CALL RELFILL('+TRV',TN,NUM,IEL,0)    !NOD NUMBER
	ISN = INT(TN)
	CALL INTFILL('$NXF',-1,1,ISN,2)     
	CALL RELFILL('+TRV',ZERO,NUM,IEL,1)  !CLEAR NOD NUMBER 
	ENDDO

	CALL RELFILL('+TRV',ZERO,1,IEL,1) !NOD NUM
	CALL RELFILL('+TRV',ZERO,2,IEL,1) !MAT SET
	CALL RELFILL('+TRV',ZERO,3,IEL,1) !EXISTING FLAG


C	------------------------------------
3000	CONTINUE

C	==============================================



	CASE(1) !MOVE
C	==============================================

	CALL RELFILL('+TRV',XIST,3,IEL,0)
	IXIST = INT(XIST)

C	SET ELEMENT EXISTENCE FLAG IPIST
C		= 0 element has never existed & currently removed
C		= 1 currently installed
	IF(IXIST.GT. 1) GOTO 2000

C	-------------------------------------
C	OPERATION FOR EXISTED TRAVELER
	CALL RELFILL('+TRV',FNM ,1,IEL,0)
	NNM = INT(FNM)
	NEF = NNF*NNM
	CALL RELFILL('+TRV',FMT ,2,IEL,0)
	MAT = INT(FMT)

	IF(NNM.NE.0) THEN
	DO 110 IDR = 1,3
	
	CALL RELFILL('%GRV',GRAV,1 ,IDR,0)  !GRAVITY VALUE
	CALL RELFILL('+TRS',WEIG,8 ,MAT,0)  !TOTAL MASS

	DO INM = 1,NNM
	NUM = 10 + INM
	CALL RELFILL('+TRV',TN,NUM,IEL,0)    !NOD NUMBER
	ISN = INT(TN)
	WW = WEIG*GRAV/FNM*-1.0D0
	CALL RELFILL('$XLI',WW,IDR,ISN,2)  !REMOVE SELFWEIGHT LOAD 
	CALL RELFILL('#LTV',WW,IDR,ISN,2)  !REMOVE SELFWEIGHT FROM DEAD LOAD
	ENDDO

110	CONTINUE

	DO IWOK = 1,NNM+NEF+NEF+NEF+NEF+NEF
	NUM = 10+IWOK
	CALL RELFILL('+TRV',ZERO,NUM,IEL,1) !CLEAR ALL WORKING ARRAY
	ENDDO

C	ACCUMULATE NODAL EXISTING FLAG
	NNMO = NNM
	DO INM = 1,NNM
	NUM = 10 + INM
	CALL RELFILL('+TRV',TN,NUM,IEL,0)    !NOD NUMBER
	ISN = INT(TN)
C	CALL INTFILL('$NXF',-1,1,ISN,2)    
	ISNO(INM) = ISN 
	CALL RELFILL('+TRV',ZERO,NUM,IEL,1)  !CLEAR NOD NUMBER 
	ENDDO


	ENDIF

C	-------------------------------------

C	UPDATE PART INFORMATION	
	XIST = FLOAT(1)
	CALL RELFILL('+TRV',XIST,3,IEL,1)

	FNM = FLOAT(NNMW)
	CALL RELFILL('+TRV',FNM,1,IEL,1)
	FMT = FLOAT(MATW)
	CALL RELFILL('+TRV',FMT,2,IEL,1)

	NNM = INT(FNM)
	NEF = NNF*NNM
	ALLOCATE(IE(NEF))


	DO II = 1,NNM
	NUM = 10 + II
	TN = FLOAT(ND(II))
	CALL RELFILL('+TRV',TN,NUM,IEL,1)  !NOD NUMBER
	ENDDO


C	UPDATE NADAL DISP
	CALL TRAVDIS(NNM,ND)


C	CALL RELFILL('$XDS',DKK,3,18,0) !UPDATE NODAL DISP
C	WRITE(*,*) DKK
C	PAUSE

C	!!!!!!!!!!!!!!
	DO INM = 1,NNMO
	ISN = ISNO(INM)
	CALL INTFILL('$NXF',-1,1,ISN,2)   !REMOVE NODAL EXISTING FLAG FROM OLD POSITION   
	ENDDO
C	!!!!!!!!!!!!!!

	DO 210 IDR = 1,3
	CALL RELFILL('%GRV',GRAV,1 ,IDR,0)   !GRAVITY VALUE
	CALL RELFILL('+TRS',WEIG,8 ,MATW,0)   !TOTAL MASS

	DO INM = 1,NNM
	NUM = 10 + INM
	CALL RELFILL('+TRV',TN,NUM,IEL,0)    !NOD NUMBER
	ISN = INT(TN)
	WW = GRAV*WEIG/FNM
	CALL RELFILL('$XLI',WW,IDR,ISN,2)  !ADD SELFWEIGHT LOAD 
	CALL RELFILL('#LTV',WW,IDR,ISN,2)  !ADD SELFWEIGHT TO TRAVELER LOAD
	ENDDO
210	CONTINUE

	CALL GETEQNR(LINK,NNM,NNF,ND,IE)
	DO II = 1,NEF
	NUM = 10 + NNM + II
	TN = FLOAT(IE(II))
	CALL RELFILL('+TRV',TN,NUM,IEL,1)  !ELEMENT ORIGINAL EQUA
	ENDDO


C	ELEMENT INITIAL DISPLACEMENTS	
	DO IEF = 1,NEF
	IEQ  = IE(IEF)						  !ORIGINAL EQAUATION
	CALL RELFILL('$XDS',EDISO,IEQ,1  ,0)  !ERECTED DISP. 
	NUM = 10+NNM+NEF+NEF+NEF+IEF
	CALL RELFILL('+TRV',EDISO,NUM,IEL,1)  !STORE ERECTED DISP.
	ENDDO

C	IF(IEL.EQ.1) THEN
C	DO IEF = 1,NEF/6
C	NUM = 10+NNM+NEF+NEF+NEF+(6*IEF-3)
C	CALL RELFILL('+TRV',EDISO,NUM,IEL,0)
C	WRITE(*,*) IEF,EDISO
C	ENDDO
C	ENDIF

C	ACCUMULATE NODAL EXISTING FLAG  !NO NEED HERE (ALREADY DONE IN TRAVDIS)
C	DO INM = 1,NNM
C	ISN = ND(INM)
C	CALL INTFILL('$NXF',1,1,ISN,2)      
C	ENDDO
	
	DEALLOCATE(IE)

C	------------------------------------
2000	CONTINUE

C	==============================================



C	-------------------------------------------------
	ENDSELECT
C	-------------------------------------------------


	DEALLOCATE(ND)


	RETURN

	END



C	=======================================================================
C	=== CONSTRUCTION ANALYSIS =============== SONGSAK NOV2007 =============
C	=======================================================================
