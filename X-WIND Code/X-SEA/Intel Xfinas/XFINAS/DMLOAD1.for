      SUBROUTINE DM2D (IDATM,AA,BB,CC)    
      IMPLICIT REAL*8(A-H,O-Z)
      IMPLICIT INTEGER*4 (I-N)
C	------------------------------------------------------------------------
C	MAIN PROGRAM FOR 2D DYNAMIC INTERACTION OF BRIDGE-TRAIN
C	------------------------------------------------------------------------
      CHARACTER*80 TITLE

      COMMON /IOUNIT/IN,IOUT,NSTIF
      COMMON /MAXDM/AMXTR(100,2),AMXST(100,2)
C	Next common blocks added 30Jul04 by NguyenDV
      COMMON /INOU/ ITI,ITO,ISO,NDATI,NPLOT,NKFAC,NELEM,
     1              IFPR(10),IFPL(10)

      COMMON /FLAG/ IFPRI,ISPRI,IFPLO,IFREF,IFEIG,ITASK,IFFLAG

      COMMON /EIGN/ NSEIG,NROOT,NC,NNC,NITEM,IFSS,SHIFT0,EPS,IEIG,NEIG,
     +              ISOLV,IVPRT
      COMMON /DMCO/ IDMA,IANA,IDSO,NNBR,NNRA,NT,NEBEBR,NPBEBR,NLRB,
     +			  NEWKTK,NPWKTK,NEBERA,NPBERA,NDOF,NNBE,NNWK

C	COMMON /DMAS/ IT1,IT2,IT3,IPATH,ALPHA,BITA,DELT,VEL,EXTDIS,NMAX,
C     +			  TOLER,SCALE,NPRTTR,NPRTST
C	Changed to DMSO,DITR,DIAX 9Sep04 by NguyenDV
	COMMON /DMSOI/ IPATH,NMAX,NPRTTR,NPRTST,NPRWH,KPRTR
	COMMON /DMSOR/ ALPHA,BITA,DELT,VEL,EXTDIS,TOLER,SCALE,TLENGTH,BIDIS

C	COMMON /DITR/ IT1,IT2,IT3
C	Previous changed to the next 20Oct05
	COMMON /IWTR/ IT1,IT2,IT3,I_ITRAIN,I_NCHTR,I_NDTR,I_PRTR,I_PTWH
	COMMON /NIAX/ NWHEEL,NLDIR	!add NLDIR 1-11-2005
	COMMON /LODW/ I_MPWK,I_LNWK,I_PRWK,I_MPBEBR,I_LNBEBR,I_PRBEBR
C	Next commnon block added 12Jan05
	COMMON /MEMW/ W(5000000),IW(4000000)
C	------------------------------------------------------------------------
      DIMENSION AR(9000000),IA(50000)
      I_RTOT=9000000
      I_ITOT=50000

C	 2D TRAIN-BRIDGE DYNAMIC INTERACTION ANALYSIS
C	INPUT DATA IDENTIFIER: added 28Oct04 by NguyenDV
  200 CALL OPENS	
c	------------------------------------------------
C	............................................................
C	ASSEMBLE STIFFNESS, DAMPING AND MASS MATRICES OF STRUCTURE
C	............................................................
C	NTD              : NODE TOTAL DEGREES OF FREEDOM
      NTD=NT*NDOF

C	NRL(NDOF,NT)     : RESTRAINT OF NODE(EQ.0:FREE,NE.1:FIX)
C	COOD(NT)         : ONE DIMENSIONAL COORDINATE OF NODE
      I_NRL=1
      I_INTE=I_NRL+NDOF*NT
      
      I_COOD=1
      I_REAL=I_COOD+NT
CN      CALL RENODAL(AR(I_COOD),IA(I_NRL),NT,NDOF)
	CALL XCOORB1 (AR(I_COOD),IA(I_NRL))

C	CALCULATE NUMBER OF EQUATIONS(NEQ)
C	NEQ              : NUMBER OF EQUATIONS OF TOTAL SYSTEM
C	NEQBR            : NUMBER OF EQUATIONS OF BRIDGE
      CALL MAKENEQ(IA(I_NRL),NNBR,NT,NDOF,NEQ,NEQBR)
C	----------------------------------------------------------------------------------
C	INPUT MATERIAL PROPERTY AND ELEMENT CONNECTIVITY OF BEAM ELEMENT MODELLING BRIDGE:
C	----------------------------------------------------------------------------------
C	MPBEBR(NEBEBR)     = MATERIAL PROPERTY CARD NUMBER OF BEAM ELEMENT MODELLING BRIDGE
C	LNBEBR(NEBEBR,NNBE)= ELEMENT CONNECTIVITY OF BEAM ELEMENT MODELLING BRIDGE
C	I_NBC(NLRB)        = NODE NUMBERS WITH LRB
C	I_BCLRB(NLRB,2)    = STIFFNESS & DAMPING OF LRB
C	PRBEBR(NPBEBR,9)   = MATERIAL PROPERTY CARDS OF BEAM ELEMENT MODELLING BRIDGE
C
      I_MPBEBR=I_INTE
      I_LNBEBR=I_MPBEBR+NEBEBR
CMKIM 2001. 7. 14.
      I_NBC=I_LNBEBR+NEBEBR*NNBE 
      I_INTE=I_NBC+NLRB
CMKIM I_INTE=I_LNBEBR+NEBEBR*NNBE
      
      I_PRBEBR=I_REAL
CMKIM 2001. 7. 14.
C	Next IF added 6Nov by NguyenDV to store total material set (Bridge & Rail)
	IF (IDATM.EQ.0) THEN
		I_BCLRB=I_PRBEBR+NPBEBR*9
	ELSEIF (IDATM.EQ.1) THEN
		I_BCLRB=I_PRBEBR+(NPBEBR+NPBERA)*9
	ENDIF

      I_REAL=I_BCLRB+NLRB*2
CMKIM I_REAL=I_PRBEBR+NPBEBR*9

C	COMPUTE ND(VECTOR CONTAINING DIAGONAL ADDRESS)
C	NC(NEQ)    = COLUMN HEIGHT OF STIFFNESS MATRIX
C	ND(NEQ+1)  = VECTOR CONTAINING ADDRESS OF DIAGONAL ELEMENTS OF STIFFNESS MATRIX
C                    BATHE(ADINA) FORM
C	NDR(NEQ+1) = VECTOR CONTAINING ADDRESS OF DIAGONAL ELEMENTS OF STIFFNESS MATRIX
C                    (AFTER REARANGEMENT)
      I_NC=I_INTE
      I_ND=I_NC+NEQ
C	Next lines added 19 Nov04 by NguyenDV: I_NDR=pointer to store 
	I_NDR=I_ND+(NEQ+1)
C      I_INTE=I_ND+(NEQ+1)
C	Previous line changed to the next
      I_INTE=I_NDR+(NEQ+1)
      
      IF(NEBEBR.GT.0) THEN
CN        WRITE(IOUT,1550)
	WRITE(ISO,105)
  105	FORMAT (//1H#,25X,32(1H*)/1H#,25X,1H*,30X,1H*/
     +       1H#,25X,1H*,1X,28H BRIDGE MODELLING INPUT DATA,1X,1H*
     +	   /1H#,25X,1H*,30X,1H*/1H#,25X,32(1H*))

	  WRITE(ITO,1550)
C	Next IF added 6Nov by NguyenDV
	  IF(IDATM.EQ.0) THEN
        CALL REBEAM(IA(I_MPBEBR),AR(I_PRBEBR),IA(I_LNBEBR),NEBEBR,
     &    NPBEBR,NNBE)
C	To read total material set (Bridge & Rail) for GiD input
	  ELSEIF (IDATM.EQ.1) THEN
		NTPBE = NPBEBR + NPBERA
		CALL REBPROP(AR(I_PRBEBR),NTPBE)
		CALL REBCON(IA(I_MPBEBR),IA(I_LNBEBR),NEBEBR,NNBE)
	  ENDIF

C	Next line added 15Nov by NguyenDV to change the Equation Number Array of Bridge
CN	CALL EQNUMC(IA(I_NRL),IA(I_LNBEBR),NDOF,NEBEBR,NNBE,NT,1)

CMKIM 2001. 7. 14
        IF(NLRB.GT.0) THEN
          CALL REBC(IA(I_NBC),AR(I_BCLRB),NLRB)
        ENDIF

        CALL MAKENC(IA(I_NRL),IA(I_LNBEBR),IA(I_NC),NEBEBR,NNBE,NDOF,
     &    NEQ)
        CALL MAKEND(IA(I_NC),IA(I_ND),NEQBR,NWKBR)
        NWMBR=NWKBR
        NEQBRM=NEQBR+1
      ENDIF

 1550 FORMAT(/,1X,'BRIDGE INPUT DATA')

C	Next block added 12Jan05 by NguyenDV to move values stored in AR/IA to W/IW arrays
	DO 10 I=1,NEBEBR
		IW(I_MPBEBR+I-1) = IA(I_MPBEBR+I-1)
   10	CONTINUE  

   	DO 20 I=1,NEBEBR*NNBE
		IW(I_LNBEBR+I-1) = IA(I_LNBEBR+I-1)
   20	CONTINUE 

	IF(IDATM.EQ.0) THEN
		NPBES = NPBEBR*9
	ELSEIF (IDATM.EQ.1) THEN
		NPBES = (NPBEBR+NPBERA)*9
	ENDIF

   	DO 30 I=1,NPBES
		W(I_PRBEBR+I-1) = AR(I_PRBEBR+I-1)
   30	CONTINUE
C	<<--- End added 12Jan05
C	----------------------------------------------------------------------
C	INPUT BEAM ELEMENT PROPERTIES AND ELEMENT CONNECTIVITY MODELLING RAIL:
C	Moved up (before Winkler) by NguyenDV 26Oct04
C	----------------------------------------------------------------------
C	NEBERA           = NUMBER OF BEAM ELEMENTS MODELING RAIL
C	NPBERA           = NUMBER OF PROPERTY CARDS OF BEAM ELEMENT MODELLING RAIL
CN     READ(IN,1000) NEBERA,NPBERA
CN     WRITE(IOUT,1350) NEBERA,NPBERA

C	INPUT MATERIAL PROPERTY AND ELEMENT CONNECTIVITY OF BEAM ELEMENT OF RAIL
C	MPBERA(NEBERA)     = MATERIAL PROPERTY CARD NUMBER OF BEAM ELEMENT OF RAIL
C	LNBERA(NEBERA,NNBE)= ELEMENT CONNECTIVITY OF BEAM ELEMENT MODELLING RAIL
C	PRBERA(NPBERA,9)   = MATERIAL PROPERTY CARDS OF BEAM ELEMENT MODELLING RAIL
      I_MPBERA=I_INTE
      I_LNBERA=I_MPBERA+NEBERA
      I_INTE=I_LNBERA+NEBERA*NNBE

C	Next IF added 6Nov by NguyenDV (Only read Rail Prop for Original Text Format input)
	IF(IDATM.EQ.0) THEN      
	I_PRBERA=I_REAL
      I_REAL=I_PRBERA+NPBERA*9
	ENDIF

      IF(I_REAL.GT.I_RTOT.OR.I_INTE.GT.I_ITOT) THEN
        WRITE(*,9000) I_REAL,I_INTE
        STOP
      ENDIF
      
      IF(NEBERA.GT.0) THEN
	  WRITE(ISO,125)
        WRITE(ITO,1570)
	  IF(IDATM.EQ.0) THEN 
        CALL REBEAM(IA(I_MPBERA),AR(I_PRBERA),IA(I_LNBERA),NEBERA,
     &    NPBERA,NNBE)
CNOCT        CALL MAKENC(IA(I_NRL),IA(I_LNBERA),IA(I_NC),NEBERA,NNBE,NDOF,
CNOCT     &    NEQ)
	  ELSEIF (IDATM.EQ.1) THEN 
C		Read only Rail beam prop for GiD input data
	  CALL REBCON(IA(I_MPBERA),IA(I_LNBERA),NEBERA,NNBE)
	  ENDIF

      ENDIF

CNOCT      CALL MAKEND(IA(I_NC),IA(I_ND),NEQ,NWK) 
 1570 FORMAT(/,1X,'RAIL INPUT DATA')
  125	FORMAT (//1H#,22X,30(1H*)/1H#,22X,1H*,28X,1H*/
     +    1H#,22X,1H*,1X,26H RAIL MODELLING INPUT DATA,1X,1H*
     +	 /1H#,22X,1H*,28X,1H*/1H#,22X,30(1H*))
C	     
C	--------------------------------------------------------------------------
C	INPUT WINKLER ELEMENT PROPERTIES AND ELEMENT CONNECTIVITY MODELLING TRACK:
C	--------------------------------------------------------------------------
C	NEWKTK             = NUMBER OF WINKLER ELEMENTS MODELLING TRACK
C	NPWKTK             = NUMBER OF PROPERTY CARDS OF WINKLER ELEMENT MODELLING TRACK
CN      READ(IN,1000) NEWKTK,NPWKTK
CN     WRITE(IOUT,1250) NEWKTK,NPWKTK

C	INPUT MATERIAL PROPERTY AND ELEMENT CONNECTIVITY OF WINKLER ELEMENT MODELLING TRACK
C	MPWKTK(NEWKTK)     = MATERIAL PROPERTY CARD NUMBER OF WINKLER ELEMENT MODELLING TRACK
C	LNWKTK(NEWKTK,NNWK)= ELEMENT CONNECTIVITY OF WINKLER ELEMENT MODELLING TRACK
C	PRWKTK(NPWKTK,2)   = MATERIAL PROPERTY CARDS OF WINKLER ELEMENT MODELLING TRACK
      I_MPWKTK=I_INTE
      I_LNWKTK=I_MPWKTK+NEWKTK
      I_INTE=I_LNWKTK+NEWKTK*NNWK
      
      I_PRWKTK=I_REAL
      I_REAL=I_PRWKTK+NPWKTK*2
      IF(NEWKTK.GT.0) THEN
	  WRITE(ISO,115)
        WRITE(ITO,1560)

C		Next IF-block added 28Oct04 by NguyenDV
		IF(IDATM.EQ.0) THEN
		CALL REWINKLER(IA(I_MPWKTK),AR(I_PRWKTK),IA(I_LNWKTK),NEWKTK,
     &				NPWKTK,NNWK)
	    ELSE IF (IDATM.EQ.1) THEN
c		Next line added 28Oct04 by NguyenDV to automatically form Winkler element
		CALL AWINKLE (IA(I_LNBEBR),IA(I_LNBERA),IA(I_MPWKTK),
     +				 AR(I_PRWKTK),IA(I_LNWKTK))
		END IF

        CALL MAKENC(IA(I_NRL),IA(I_LNWKTK),IA(I_NC),NEWKTK,NNWK,NDOF,
     &    NEQ)

      ENDIF
 1560 FORMAT(/,1X,'TRACK INPUT DATA')
  115	FORMAT (//1H#,18X,41(1H*)/1H#,18X,1H*,39X,1H*/
     +    1H#,18X,1H*,1X,37H TRACK (SLEEPERS & BALAST) INPUT DATA,1X,1H*
     +	 /1H#,18X,1H*,39X,1H*/1H#,18X,41(1H*))
C	----------------------------------------------------------------------
C	Form Column Height of Stiffness Matrix after Winkler Input
C	Added 26Oct04 by NguyenDV
      IF(NEBERA.GT.0) THEN
        CALL MAKENC(IA(I_NRL),IA(I_LNBERA),IA(I_NC),NEBERA,NNBE,NDOF,
     &    NEQ)
	ENDIF

	CALL MAKEND(IA(I_NC),IA(I_ND),NEQ,NWK)
C
C	----------------------------------------------------------------------
CN      IF(NEBEBR.GT.0) READ(IN,2000) NROOT,NITEM,RTOL
      IF(NROOT.EQ.0) NROOT=2
      IF(NITEM.EQ.0) NITEM=100
	RTOL = EPS
      IF(RTOL.EQ.0.D0) RTOL=1.0D-12
CN      IF(NEBEBR.GT.0) WRITE(IOUT,2100) NROOT,NITEM,RTOL

      NCROOT=MIN(2*NROOT,NROOT+8)
      NNCROOT=NCROOT*(NCROOT+1)/2
      IFSS=1
      IFPR=0
C	Next lines added 17 & 21 Nov04 by NguyenDV
	NWKBF = NEQBR*(NEQBR+1)/2 
	NWMBF = NWMBF 
	NWKF  = NEQ*(NEQ+1)/2
	NWMF  = NWKF

C	NWKBF	= Number of elements in upper tria. full stiffness matrix of bridge
C	NWMBF	= Number of elements in upper tria. full mass matrix of bridge
C	NWKF	= Number of elements in upper tria. full stiffness matrix of whole system
C	NWMF	= Number of elements in upper tria. full mass matrix of whole system
C	AKBRT	= upper tria. full stiffness matrix of bridge after rearrangement
C	AMBRT	= upper tria. full mass matrix of bridge after rearrangement
C	-----------------------------------------------------------------------
C	AKBR(NWKBR)      = STIFFNESS MATRIX OF BRIDGE
C	AK(NWK)          = STIFFNESS MATRIX OF SYSTEM
C	AC(NWK)          = DAMPING MATRIX OF SYSTEM
C	AM(NWK)          = MASS MATRIX OF SYSTEM
C	AMO(NWK)         = ORIGINAL MASS MATRIX OF SYSTEM
C	AKO(NWK)         = ORIGINAL STIFFNESS MATRIX OF SYSTEM
C	R(NEQBR,NCROOT)  = EIGENVECTORS ON SOLUTION EXIT
C	EIGV(NCROOT)     = EIGENVALUES ON SOLUTION EXIT
C	TT(NEQBR)        = WORKING VECTOR
C	W(NEQBR)         = WORKING VECTOR
C	AR(NNCROOT)      = WORKING MATRIX STORING PROJECTION OF K OF BRIDGE
C	BR(NNCROOT)      = WORKING MATRIX STORING PROJECTION OF M OF BRIDGE
C	VEC(NCROOT,NCROOT)= WORKING MSTRIX
C	D(NCROOT)        = WORKING VECTOR
C	RTOLV(NCROOT)    = WORKING VECTOR
C	BUP(NCROOT)      = WORKING VECTOR
C	BLO(NCROOT)      = WORKING VECTOR
C	BUPC(NCROOT)     = WORKING VECTOR
C	NEQBR            = ORDER OF STIFFNESS AND MASS MATRICES OF BRIDGE
C	NEQBRM           = NEQBR+1
C	NWKBR            = NUMBER OF ELEMENTS BELOW SKYLINE OF STIFFNESS MATRIX
C	NWMBR            = NUMBER OF ELEMENTS BELOW SKYLINE OF MASS MATRIX
C                        I.E. NWMBR=NWKBR FOR CONSISTENT MASS MATRIX
C                         NWMBR=NEQBR FOR LUMPED MASS MATRIX
C	NROOT            = NUMBER OF REQUIRED EIGENVALUES AND EIGENVECTORS
C	RTOL             = CONVERGENCE TOLERANCE ON EIGENVALUES ( 1.D-6 OR SMALLER)
C	NCROOT           = NUMBER OF ITERATION VECTORS USED
C                    (USUALLY SET TO MIN(2*NROOT,NROOT+8) BUT CAN NOT BE LARGER THAN THE 
C                    NUMBER OF MASS DEGREES OF FREDOM)
C	NNCROOT          = NC*(NC+1)/2 DIMENSION OF STORAGE VECTOR AR, BR
C	NITEM            = MAXIMUM NUMBER OF SUBSPACE ITERATION 
C                    PERMITTED (USALLY SET TO 16)
CMKIM 2001. 7. 19.
C                    IF NITEM.EQ.-1, TWO EIGENVALUES SHOULD BE INPUTTED
C	IFSS             = FLAG FOR STURM SEQUENCE CHECK EQ.0 NO CHECK, EQ.1 CHECK
C	IFPR             = FLAG FOR PRINTING DURING ITERATION EQ.0 NO PRINTING, EQ.1 PRINTING
C	NSTIF            = SCRATCP FILE TO STORE STIFFNESS MATRIX
C	IOUT             = OUTPUT PRINTING FILE
C	-------------------------------------------------------------------------
      I_AKBR=I_REAL
C	Next lines addd 17 Nov04 by NguyenDV
	I_AKBRT = I_AKBR + NWKBR
	I_AMBRT = I_AKBRT + NWKBF
C     I_AK=I_AKBR+NWKBR
C	Previous line changed to the next
	I_AK=I_AMBRT+NWKBF
C
      I_AC=I_AK+NWK
      I_AM=I_AC+NWK
CMKIM 2001. 7. 13.
      I_AMO=I_AM+NWK
      I_AKO=I_AMO+NWK
CMKIM I_AKO=I_AM+NWK

CMKIM 2001. 7. 19.
      I_EIGV=I_AKO+NWK
      I_R=I_EIGV+NCROOT
      IF(NITEM.EQ.-1) THEN
        I_REAL=I_R
        GOTO 0719
      ENDIF
      I_TT=I_R+NEQBR*NCROOT
CMKIM I_R=I_AKO+NWK
CMKIM I_EIGV=I_R+NEQBR*NCROOT
CMKIM I_TT=I_EIGV+NCROOT
      I_W=I_TT+NEQBR
      I_AR=I_W+NEQBR
      I_BR=I_AR+NNCROOT
      I_VEC=I_BR+NNCROOT
      I_D=I_VEC+NCROOT*NCROOT
      I_RTOLV=I_D+NCROOT
      I_BUP=I_RTOLV+NCROOT
      I_BLO=I_BUP+NCROOT
      I_BUPC=I_BLO+NCROOT
      I_REAL=I_BUPC+NCROOT

CMKIM 2001. 7. 19.
 0719 CONTINUE

      IF(I_REAL.GT.I_RTOT.OR.I_INTE.GT.I_ITOT) THEN
        WRITE(*,9000) I_REAL,I_INTE
        STOP
      ENDIF

      IF(NEBEBR.GT.0) THEN
C	-------------------------------------------------
C	+ ASSEMBLE STIFFNESS AND MASS MATRICES OF BRIDGE:
C	-------------------------------------------------
CMKIM 2001. 7. 14.
        CALL SYSBR(AR(I_AKBR),AR(I_AK),AR(I_AM),AR(I_COOD),IA(I_NRL),
     &    IA(I_LNBEBR),IA(I_MPBEBR),AR(I_PRBEBR),IA(I_ND),IA(I_NBC),
     &    AR(I_BCLRB),NDOF,NEBEBR,
     &    NPBEBR,NNBE,NWKBR,NLRB,NT,NEQ,NWK)
CMKIM   CALL SYSBR(AR(I_AKBR),AR(I_AK),AR(I_AM),AR(I_COOD),IA(I_NRL),
CMKIM&    IA(I_LNBEBR),IA(I_MPBEBR),AR(I_PRBEBR),IA(I_ND),NDOF,NEBEBR,
CMKIM&    NPBEBR,NNBE,NWKBR)

C	Next lines added 15 Nov04 by NguyenDV
	IF (IDATM.EQ.1.AND.IMESH.EQ.1) THEN
CN	CALL REAMAT(AR(I_AKBR),AR(I_AKBR),IA(I_ND),IA(I_NC),NWKBR,NEQ)
CN	CALL MATFUL(AR(I_AKBR),IA(I_ND),IA(I_NC),NWKBR,NEQ,NWKF)
		CALL BRMATF(AR(I_AKBRT),AR(I_AMBRT),AR(I_COOD),IA(I_NRL),
     +			IA(I_LNBEBR),IA(I_MPBEBR),AR(I_PRBEBR),IA(I_NBC),
     +			AR(I_BCLRB),NDOF,NEBEBR,NPBEBR,NNBE,NLRB,NT,NEQ,NEQBR,
     +			NWKF,NWKBF,NWKBO)

		NWMBO = NWKBO

		I_NDO=I_INTE
		I_INTE=I_NDO +(NEQBR+1)

		I_AKBO = I_REAL
		I_AMBO = I_AKBO + NWKBO
C	I_REAL  = I_AMBO + NWMBF

		I_REAL  = I_AMBO + NWMBO

		CALL MATOPT(AR(I_AKBRT),AR(I_AMBRT),NWKBF,NEQBR,NWKBO,
     +				AR(I_AKBO),AR(I_AMBO),IA(I_NDO))

	ENDIF
C	----------------------------------
C	+ CALCULATE EIGENVALUES OF BRIDGE: 
C	----------------------------------   
CMKIM 2001. 7. 19.
        IF(NITEM.GT.0) THEN

		WRITE(ITO,*)'SOLVE FOR THE SMALLEST EIGENVALUES BY SUBSPACE'
		WRITE(ISO,135)
CN          CALL SSPACE1(AR(I_AKBR),AR(I_AM),IA(I_ND),AR(I_R),AR(I_EIGV),
CN     &      AR(I_TT),AR(I_W),AR(I_AR),AR(I_BR),AR(I_VEC),AR(I_D),
CN     &      AR(I_RTOLV),AR(I_BUP),AR(I_BLO),AR(I_BUPC),NEQBR,NEQBRM,
CN     &      NWKBR,NWMBR,NROOT,RTOL,NCROOT,NNCROOT,NITEM,IFSS,IFPR,NSTIF,
CN     &      IOUT)
	   IF (IMESH.EQ.0) THEN
          CALL SSPACE1(AR(I_AKBR),AR(I_AM),IA(I_ND),AR(I_R),AR(I_EIGV),
     &      AR(I_TT),AR(I_W),AR(I_AR),AR(I_BR),AR(I_VEC),AR(I_D),
     &      AR(I_RTOLV),AR(I_BUP),AR(I_BLO),AR(I_BUPC),NEQBR,NEQBRM,
     &      NWKBR,NWMBR,NROOT,RTOL,NCROOT,NNCROOT,NITEM,IFSS,IFPR,NSTIF,
     &      ITO,ISO)
	   ELSEIF (IMESH.EQ.1) THEN 
C	Next IF added by NguyenDV for data of GiD format (must be re-arranged)
C
CN        CALL SSPACE1(AR(I_AKBO),AR(I_AMBO),IA(I_NDO),AR(I_R),AR(I_EIGV),
C     &      AR(I_TT),AR(I_W),AR(I_AR),AR(I_BR),AR(I_VEC),AR(I_D),
C    &      AR(I_RTOLV),AR(I_BUP),AR(I_BLO),AR(I_BUPC),NEQBR,NEQBRM,
C     &      NWKBO,NWMBF,NROOT,RTOL,NCROOT,NNCROOT,NITEM,IFSS,IFPR,NSTIF,
C     &      ITO,ISO)

	  CALL SSPACE1(AR(I_AKBO),AR(I_AMBO),IA(I_NDO),AR(I_R),AR(I_EIGV),
     &      AR(I_TT),AR(I_W),AR(I_AR),AR(I_BR),AR(I_VEC),AR(I_D),
     &      AR(I_RTOLV),AR(I_BUP),AR(I_BLO),AR(I_BUPC),NEQBR,NEQBRM,
     &      NWKBO,NWMBO,NROOT,RTOL,NCROOT,NNCROOT,NITEM,IFSS,IFPR,NSTIF,
     &      ITO,ISO)
	  ENDIF

        ENDIF  !of NITEM

  135	FORMAT (//1H#,18X,49(1H*)/1H#,18X,1H*,47X,1H*/
     +1H#,18X,1H*,1X,45H SOLVE THE EIGENVALUES OF BRIDGE BY SUSBSPACE,
     +1X,1H*/1H#,18X,1H*,47X,1H*/1H#,18X,49(1H*))
C	------------------------------------
C	+ ASSEMBLE DAMPING MATRIX OF BRIDGE:
C	------------------------------------
CMKIM 2001. 7. 19
        CALL DAMPBE(AR(I_AM),AR(I_AC),AR(I_AK),AR(I_EIGV),NWKBR,NROOT,
     &    NITEM)
CMKIM   CALL DAMPBE(AR(I_AM),AR(I_AC),AR(I_AK),AR(I_EIGV),NWKBR,NROOT)

CMKIM 2001. 7. 14.
        IF(NLRB.GT.0) THEN
          CALL DAMPEBC(AR(I_AC),IA(I_NRL),IA(I_ND),IA(I_NBC),
     &      AR(I_BCLRB),NDOF,NLRB)
        ENDIF
      ENDIF

CMKIM 2001. 7. 16.
C	INPUT ECCENTRICITY:
C	-------------------
CN      READ(IN,1070) DL0,PI0
	READ(ITI,*) 
	READ(ITI,1070) DL0,PI0
 1070 FORMAT(2F10.0)
CN      WRITE(IOUT,1071) DL0,PI0
	WRITE(ISO,1071) DL0,PI0
CN 1071 FORMAT(//,
CN     &1X,'ECCENTRICITY',/
CN     &1X,'  LENGTH(DL0)                           = ',F10.4/
CN     &1X,'  ANGLE(RAD)                            = ',F10.4)

 1071 FORMAT(//,
     +	21X,'ECCENTRICITY OF LANE FROM CENTER',/
     +	(1H#,19X,34(1H-))/
     +1X,'LENGTH(DL0,m):DISTANCE FROM NEUTRAL AXIS OF BRIDGE TO TRAIN
     + WHEEL     = ',F10.4/
     +1X,'ANGLE(Rad):ANGLE FROM NEUTRAL AXIS OF BRIDGE TO TRAIN WHEEL
     +           = ',F10.4)
C
      IF(NEWKTK.GT.0) THEN

C		FORM GLOBAL MATRIX (ADD WINKLER ELEMENT MODELED OF TRACK & TRANSFORM):
C		----------------------------------------------------------------------
        CALL SYSWK(AR(I_AK),AR(I_AC),AR(I_COOD),IA(I_NRL),IA(I_LNWKTK),
     &    IA(I_MPWKTK),AR(I_PRWKTK),IA(I_ND),NDOF,NEWKTK,NPWKTK,NNWK,
     &    DL0,PI0)
      ENDIF

      IF(NEBERA.GT.0) THEN

C		FORM GLOBAL MATRIX (ADD RAIL MODELLING ELEMENT):
C		------------------------------------------------
C		Next IF block add 6 Nov04 by NguyenDV
	  IF (IDATM.EQ.0) THEN
        CALL SYSRA(AR(I_AK),AR(I_AM),AR(I_COOD),IA(I_NRL),IA(I_LNBERA),
     &    IA(I_MPBERA),AR(I_PRBERA),IA(I_ND),NDOF,NEBERA,NPBERA,NNBE)
	  ELSEIF (IDATM.EQ.1) THEN
C	   For GiD input, Rail materials are stored in AR(I_PRBEBR) with Bridge materials
        CALL SYSRA(AR(I_AK),AR(I_AM),AR(I_COOD),IA(I_NRL),IA(I_LNBERA),
     &    IA(I_MPBERA),AR(I_PRBEBR),IA(I_ND),NDOF,NEBERA,NTPBE,NNBE) 
	  ENDIF

      ENDIF

C ======================================================================
C	MOVING MASS MODELING START (Moving Mass/Force for Inputed Train)
C ======================================================================

      IF(IANA.GE.1.AND.IANA.LE.3) THEN
C	
C	READ CONTROL VARIABLES FOR MOVING MASS MODELLING ANALYSIS:
C	----------------------------------------------------------
	CALL REMOVM
   
C	ASSEMBLE STIFFNESS, DAMPING AND MASS MATRICES OF TRAIN

C	READ NUMBER OF FRONT, INTERMEDIATE AND PASSENGER, AND REAR CAR BODIES
C	IT1=ITRAIN(1) : NUMBER OF FRONT CAR BODIES
C	IT2=ITRAIN(2) : NUMBER OF INTERMEDIATE AND PASSENGER CAR BODIES(GE.3)
C	IT3=ITRAIN(3) : NUMBER OF REAR CAR BODIES
CN        READ(IN,1000) IT1,IT2,IT3
CN        WRITE(IOUT,1450) IT1,IT2,IT3
CN        IF(IT2.GT.0.AND.IT2.LT.3) THEN
CN        WRITE(*,8000) IT2
CN        STOP
CN        ENDIF

C	ITRAIN(3) : TRAIN COMPOSITION
C	ITRAIN(1) : NUMBER OF FRONT POWER CARS
C	ITRAIN(2) : NUMBER OF INTERMEDIATE & PASSENGER CARS
C	ITRAIN(3) : NUMBER OF REAR POWER CARS
C	NDTR(NEQTR+1) : VECTOR CONTAINING ADDRESS OF DIAGONAL ELEMENTS
cmkim 2001. 7. 20.
c	propc(ncarb,4) : properties of car body(mass, inertia, alci, ahci)
c                  ahci is a length from front to mass center
cmkim PROPC(NCARB,3) : PROPERTIES OF CAR BODY[MASS, INERTIA, ALCI]
C	PROPS(NBOGIE,2) : PROPERTIES OF SECONDARY SUSPENSION[AKPI, ACPI]
C	PROPB(NBOGIE,3) : PROPERTIES OF BOGIE[MASS, INERTIA, ALBI]
C	PROPP(NWHEEL,2) : PROPERTIES OF PRIMARY SUSPENSION[AKSI, ACSI]
C	PROPU(NWHEEL) : PROPERTIES OF WHEEL[MASS]
C	PROPH(NWHEEL,2) : PROPERTIES OF HERTZIAN[AKHI, ACHI]
C	WHPOS(NWHEEL) : WHEEL POSITION
C	AKTR(NWKTR) : STIFFNESS MATRIX OF TRAIN
C	ACTR(NWKTR) : DAMPING MATRIX OF TRAIN
C	AMTR(NWKTR) : MASS MATRIX OF TRAIN
C	AMOTR(NWKTR) : ORIGINAL MASS MATRIX OF TRAIN
C	AKOTR(NWKTR) : ORIGINAL STIFFNESS MATRIX OF TRAIN
C	NCARB : NUMBER OF CAR BODIES(=ITRAIN(1)+ITRAIN(2)+ITRAIN(3))
C	NBOGIE : NUMBER OF BOGIES(=ITRAIN(1)*2+(ITRAIN(2)+1)+ITRAIN(3)*2)
C	NWHEEL : NUMBER OF WHEELS(=NBOGIE*2)
C	NEQTR : NUMBER OF EQUATIONS OF STIFFNESS MATRIX(=NBOGIE*5)
C	NWKTR : NUMBER OF ELEMENTS OF STIFFNESS MATRIX
C         (=ITRAIN(1)*29+(12+ITRAIN(2)*17)+ITRAIN(3)*29)

        NCARB=IT1+IT2+IT3
        NBOGIE=IT1*2+(IT2+1)+IT3*2
        NWHEEL=NBOGIE*2
        NEQTR=NBOGIE*5
        NWKTR=IT1*29+(12+IT2*17)+IT3*29
      
        I_ITRAIN=I_INTE
        I_NDTR=I_ITRAIN+3
        I_INTE=I_NDTR+(NEQTR+1)
        
        I_PROPC=I_REAL
cmkim 2001. 7. 20.
        i_props=i_propc+ncarb*4
cmkim   I_PROPS=I_PROPC+NCARB*3
        I_PROPB=I_PROPS+NBOGIE*2
        I_PROPP=I_PROPB+NBOGIE*3
        I_PROPU=I_PROPP+NWHEEL*2
        I_PROPH=I_PROPU+NWHEEL
        I_WHPOS=I_PROPH+NWHEEL*2
        I_AKTR=I_WHPOS+NWHEEL
        I_ACTR=I_AKTR+NWKTR
        I_AMTR=I_ACTR+NWKTR
CMKIM 2001. 7. 13.
        I_AMOTR=I_AMTR+NWKTR
        I_AKOTR=I_AMOTR+NWKTR
CMKIM   I_AKOTR=I_AMTR+NWKTR
        I_REAL=I_AKOTR+NWKTR
        
        IF(I_REAL.GT.I_RTOT.OR.I_INTE.GT.I_ITOT) THEN
          WRITE(*,9000) I_REAL,I_INTE
          STOP
        ENDIF
        
        CALL RETRAIN(IA(I_ITRAIN),AR(I_PROPC),AR(I_PROPS),AR(I_PROPB),
     &    AR(I_PROPP),AR(I_PROPU),AR(I_PROPH),AR(I_WHPOS),NCARB,NBOGIE,
     &    NWHEEL,IT1,IT2,IT3,IDATM)
       
        CALL TRAINSTIF(AR(I_PROPC),AR(I_PROPS),AR(I_PROPB),AR(I_PROPP),
     &    AR(I_PROPU),AR(I_PROPH),IA(I_ITRAIN),AR(I_AMTR),AR(I_ACTR),
     &    AR(I_AKTR),IA(I_NDTR),NCARB,NBOGIE,NWHEEL,NEQTR,NWKTR)

C	IPATH.EQ.1 : WHEEL RUNS ON BRIDGE, OTHERWISE ON RAIL
CN        READ(IN,1000) IPATH
CN        WRITE(IOUT,3050) IPATH
        IF(IPATH.EQ.1) THEN
          NUID=NEBEBR
        ELSE
          NUID=NEBERA
        ENDIF

C	NEID(2,NELW) : NODE NUMBER OF WHEEL PATH ELEMENT
C	NUID : NUMBER OF ELEMENTS OF WHEEL PATH
      
        I_NEID=I_INTE
        I_INTE=I_NEID+NUID*NNBE
 
CMKIM 2001. 7. 14.
        IF(IPATH.EQ.1) THEN
        CALL PATH(IA(I_NEID),IA(I_LNBEBR),AR(I_COOD),
     &    NEBEBR,NNBE,NUID,TLENGTH)
        ELSE
        CALL PATH(IA(I_NEID),IA(I_LNBERA),AR(I_COOD),
     &    NEBERA,NNBE,NUID,TLENGTH)
        ENDIF
     
C	-----------------------------------------------------------------
C	AVERAGE ACCELERATION METHOD : UNCONDITIONALLY STABLE(RECOMMENDED)
C	ALPHA=0.250, BETA=0.5
C	LINEAR ACCELERATION METHOD : CONDITIONALLY STABLE
C	ALPHA=0.167, BETA=0.5
CN        READ(IN,5000) ALPHA,BETA
CN        IF(ALPHA.EQ.0.0) ALPHA=0.25
CN        IF(BETA.EQ.0.0) BETA=0.5
CN        WRITE(IOUT,3150) ALPHA,BETA
CN 
CN        IF(ALPHA.GT.0.25.AND.BETA.NE.0.5) THEN
CN          WRITE(*,4150) ALPHA,BETA
CN          STOP
CN        ENDIF
      
C	DELT : DELTA T(TIME INCREMENT)
C	VEL : VELOCITY(M/SEC) OF TRAIN
C	EXTDIS : EXTRA DISTANCE      
CN        READ(IN,5000) DELT,VEL,EXTDIS
CN        IF(EXTDIS.EQ.0.0) EXTDIS=300.0
CN        WRITE(IOUT,3250) DELT,VEL,EXTDIS
CN        VEL=VEL/3.6

C	NMAX : NUMBER OF MAXIMUM ITERATIONS
C	TOLER : TOLERANCE FOR THE ITERATION
C	SCALE : GRAVITY ACCELERATION      
CN        READ(IN,4000) NMAX,TOLER,SCALE
CN        IF(NMAX.EQ.0) NMAX=100
CN        IF(TOLER.EQ.0.0) TOLER=1.0D-06
CN        IF(SCALE.EQ.0.0) SCALE=9.8      
CN        WRITE(IOUT,3350) NMAX,TOLER,SCALE

C	RWP(NWHEEL,2) : CURRENT RESPONSES OF STRUCTURE PART UNDER WHEEL AT WHEEL POSITION
C	ORWP(NWHEEL,2) : PREVIOUS RESPONSES OF STRUCTURE PART UNDER WHEEL AT WHEE POSITION
C	WHPOSINC(NWHEEL) : POSITION AT NEXT TIME STEP
C	IDWHPOS(NWHEEL) : ID NUMBER OF ELEMENT CORRESPONDING TO WHEEL POSITION
C	XI(NWHEEL): NATURAL COORDINATE OF WHEEL POSITION
C	FT(NEQTR) : FORCE VECTOR APPLIED TO TRAIN
C	FTS(NWHEEL,2) : FTS(I,1)=KHI*(VRI-GRI)
C                 FTS(I,2)=CHI*VDRI
C                 WHERE KHI=STIFFNESS OF HERTZIAN OF ITH WHEEL
C                       CHI=DAMPING OF HERTZIAN OF ITH WHEEL
C                       VRI,VDRI=BEAM RESPONSE AT ITH WHEEL POSITION
C                       GRI=RAIL IRREGULARITY AT ITH POSITION
C	FS(NEQ) : EQUIVALENT NODAL FORCE VECTOR APPLIED TO STRUCTURE
C	FSS(NWHEEL) : FORCE VECTOR APPLIED TO STRUCTURE AT WHEEL POSITION
C	RT(NEQTR,3) : (I)TH RESPONSE OF TRAIN[DIS, VEL, ACCE]
C	RTN(NEQTR,3) : (I+1)TH RESPONSE OF TRAIN
C	RS(NEQ,3) : (I)TH RESPONSE OF STRUCTURE[DIS, VEL, ACCE] 
C	RSN(NEQ,3) : (I+1)TH RESPONSE OF STRUCTURE
C	XX(NEQTR) : WORKING VECTOR
C	SS(NEQ) : WORKING VECTOR
        I_IDWHPOS=I_INTE
        I_INTE=I_IDWHPOS+NWHEEL

        I_RWP=I_REAL
        I_ORWP=I_RWP+NWHEEL*2
        I_WHPOSINC=I_ORWP+NWHEEL*2
        I_XI=I_WHPOSINC+NWHEEL
        I_FT=I_XI+NWHEEL
        I_FTS=I_FT+NEQTR
        I_FS=I_FTS+NWHEEL*2
        I_FSS=I_FS+NEQ
        I_RT=I_FSS+NWHEEL
        I_RTN=I_RT+NEQTR*3
        I_RS=I_RTN+NEQTR*3
        I_RSN=I_RS+NEQ*3
        I_XX=I_RSN+NEQ*3
        I_SS=I_XX+NEQTR
        I_REAL=I_SS+NEQ

C	IPRTTR(NPRTTR) : DEGREES OF FREEDOM OF TRAIN TO PRINT
C	IPRTST(NPRTST,2) : NODES NUMBER OF STRUCTURE
C	PRTTR(NPRTTR*2) : TEMPORARY STORAGE TO PRINT TRAIN RESPONSES
C	PRTST(NPRTST*2) : TEMPORARY STORAGE TO PRINT STRUCTURE RESPONSES
C	QQ(NEQTR) : DISPLACEMENT OF TRAIN AT ZERO STEP
C	NPRTTR : NUMBER OF DEGREES OF FREEDOM TO PRINT OF TRAIN
C	NPRTST : NUMBER OF NODES TO PRINT OF STRUCTURE
CN        READ(IN,4250) NPRTTR,NPRTST
CN        WRITE(IOUT,4257) NPRTTR,NPRTST
      
        I_IPRTTR=I_INTE
        I_IPRTST=I_IPRTTR+NPRTTR
        I_INTE=I_IPRTST+NPRTST*2
      
        I_PRTTR=I_REAL
        I_PRTST=I_PRTTR+NPRTTR*2

        I_QQ=I_PRTST+NPRTST*2
        I_REAL=I_QQ+NEQTR 
CMKIM   I_XX=I_PRTST+NPRTST*2
CMKIM   I_REAL=I_XX+NEQTR 
      
        IF(I_REAL.GT.I_RTOT.OR.I_INTE.GT.I_ITOT) THEN
          WRITE(*,9000) I_REAL,I_INTE
          STOP
        ENDIF

        CALL TRAINMD(AR(I_RWP),AR(I_ORWP),IA(I_NEID),AR(I_COOD),
     &    AR(I_WHPOS),AR(I_WHPOSINC),IA(I_IDWHPOS),AR(I_XI),AR(I_PROPH),
     &    AR(I_PROPC),AR(I_PROPB),AR(I_PROPU),AR(I_FT),AR(I_FTS),
     &    AR(I_FS),AR(I_FSS),AR(I_RT),AR(I_RTN),AR(I_RS),AR(I_RSN),
     &    AR(I_AKTR),AR(I_ACTR),AR(I_AMTR),AR(I_AMOTR),AR(I_AKOTR),
     &    AR(I_AK),
     &    AR(I_AC),AR(I_AM),AR(I_AMO),AR(I_AKO),IA(I_NRL),IA(I_NDTR),
     &    IA(I_ND),
     &    AR(I_XX),AR(I_SS),IA(I_ITRAIN),NWHEEL,NUID,TLENGTH,SCALE,
     &    NCARB,NBOGIE,NWKTR,NEQTR,NWK,NEQ,NDOF,NNBE,TOLER,VEL,DELT,
     &    NMAX,EXTDIS,ALPHA,BITA,IA(I_IPRTTR),IA(I_IPRTST),AR(I_PRTTR),
     &    AR(I_PRTST),NPRTTR,NPRTST,NT,IANA,AR(I_QQ),DL0,PI0,IPATH)
     
      ENDIF
      
C ======================================================================
C	MOVING MASS MODELING END (Moving Mass/Force for Inputed Train)
C ======================================================================
      
      
C =============================================================================
C	MOVING FORCE MODELING START (Moving Force & Static for Inputed Axle Load)
C =============================================================================
      IF(IANA.GE.4.AND.IANA.LE.5) THEN

	CALL REMOVF
      
CN        READ(IN,1000) NWHEEL
CN        WRITE(IOUT,8738) NWHEEL
     
        I_WHPOS=I_REAL
        I_AXLOAD=I_WHPOS+NWHEEL
        I_REAL=I_AXLOAD+NWHEEL
        CALL REAXLE(AR(I_WHPOS),AR(I_AXLOAD),NWHEEL)      

C	IPATH.EQ.1 : WHEEL RUNS ON BRIDGE, OTHERWISE ON RAIL
CN        READ(IN,1000) IPATH
CN        WRITE(IOUT,3050) IPATH
       IF(IPATH.EQ.1) THEN
          NUID=NEBEBR
        ELSE
          NUID=NEBERA
       ENDIF

C	NEID(2,NELW) : NODE NUMBER OF WHEEL PATH ELEMENT
C	NUID : NUMBER OF ELEMENTS OF WHEEL PATH
      
        I_NEID=I_INTE
        I_INTE=I_NEID+NUID*NNBE
 
CMKIM 2001. 7. 14.
        IF(IPATH.EQ.1) THEN
        CALL PATH(IA(I_NEID),IA(I_LNBEBR),AR(I_COOD),
     &    NEBEBR,NNBE,NUID,TLENGTH)
        ELSE
        CALL PATH(IA(I_NEID),IA(I_LNBERA),AR(I_COOD),
     &    NEBERA,NNBE,NUID,TLENGTH)
        ENDIF

CMKIM   CALL PATH(IA(I_NEID),IA(I_LNBEBR),IA(I_LNBERA),AR(I_COOD),IPATH,
CMKIM&    NEBEBR,NEBERA,NNBE,NUID,TLENGTH)

C	AVERAGE ACCELERATION METHOD : UNCONDITIONALLY STABLE(RECOMMENDED)
C	ALPHA=0.250, BETA=0.5
C	LINEAR ACCELERATION METHOD : CONDITIONALLY STABLE
C	ALPHA=0.167, BETA=0.5
CN        READ(IN,5000) ALPHA,BETA
CN        IF(ALPHA.EQ.0.0) ALPHA=0.25
CN        IF(BETA.EQ.0.0) BETA=0.5
CN        WRITE(IOUT,3150) ALPHA,BETA
 
CN        IF(ALPHA.GT.0.25.AND.BETA.NE.0.5) THEN
CN          WRITE(*,4150) ALPHA,BETA
CN          STOP
CN        ENDIF
      
C	DELT : DELTA T(TIME INCREMENT)
C	VEL : VELOCITY(M/SEC) OF TRAIN
C	EXTDIS : EXTRA DISTANCE      
CN        READ(IN,5000) DELT,VEL,EXTDIS
CN        IF(EXTDIS.EQ.0.0) EXTDIS=300.0
CN        WRITE(IOUT,3250) DELT,VEL,EXTDIS
CN        VEL=VEL/3.6

C	NMAX : NUMBER OF MAXIMUM ITERATIONS
C	TOLER : TOLERANCE FOR THE ITERATION
C	SCALE : GRAVITY ACCELERATION      
CN        READ(IN,4101) SCALE
CN        IF(SCALE.EQ.0.0) SCALE=9.8      
CN        WRITE(IOUT,3349) SCALE      

C	WHPOSINC(NWHEEL) : POSITION AT NEXT TIME STEP
C	IDWHPOS(NWHEEL) : ID NUMBER OF ELEMENT CORRESPONDING TO WHEEL POSITION
C	XI(NWHEEL): NATURAL COORDINATE OF WHEEL POSITION
C	FS(NEQ) : EQUIVALENT NODAL FORCE VECTOR APPLIED TO STRUCTURE
C	RS(NEQ,3) : (I)TH RESPONSE OF STRUCTURE[DIS, VEL, ACCE] 
C	RSN(NEQ,3) : (I+1)TH RESPONSE OF STRUCTURE
C	SS(NEQ) : WORKING VECTOR

        I_IDWHPOS=I_INTE
        I_INTE=I_IDWHPOS+NWHEEL

        I_WHPOSINC=I_REAL
        I_XI=I_WHPOSINC+NWHEEL
        I_FS=I_XI+NWHEEL
        I_RS=I_FS+NEQ
        I_RSN=I_RS+NEQ*3
        I_SS=I_RSN+NEQ*3
        I_REAL=I_SS+NEQ

C	IPRTST(NPRTST,2) : NODES NUMBER OF STRUCTURE
C	PRTST(NPRTST*2) : TEMPORARY STORAGE TO PRINT STRUCTURE RESPONSES
C	NPRTST : NUMBER OF NODES TO PRINT OF STRUCTURE
CN        READ(IN,4250) NPRTST
CN        WRITE(IOUT,4258) NPRTST
      
        I_IPRTST=I_INTE
        I_INTE=I_IPRTST+NPRTST*2
      
        I_PRTST=I_REAL
        I_REAL=I_PRTST+NPRTST*2
      
        IF(I_REAL.GT.I_RTOT.OR.I_INTE.GT.I_ITOT) THEN
          WRITE(*,9000) I_REAL,I_INTE
          STOP
        ENDIF

        CALL FORCEMD(IA(I_NEID),AR(I_COOD),AR(I_WHPOS),AR(I_WHPOSINC),
     &    IA(I_IDWHPOS),AR(I_XI),AR(I_FS),AR(I_RS),AR(I_RSN),AR(I_AK),
CMKIM 2001. 7. 13
     &    AR(I_AC),AR(I_AM),AR(I_AMO),AR(I_AKO),IA(I_NRL),IA(I_ND),
     &    AR(I_SS),
CMKIM&    AR(I_AC),AR(I_AM),AR(I_AKO),IA(I_NRL),IA(I_ND),AR(I_SS),
     &    AR(I_AXLOAD),NWHEEL,NUID,TLENGTH,SCALE,NWK,NEQ,NDOF,NNBE,VEL,
     &    DELT,EXTDIS,ALPHA,BITA,IA(I_IPRTST),AR(I_PRTST),NPRTST,
     &    NT,IANA,DL0,PI0,IPATH)
     
      ENDIF
      
C ======================================================================
C	MOVING FORCE MODELING END
C ======================================================================
      
      CALL EXITS

      STOP
      
 1000 FORMAT(5I5)
 1030 FORMAT(A80)
 1050 FORMAT(//,
     &1X,'ANALYSIS TYPE(IANA)                                   = ',I10/
     &1X,'  IF IANA.EQ.1 DYNAMIC MOVING MASS ANALYSIS OF TRAIN MODEL',/
     &1X,'  IF IANA.EQ.2 DYNAMIC MOVING FORCE ANALYSIS OF TRAIN MODEL',/
     &1X,'  IF IANA.EQ.3 STATIC ANALYSIS OF TRAIN MODEL',/
     &1X,'  IF IANA.EQ.4 DYNAMIC MOVING FORCE ANALYSIS OF FORCE MODEL',/
     &1X,'  IF IANA.EQ.5 STATIC ANALYSIS OF FORCE MODEL',/
     &1X,'NUMBER OF TOTAL NODES(NT=NNBR+NNRA)                   = ',I10/
     &1X,'NUMBER OF NODES TO MODEL BRIDGE(NNBR)                 = ',I10/
     &1X,'NUMBER OF NODES TO MODEL RAIL(NNRA)                   = ',I10)
 1150 FORMAT(//,
     &1X,'NUMBER OF BEAM ELEMENTS TO MODEL BRIDGE(NEBEBR)       = ',I10/
     &1X,'NUMBER OF PROPERTY SET CARDS TO MODEL BRIDGE(NPBEBR)  = ',I10/
     &1X,'NUMBER OF ISOLATORS(NLRB)                             = ',I10)
 1250 FORMAT(//,
     &1X,'NUMBER OF BEAM ELEMENTS TO MODEL TRACK(NEWKTK)        = ',I10/
     &1X,'NUMBER OF PROPERTY SET CARDS TO MODEL TRACK(NPWKTK)   = ',I10)
 1350 FORMAT(//,
     &1X,'NUMBER OF BEAM ELEMENTS MODELING RAIL(NEBERA)         = ',I10/
     &1X,'NUMBER OF PROPERTY CARDS TO MODEL RAIL(NPBERA)        = ',I10)
 1450 FORMAT(//,
     &1X,'TRAIN COMPOSITION',/
     &1X,'  NUMBER OF FRONT CAR BODIES(ITRAIN(1))               = ',I10/
     &1X,'  NUMBER OF INTERMEDIATE & PASSENGER BODIES(ITRAIN(2))= ',I10/
     &1X,'  NUMBER OF REAR CAR BODIES(ITRAIN(3))                = ',I10)

 2000 FORMAT(2I5,F10.0)
 2100 FORMAT(//,
     &1X,'NUMBER OF REQUIRED EIGENVALUES AND EIGENVECTORS(NROOT)= ',I10/
     &1X,'MAXIMUM NUMBER OF SUBSPACE ITERATION(NITEM)           = ',I10/
CMKIM 2001. 7. 19.
     &1X,'IF NITEM.EQ.-1, TWO EIGENVALUES SHOULD BE INPUTTED',/
     &1X,'CONVERGENCE TOLERANCE ON EIGENVALUES(RTOL)            = ',
     &E10.3)
 3000 FORMAT(2F10.0)
 3050 FORMAT(//,
     &1X,'TRAIN PATH(IPATH)                                     = ',I10/
     &1X,'  IPATH.EQ.1, TRAIN RUNS ON BRIDGE',/
     &1X,'  IPATH.NE.1, TRAIN RUNS ON RAIL')
 3150 FORMAT(//,
     &1X,'NEWMARK BETA METHOD COEFFICIENT',/
     &1X,'  ALPHA                                 = ',F10.4/
     &1X,'  BETA                                  = ',F10.4)
 3250 FORMAT(//,
     &1X,'TIME INCREMENT(DELT)                    = ',F10.4/
     &1X,'VELOCITY(VEL, KM/H)                     = ',F10.4/
     &1X,'EXTRA DISTANCE WHICH TRAIN RUNS(EXTDIS) = ',F10.4)
 3349 FORMAT(//,
     &1X,'GRAVITY ACCELERATION(SCALE)             = ',F10.4)
 3350 FORMAT(//,
     &1X,'MAX ITERATION(NMAX)                     = ',I10/
     &1X,'TOLERANCE(TOLER)                        = ',E10.4/
     &1X,'GRAVITY ACCELERATION(SCALE)             = ',F10.4)
 4000 FORMAT(I5,2F10.0)
 4101 FORMAT(F10.0)
 4150 FORMAT(//,1X,'INPUT ERROR IN NEWMARK COEFFICIENT',/
     &1X,'RECOMMENDED VALUES ALPHA = 0.15, BETA=0.5 BUT INPUT VALUES',/
     &1X,'ARE AS FOLLOWING',/
     &1X,'  ALPHA = ',F10.4/
     &1X,'  BETA  = ',F10.4)
 4250 FORMAT(2I5)
 4257 FORMAT(//,
     &1X,'NUMBER OF DEGREES OF FREEDOM OF TRAIN TO PRINT(NPRTTR) = ',I5/
     &1X,'NUMBER OF NODES OF STRUCTURE TO PRINT(NPRTST)          = ',I5)
 4258 FORMAT(//,
     &1X,'NUMBER OF NODES OF STRUCTURE TO PRINT(NPRTST)          = ',I5)
 5000 FORMAT(9F10.0)
 7100 FORMAT(//,1X,'CONGRATULATION') 
 7040 FORMAT(//,1X,'STARTING TIME       =',1X,I2,'HR  ',I2,'MIN  ',I2,
     &       'SEC  ',I2)
 7050 FORMAT(//,1X,'ENDING TIME         =',1X,I2,'HR  ',I2,'MIN  ',I2,
     &       'SEC  ',I2)
 7060 FORMAT(//,1X,'TOTAL SOLUTION TIME =',1X,I2,'HR  ',I2,'MIN  ',I2,
     &       'SEC')
 8000 FORMAT(1X,'NUMBER OF INTERMEDIATE AND PASSENGER CARS SHOULD BE',/,
     &1X,' EQUAL TO 0 OR GREATER THAN AND EQUAL TO 3',/,
     &1X,' IT2 = ',I5)
 9000 FORMAT(1X,'MEMORY IS INSUFFICIENT.',/,
     &1X,'I_RTOT(=150000) SHOULD BE MORE THAN ',I10/
     &1X,'I_ITOT(=5000) SHOULD BE MORE THAN ',I10)
 8738 FORMAT(//,
     &1X,'NUMBER OF WHEEL(NWHEEL)                               = ',I10)
      END
C
C	=======================================================================
      SUBROUTINE BEAMSTIF(AKE,AME,I,COOD,LNBE,MPBE,PRBE,NEBE,NPBE)
      IMPLICIT REAL*8(A-H,O-Z)
      IMPLICIT INTEGER*4 (I-N)
C	---------------------------------------------------------
C	PROGRAM TO FORM MATRICES (MASS,STIFFNESS) OF BEAM ELEMENT
C	---------------------------------------------------------
C	INPUT:
C	------
C	I                  : ITH ELEMENT
C	COOD(NT)           : NODAL COORDINATE
C	LNBE(NEBE,NNBE)    : ELEMENT CONNECTIVITY NODE NUMBER OF BEAM ELEMENT
C	MPBE(NEBE)         : MATERIAL PROPERTY NUMBER
C	PRBE(NPBE,9)       : MATERIAL PROPERTY CARD
C	NEBE               : NUMBER OF ELEMENTS MODELLING BEAM ELEMENT
C	NPBE               : NUMBER OF PROPERTY CARDS OF BEAM ELEMENT

C	OUTPUT:
C	-------
C	AKE(6,6)           : ELEMENT STIFFNESS MATRIX
C	AME(6,6)           : ELEMENT MASS MATRIX

C	INDEX
C	NT                 : NUMBER OF TOTAL NODES
C	NNBE               : NUMBER OF NODES MODELLING BEAM ELEMENT(=2)
C	-----------------------------------------------------------------------
      COMMON /IOUNIT/IN,IOUT,NSTIF
C
      DIMENSION COOD(*),LNBE(NEBE,*),MPBE(*),PRBE(NPBE,*)
      DIMENSION AKE(6,6),AME(6,6)
C	-----------------------------------------------------------------------
      DO 10 ITE=1,6
        DO 10 JTE=1,6
          AKE(JTE,ITE)=0.0D0
          AME(JTE,ITE)=0.0D0
   10 CONTINUE
C
      J=MPBE(I)

      AE=PRBE(J,1)   ! YOUNG'S MODULUS
      AV=PRBE(J,2)   ! POISSON'S RATIO
      ARO=PRBE(J,3)  ! MASS DENSITY
      AG=PRBE(J,4)   ! TORSIONAL MODULUS
      AA=PRBE(J,5)   ! AREA
      AI3=PRBE(J,6)  ! MOMENT OF INERTIA ABOUT 3-3 AXIS
      AI2=PRBE(J,7)  ! MOMENT OF INERTIA ABOUT 2-2 AXIS
      AJ=PRBE(J,8)   ! TORSIONAL MOMENT OF INERTIA 
      AIP=PRBE(J,9)  ! POLOR MOMENT OF INERTIA

      AL=DABS(COOD(LNBE(I,1))-COOD(LNBE(I,2)))

C	BEAM ELEMENT DEGREES OF FREEDOM
C	[VBI  PHIBI  THETABI  VBJ  PHIBJ  THETABJ]
C	------------------------------
C	BEAM ELEMENT STIFFNESS MATRIX:
C	------------------------------
      AKE(1,1)=12.*AE*AI3/AL**3
      AKE(2,2)=AG*AJ/AL
      AKE(3,3)=4.*AE*AI3/AL
      AKE(1,3)=6.*AE*AI3/AL**2
      AKE(3,1)=AKE(1,3)
      AKE(4,4)=12.*AE*AI3/AL**3
      AKE(3,4)=-6.*AE*AI3/AL**2
      AKE(4,3)=AKE(3,4)
      AKE(1,4)=-12.*AE*AI3/AL**3
      AKE(4,1)=AKE(1,4)
      AKE(5,5)=AG*AJ/AL
      AKE(2,5)=-AG*AJ/AL
      AKE(5,2)=AKE(2,5)
      AKE(6,6)=4.*AE*AI3/AL
      AKE(4,6)=-6.*AE*AI3/AL**2
      AKE(6,4)=AKE(4,6)
      AKE(3,6)=2.*AE*AI3/AL
      AKE(6,3)=AKE(3,6)
      AKE(1,6)=6.*AE*AI3/AL**2
      AKE(6,1)=AKE(1,6)
C	--------------------------
C	BEAM ELEMENT MASS MATRIX:
C	--------------------------
      AMF=ARO*AA*AL
      AME(1,1)=(13./35.+6.*AI3/(5.*AA*AL**2))*AMF
      AME(2,2)=(AIP/(3.*AA))*AMF
      AME(3,3)=(AL**2/105.+2.*AI3/(15.*AA))*AMF
      AME(1,3)=(11.*AL/210.+AI3/(10.*AA*AL))*AMF
      AME(3,1)=AME(1,3)
      AME(4,4)=(13./35.+6.*AI3/(5.*AA*AL**2))*AMF
      AME(3,4)=(13.*AL/420.-AI3/(10.*AA*AL))*AMF
      AME(4,3)=AME(3,4)
      AME(1,4)=(9./70.-1.2*AI3/(AA*AL**2))*AMF
      AME(4,1)=AME(1,4)
      AME(5,5)=AME(2,2)
      AME(2,5)=AME(5,5)/2.
      AME(5,2)=AME(2,5)
      AME(6,6)=(AL**2/105.+2.*AI3/(15.*AA))*AMF
      AME(4,6)=(-11.*AL/210.-AI3/(10.*AA*AL))*AMF
      AME(6,4)=AME(4,6)
      AME(3,6)=(-AL**2/140.-AI3/(30.*AA))*AMF
      AME(6,3)=AME(3,6)
      AME(1,6)=(-13.*AL/420.+AI3/(10.*AA*AL))*AMF
      AME(6,1)=AME(1,6)

      RETURN
      END
C
C	=======================================================================

C      SUBROUTINE CALACC(F,RN,AM,AC,AK,TT,ND,NEQ,NWK)
C	 Added NWM 13Oct0025 by NguyenDV to for lumped mass matrix
      SUBROUTINE CALACCB(F,RN,AM,AC,AK,TT,ND,NEQ,NWM,NWK,
	1				  DDM,STIF,MASS,DAMP)
      IMPLICIT REAL*8(A-H,O-Z)
	CHARACTER*4 STIF,MASS,DAMP
c	---------------------------------------------------------------------
C	PROGRAM TO RE-CALCULATE THE ACCELERATION BY THE EQUILIBRIUM EQUATION:
C	---------------------------------------------------------------------
C	INPUT:
C	-------
C	F(NEQ)	  = (I+1)TH EXTERNAL FORCE
C	RN(NEQ,3) = (I+1)TH RESPONSES(DIS,VEL,ACC)
C                 THIS RESULTS ARE CALCULATED IN THE NEWMARK BETA METHOD
C	AM(NWK)   = DECOMPOSED MASS MATRIX
C	AC(NWK)   = DAMPING MATRIX
C	AK(NWK)   = STIFFNESS MATRIX
C	ND(NEQ+1) = VECTOR CONTAINING ADDRESSES OF DIAGONAL ELEMENTS
C	NEQ		  = NUMBER OF EQUATIONS
C	NWK		  = NUMBER OF ELEMENTS
C	NWM       = NUMBER OF ELEMENTS OF MASS MATRIX
C				= NWK FOR CONSISTENT MASS MATRIX
C				= NEQ FOR LUMPED MASS MATRIX

C	OUTPUT:
C	-------
C	RN(1,3)	  = ACCELERATION CALCULATED FROM EQUILIBRIUM EQUATION

C	INDEX:
C	TT(NEQ)   = AUXILIARY VECTOR
C	------------------------------------------------------------------
c      COMMON /IOUNIT/IN,IOUT,NSTIF
c      COMMON /MAXDM/AMXTR(100,2),AMXST(100,2)
C
      DIMENSION F(NEQ),RN(NEQ,3),AM(1),AC(1),AK(1),TT(NEQ),
     1		  ND(NEQ+1),DDM(1)

C	CALCULATE TT=AC*RN(1,2)

C	CALL MULTDM(TT,AC,RN(1,2),ND,NEQ,NWK)
	CALL MAMULT(ND,AC,RN(1,2),TT,DAMP,'STD')

      DO 10 I=1,NEQ
        F(I)=F(I)-TT(I)
   10 CONTINUE

C	CALCULATE TT=AK*RN(1,1)
C	CALL MULTDM(TT,AK,RN(1,1),ND,NEQ,NWK)
	CALL MAMULT(ND,AK,RN(1,1),TT,STIF,'STD')


      DO 20 I=1,NEQ
        F(I)=F(I)-TT(I)
   20 CONTINUE

C	RE-CALCULATE ACCELERATION BY THE EQUILIBRIUM EQUATION
C	changed 13Oct0025 by NguyenDV to for lumped mass matrix

C	CALL REDBAK(AM,F,ND,NEQ)
	INDPD = 0
	CALL COLSOL(ND,AM,DDM,F,1,INDPD,MASS,'TEMP')
	CALL COLSOL(ND,AM,DDM,F,2,INDPD,MASS,'TEMP')


C	RESOTRE ACCELERATION TO RN(1,3)
      DO 30 I=1,NEQ
        RN(I,3)=F(I)
   30 CONTINUE

      RETURN
      END
C
C	=======================================================================
      SUBROUTINE CALEAXLD(FS,IDWHPOS,NEID,COOD,XI,AXLOAD,NRL,NWHEEL,NEQ,
     &  NDOF,NUID,NNBE)
      
      IMPLICIT REAL*8(A-H,O-Z)
	IMPLICIT INTEGER*4 (I-N)
C	-----------------------------------------------------------------------
C	INPUT:
C	------
C	IDWHPOS(NWHEEL) : ID NUMBER OF ELEMENT CORRESPONDING TO WHEEL POSITION
C	NEID(2,NELW) : NODE NUMBER OF BEAM ELEMENT WHERE WHEEL RUNS
C	COOD(NT) : NODAL COORDINATE 
C	XI(NWHEEL) : NATURAL COORDINATE OF WHEEL POSITION
C	AXLOAD(NWHEEL) : AXLE LOAD
C	NRL(NDOF,NT) : EQUATION NUMBER
C	NWHEEL : NUMBER OF WHEELS
C	NEQ : NUMBER OF EQUATIONS OF STRUCTURE
C	NDOF : NUMBER OF DEGREES OF FREEDOM OF NODE(=3)
C	NUID : NUMBER OF ELEMENTS WHERE WHEEL RUNS
C	NNBE : NUMBER OF NODES MODELLING A BEAM ELEMENT(=2)

C	OUTPUT:
C	-------
C	FS(NEQ) : EQUIVALENT NODAL FORCE VECTOR APPLIED TO STRUCTURE

C	INDEX
C	SFB(12) : SHAPE FUNCTION OF BEAM ELEMENT
C	FSE(12) : EQUIVALENT NODAL FORCE OF ITH WHEEL
C	NT : NUMBER OF TOTAL NODES
C	-----------------------------------------------------------------------
      COMMON /IOUNIT/IN,IOUT,NSTIF
C
      DIMENSION FS(NEQ),IDWHPOS(*),NEID(NUID,*),COOD(*),XI(*),AXLOAD(*),
     &  NRL(NDOF,*)
      DIMENSION SFB(12),FSE(12)
C	-----------------------------------------------------------------------
C	EQUIVALENT NODAL FORCE CORRESPONDING TO LUMPED FORCE AT WHEEL POSITION
      DO 30 I=1,NEQ
        FS(I)=0.0D0
   30 CONTINUE

      DO 40 I=1,NWHEEL
        IF(IDWHPOS(I).GT.0) THEN
          IENUM=IDWHPOS(I)
          NDNUMI=NEID(IENUM,1)
          NDNUMJ=NEID(IENUM,2)
          BLE=DABS(COOD(NDNUMI)-COOD(NDNUMJ))
          SFB(1)=2.*XI(I)**3-3.*XI(I)**2+1.
          SFB(2)=0
          SFB(3)=XI(I)*BLE*(XI(I)-1.)**2
          SFB(4)=-2.*XI(I)**3+3.*XI(I)**2
          SFB(5)=0
          SFB(6)=XI(I)**2*BLE*(XI(I)-1.)

          FSE(1)=SFB(1)*AXLOAD(I)
          FSE(2)=0
          FSE(3)=SFB(3)*AXLOAD(I)
          FSE(4)=SFB(4)*AXLOAD(I)
          FSE(5)=0
          FSE(6)=SFB(6)*AXLOAD(I)

C	ASSEMBLE EQUIVALENT NODAL FORCE OF ELEMENT INTO GLOBAL NODAL FORCE
          DO 50 J=1,NNBE
            NDNUM=NEID(IENUM,J)
            DO 60 K=1,NDOF
              IP=NRL(K,NDNUM)
              IF(IP.GT.0) THEN
                FS(IP)=FS(IP)+FSE((J-1)*NDOF+K)
              ENDIF
   60       CONTINUE
   50     CONTINUE
        ENDIF
   40 CONTINUE

      RETURN
      END
C
C	=======================================================================
      SUBROUTINE CALETAXLD(FS,IDWHPOS,NEID,XI,AXLOAD,NRL,NWHEEL,NEQ,
     &  NDOF,NUID,NNBE,DL0,PI0)
      
      IMPLICIT REAL*8(A-H,O-Z)
	IMPLICIT INTEGER*4 (I-N)
C	-----------------------------------------------------------------------
C	INPUT:
C	------
C	IDWHPOS(NWHEEL) : ID NUMBER OF ELEMENT CORRESPONDING TO WHEEL POSITION
C	NEID(2,NELW) : NODE NUMBER OF BEAM ELEMENT WHERE WHEEL RUNS
C	XI(NWHEEL) : NATURAL COORDINATE OF WHEEL POSITION
C	AXLOAD(NWHEEL) : AXLE LOAD
C	NRL(NDOF,NT) : EQUATION NUMBER
C	NWHEEL : NUMBER OF WHEELS
C	NEQ : NUMBER OF EQUATIONS OF STRUCTURE
C	NDOF : NUMBER OF DEGREES OF FREEDOM OF NODE(=3)
C	NUID : NUMBER OF ELEMENTS WHERE WHEEL RUNS
C	NNBE : NUMBER OF NODES MODELLING A BEAM ELEMENT(=2)

C	OUTPUT:
C	-------
C	FS(NEQ) : EQUIVALENT NODAL FORCE VECTOR APPLIED TO STRUCTURE

C	INDEX
C	SFB(2) : SHAPE FUNCTION OF BEAM ELEMENT
C	FSE(2) : EQUIVALENT NODAL FORCE OF ITH WHEEL
C	NT : NUMBER OF TOTAL NODES
C	-----------------------------------------------------------------------
      COMMON /IOUNIT/IN,IOUT,NSTIF

      DIMENSION FS(NEQ),IDWHPOS(*),NEID(NUID,*),XI(*),AXLOAD(*),
     &  NRL(NDOF,*)
      DIMENSION SFB(2),FSE(2)
C	-----------------------------------------------------------------------
C	EQUIVALENT NODAL FORCE CORRESPONDING TO LUMPED FORCE AT WHEEL POSITION

      DO 40 I=1,NWHEEL
        IF(IDWHPOS(I).GT.0) THEN
          IENUM=IDWHPOS(I)
          SFB(1)=XI(I)
          SFB(2)=1.-XI(I)

          FSE(1)=SFB(1)*AXLOAD(I)*DL0*DCOS(PI0)
          FSE(2)=SFB(1)*AXLOAD(I)*DL0*DCOS(PI0)

C	ASSEMBLE EQUIVALENT NODAL FORCE OF ELEMENT INTO GLOBAL NODAL FORCE
          DO 50 J=1,NNBE
            NDNUM=NEID(IENUM,J)
            IP=NRL(2,NDNUM)
            IF(IP.GT.0) THEN
              FS(IP)=FS(IP)+FSE(J)
            ENDIF
   50     CONTINUE
        ENDIF
   40 CONTINUE

      RETURN
      END
C
C	=======================================================================
      SUBROUTINE CALFS(FSS,PROPH,RT,FTS,FS,IDWHPOS,NEID,COOD,XI,NRL,
     &  NWHEEL,NEQTR,NUID,NDOF,NBOGIE,NEQ,NNBE)
      IMPLICIT REAL*8(A-H,O-Z)
      IMPLICIT INTEGER*4 (I-N)
C	-----------------------------------------------------------------------
C	INPUT:
C	------
C	FSS(NWHEEL) : LUMPED FORCE APPLIED TO STRUCTURE AT WHEEL POSITION
C	PROPH(NWHEEL,2) : PROPERTIES OF HERTZIAN SPRING
C	RT(NEQTR,3) : RESPONSE OF TRAIN[DIS, VEL, ACCE]
C	FTS(NWHEEL,2) : FTS(I,1)=KHI*(VRI-GRI)
C                 FTS(I,2)=CHI*VDRI
C                 WHERE KHI=STIFFNESS OF HERTZIAN OF ITH WHEEL
C                       CHI=DAMPING OF HERTZIAN OF ITH WHEEL
C                       VRI,VDRI=BEAM RESPONSE AT ITH WHEEL POSITION
C                       GRI=RAIL IRREGULARITY AT ITH POSITION
C	IDWHPOS(NWHEEL) : ID NUMBER OF ELEMENT CORRESPONDING TO WHEEL POSITION
C	NEID(2,NELW) : NODE NUMBER OF BEAM ELEMENT WHERE WHEEL RUNS
C	COOD(NT) : NODAL COORDINATE 
C	XI(NWHEEL) : NATURAL COORDINATE OF WHEEL POSITION
C	NRL(NDOF,NT) : EQUATION NUMBER
C	NWHEEL : NUMBER OF WHEELS
C	NEQTR : NUMBER OF EQUATIONS OF TRAIN
C	NUID : NUMBER OF ELEMENTS WHERE WHEEL RUNS
C	NDOF : NUMBER OF DEGREES OF FREEDOM OF NODE(=3)
C	NBOGIE : NUMBER OF BOGIES
C	NEQ : NUMBER OF EQUATIONS OF STRUCTURE
C	NNBE : NUMBER OF NODES MODELLING A BEAM ELEMENT(=2)

C	OUTPUT:
C	-------
C	FS(NEQ) : EQUIVALENT NODAL FORCE VECTOR APPLIED TO STRUCTURE

C	INDEX
C	SFB(12) : SHAPE FUNCTION OF BEAM ELEMENT
C	FSE(12) : EQUIVALENT NODAL FORCE OF ITH WHEEL
C	NT : NUMBER OF TOTAL NODES
C	-------------------------------------------------------------------------------
      COMMON /IOUNIT/IN,IOUT,NSTIF
      DIMENSION FSS(*),PROPH(NWHEEL,*),RT(NEQTR,*),FTS(NWHEEL,*),
     &  FS(NEQ),IDWHPOS(*),NEID(NUID,*),COOD(*),XI(*),NRL(NDOF,*)

      DIMENSION SFB(12),FSE(12)
C	------------------------------------------------------------------------------------
C	CALCULATE TRAIN/RAIL INTERACTION LUMPED FORCE APPLIED TO STRUCTURE AT WHEEL POSITION
      DO 10 J=1,NWHEEL
          FSS(J)=0.0D0
   10 CONTINUE

      DO 20 I=1,NBOGIE
        IF(IDWHPOS(2*I-1).GT.0) THEN
          FSS(2*I-1)=PROPH(2*I-1,1)*RT(5*I-1,1)
     &              +PROPH(2*I-1,2)*RT(5*I-1,2)
          FSS(2*I-1)=FSS(2*I-1)-FTS(2*I-1,1)-FTS(2*I-1,2)
        ELSE
          FSS(2*I-1)=0.0D0
        ENDIF
        IF(IDWHPOS(2*I).GT.0) THEN
          FSS(2*I)=PROPH(2*I,1)*RT(5*I,1)
     &            +PROPH(2*I,2)*RT(5*I,2)
          FSS(2*I)=FSS(2*I)-FTS(2*I,1)-FTS(2*I,2)
        ELSE
          FSS(2*I)=0.0D0
        ENDIF
   20 CONTINUE

C	EQUIVALENT NODAL FORCE CORRESPONDING TO INTERACTION LUMPED FORCE AT WHEEL POSITION
      DO 30 I=1,NEQ
        FS(I)=0.0D0
   30 CONTINUE

      DO 40 I=1,NWHEEL
        IF(IDWHPOS(I).GT.0) THEN
          IENUM=IDWHPOS(I)
          NDNUMI=NEID(IENUM,1)
          NDNUMJ=NEID(IENUM,2)
          BLE=DABS(COOD(NDNUMI)-COOD(NDNUMJ))
          SFB(1)=2.*XI(I)**3-3.*XI(I)**2+1.
          SFB(2)=0
          SFB(3)=XI(I)*BLE*(XI(I)-1.)**2
          SFB(4)=-2.*XI(I)**3+3.*XI(I)**2
          SFB(5)=0
          SFB(6)=XI(I)**2*BLE*(XI(I)-1.)

          FSE(1)=SFB(1)*FSS(I)
          FSE(2)=0
          FSE(3)=SFB(3)*FSS(I)
          FSE(4)=SFB(4)*FSS(I)
          FSE(5)=0
          FSE(6)=SFB(6)*FSS(I)

C	ASSEMBLE EQUIVALENT NODAL FORCE OF ELEMENT INTO GLOBAL NODAL FORCE
          DO 50 J=1,NNBE
            NDNUM=NEID(IENUM,J)
            DO 60 K=1,NDOF
              IP=NRL(K,NDNUM)
              IF(IP.GT.0) THEN
                FS(IP)=FS(IP)+FSE((J-1)*NDOF+K)
              ENDIF
   60       CONTINUE
   50     CONTINUE
        ENDIF
   40 CONTINUE

      RETURN
      END

C	=======================================================================
      SUBROUTINE CALFT(IDWHPOS,PROPH,RWP,WHPOS,PROPC,PROPB,PROPU,FT,FTS,
     &  ITRAIN,NWHEEL,TLENGTH,SCALE,NEQTR,NCARB,NBOGIE)

      IMPLICIT REAL*8(A-H,O-Z)
      IMPLICIT INTEGER*4 (I-N)
C	-----------------------------------------------------------------------
C	INPUT:
C	------
C	IDWHPOS(NWHEEL) : ID NUMBER OF ELEMENT CORRESPONDING TO WHEEL POSITION
C	PROPH(NWHEEL,2) : PROPERTIES OF HERTZIAN SPRING
C	RWP(NWHEEL,2) : RESPONSE OF STRUCTURE PART UNDER WHEEL AT WHEEL POSITION[VRI, VDRI]
C	WHPOS(NWHEEL) : WHEEL POSITION
cmkim 2001. 7. 20.
c	propc(ncarb,4) : properties of car body(mass, inertia, alci, ahci)
c                  ahci is a length from front to mass center
cmkim PROPC(NCARB,3) : PROPERTIES OF CAR BODY
C	PROPB(NBOGIE,3) : PROPERTIES OF BOGIE
C	PROPU(NWHEEL) : PROPERTIES OF WHEEL
C	ITRAIN(3) : TRAIN COMPOSITION
C	ITRAIN(1) : NUMBER OF FRONT POWER CARS
C	ITRAIN(2) : NUMBER OF INTERMEDIATE & PASSENGER CARS
C	ITRAIN(3) : NUMBER OF REAR POWER CARS
C	NWHEEL : NUMBER OF WHEELS
C	TLENGTH : TOTAL LENGTH OF PATH WHERE WHEEL RUNS
C	SCALE : GRAVITY ACCELERATION
C	NEQTR : NUMBER OF EQUATIONS OF TRAIN
C	NCARB : NUMBER OF CAR BODIES
C	NBOGIE: NUMBER OF BOGIES

C	OUTPUT:
C	-------
C	FT(NEQTR)     = FORCE VECTOR APPLIED TO TRAIN
C	FTS(NWHEEL,2) = FTS(I,1)=KHI*(VRI-GRI)
C                 FTS(I,2)=CHI*VDRI
C                 WHERE KHI=STIFFNESS OF HERTZIAN OF ITH WHEEL
C                       CHI=DAMPING OF HERTZIAN OF ITH WHEEL
C                       VRI,VDRI=BEAM RESPONSE AT ITH WHEEL POSITION
C                       GRI=RAIL IRREGULARITY AT ITH POSITION
C	--------------------------------------------------------------------------
      COMMON /IOUNIT/IN,IOUT,NSTIF

      DIMENSION IDWHPOS(*),PROPH(NWHEEL,*),RWP(NWHEEL,*),WHPOS(*),
     &  PROPC(NCARB,*),PROPB(NBOGIE,*),PROPU(*),FT(NEQTR),FTS(NWHEEL,*),
     &  ITRAIN(*)

C	--------------------------------------------------------------------------
      DO 10 I=1,2
        DO 10 J=1,NWHEEL
          FTS(J,I)=0.0D0
   10 CONTINUE

      DO 20 I=1,NWHEEL
        IF (IDWHPOS(I).GT.0) THEN
          CALL TKIRRE(WHPOS(I),TLENGTH,TIRREGU)
          FTS(I,1)=PROPH(I,1)*(RWP(I,1)-TIRREGU)
          FTS(I,2)=PROPH(I,2)*RWP(I,2)
        ELSE
          FTS(I,1)=0
          FTS(I,2)=0
        ENDIF
   20 CONTINUE

      DO 30 I=1,NEQTR
        FT(I)=0.0D0
   30 CONTINUE
   
      IPOS=1
      DO 40 I=1,ITRAIN(1)
cmkim 2001. 7. 20.
        ft(ipos)=propc(i,1)*(propc(i,3)-propc(i,4))/propc(i,3)*scale
cmkim   FT(IPOS)=PROPC(I,1)/2.*SCALE
        IPOS=IPOS+5
cmkim 2001. 7. 20
        ft(ipos)=propc(i,1)*propc(i,4)/propc(i,3)*scale
cmkim   FT(IPOS)=PROPC(I,1)/2.*SCALE
        IPOS=IPOS+5
   40 CONTINUE
   
      JPOS=ITRAIN(1)+1
cmkim 2001. 7. 20.
      ft(ipos)=propc(jpos,1)*(propc(jpos,3)-propc(jpos,4))/propc(jpos,3)
     &  *scale
cmkim FT(IPOS)=PROPC(JPOS,1)/2.*SCALE
      IPOS=IPOS+5
      
      DO 50 I=ITRAIN(1)+2,ITRAIN(1)+ITRAIN(2)
cmkim 2001. 7. 20.
        ft(ipos)=propc(i-1,1)*propc(i-1,4)/propc(i-1,3)+
     &           propc(i,1)*(propc(i,3)-propc(i,4))/propc(i,3)
        ft(ipos)=ft(ipos)*scale
cmkim   FT(IPOS)=(PROPC(I-1,1)+PROPC(I,1))/2.*SCALE
        IPOS=IPOS+5
   50 CONTINUE
   
      JPOS=ITRAIN(1)+ITRAIN(2)
cmkim 2001. 7. 20.
      ft(ipos)=propc(jpos,1)*propc(jpos,4)/propc(jpos,3)*scale
cmkim FT(IPOS)=PROPC(JPOS,1)/2.*SCALE
      IPOS=IPOS+5
      
      DO 60 I=1,ITRAIN(3)
        JPOS=ITRAIN(1)+ITRAIN(2)+I
cmkim 2001. 7. 20
        ft(ipos)=propc(jpos,1)*(propc(jpos,3)-propc(jpos,4))/
     &    propc(jpos,3)*scale
cmkim   FT(IPOS)=PROPC(JPOS,1)/2.*SCALE
        IPOS=IPOS+5
cmkim 2001. 7. 20.
        ft(ipos)=propc(jpos,1)*propc(jpos,4)/propc(jpos,3)*scale
cmkim   FT(IPOS)=PROPC(JPOS,1)/2.*SCALE
        IPOS=IPOS+5
   60 CONTINUE

      DO 70 I=1,NBOGIE
        FT((I-1)*5+2)=PROPB(I,1)*SCALE
        FT((I-1)*5+3)=0
        FT((I-1)*5+4)=PROPU(2*I-1)*SCALE+FTS(2*I-1,1)+FTS(2*I-1,2)
        FT((I-1)*5+5)=PROPU(2*I)*SCALE+FTS(2*I,1)+FTS(2*I,2)
   70 CONTINUE

      RETURN
      END
C
C	=======================================================================
      SUBROUTINE CALRWP(IDWHPOS,NEID,COOD,XI,NRL,RS,RWP,NWHEEL,NUID,
     &  NNBE,NDOF,NEQ)

      IMPLICIT REAL*8(A-H,O-Z)
      IMPLICIT INTEGER*4 (I-N)
C	-----------------------------------------------------------------------
C	INPUT:
C	------
C	IDWHPOS(NWHEEL) = ID NUMBER OF ELEMENT CORRESPONDING TO WHEEL POSITION
C	NEID(2,NELW) = NODE NUMBER OF BEAM ELEMENT WHERE WHEEL RUNS
C	COOD(NT)		= NODAL COORDINATE 
C	XI(NWHEEL)		= NATURAL COORDINATE OF WHEEL POSITION
C	NRL(NDOF,NT)	= EQUATION NUMBER OF STRUCTURE
C	RS(NEQ,3)		= RESPONSE OF STRUCTURE[DIS, VEL, ACCE]
C	NWHEEL			= NUMBER OF WHEELS
C	NUID			= NUMBER OF ELEMENTS WHERE WHEEL RUNS
C	NNBE			= NUMBER OF NODES MODELLING A BEAM ELEMENT(=2)
C	NDOF			= NUMBER OF DEGREES OF FREEDOM(=3)
C	NEQ				= NUMBER OF EQUATIONS OF STRUCTURE

C	OUTPUT:
C	-------
C	RWP(NWHEEL,2) : RESPONSES OF TRAIN PATH OF STRUCTURE AT WHEEL POSITION[DIS, VEL]

C	INDEX
C	SFB(12) : SHAPE FUNCTION OF BEAM ELEMENT
C	RSE(12,2) : ELEMENT RESPONSE WHERE WHEEL RUNS[DIS, VEL]
C	NT : NUMBEROF TOTAL NODES
C	-------------------------------------------------------------------------
      COMMON /IOUNIT/IN,IOUT,NSTIF
C
      DIMENSION IDWHPOS(*),NEID(NUID,*),COOD(*),XI(*),NRL(NDOF,*),
     &  RS(NEQ,*),RWP(NWHEEL,*)

      DIMENSION SFB(12),RSE(12,2)
C	------------------------------------------------------------------------
      DO 10 I=1,NWHEEL
        IF(IDWHPOS(I).GT.0) THEN
          IENUM=IDWHPOS(I)
          NDNUMI=NEID(IENUM,1)
          NDNUMJ=NEID(IENUM,2)
          BLE=DABS(COOD(NDNUMI)-COOD(NDNUMJ))
          SFB(1)=2.*XI(I)**3-3.*XI(I)**2+1.
          SFB(2)=0
          SFB(3)=XI(I)*BLE*(XI(I)-1.)**2
          SFB(4)=-2.*XI(I)**3+3.*XI(I)**2
          SFB(5)=0
          SFB(6)=XI(I)**2*BLE*(XI(I)-1.)

          DO 20 J=1,2
            DO 20 K=1,NNBE*NDOF
              RSE(K,J)=0.0D0
   20     CONTINUE

          DO 30 J=1,NNBE
            NDNUM=NEID(IENUM,J)
            DO 40 K=1,NDOF
              IDNEQ=NRL(K,NDNUM)
              IF(IDNEQ.GT.0) THEN
                DO 50 L=1,2
                  RSE((J-1)*NDOF+K,L)=RS(IDNEQ,L)
   50           CONTINUE
              ENDIF
   40       CONTINUE
   30     CONTINUE

          DO 60 J=1,2
            RWP(I,J)=SFB(1)*RSE(1,J)+SFB(3)*RSE(3,J)+SFB(4)*RSE(4,J)
     &        +SFB(6)*RSE(6,J)
   60     CONTINUE
        ELSE
          DO 70 J=1,2 
            RWP(I,J)=0.0D0
   70     CONTINUE
        ENDIF
   10 CONTINUE

      RETURN
      END
C	=======================================================================
      SUBROUTINE CALTFS(FS,FSS,IDWHPOS,NEID,XI,NRL,NWHEEL,NUID,NDOF,NEQ,
     &  NNBE,DL0,PI0)

      IMPLICIT REAL*8(A-H,O-Z)
      IMPLICIT INTEGER*4 (I-N)
C	--------------------------------------------------------------------
C	INPUT:
C	------
C	FSS(NWHEEL) : LUMPED FORCE APPLIED TO STRUCTURE AT WHEEL POSITION
C	IDWHPOS(NWHEEL) : ID NUMBER OF ELEMENT CORRESPONDING TO WHEEL POSITION
C	NEID(2,NELW) : NODE NUMBER OF BEAM ELEMENT WHERE WHEEL RUNS
C	XI(NWHEEL) : NATURAL COORDINATE OF WHEEL POSITION
C	NRL(NDOF,NT) : EQUATION NUMBER
C	NWHEEL : NUMBER OF WHEELS
C	NUID : NUMBER OF ELEMENTS WHERE WHEEL RUNS
C	NDOF : NUMBER OF DEGREES OF FREEDOM OF NODE(=3)
C	NEQ : NUMBER OF EQUATIONS OF STRUCTURE
C	NNBE : NUMBER OF NODES MODELLING A BEAM ELEMENT(=2)

C	OUTPUT:
C	-------
C	FS(NEQ) : EQUIVALENT NODAL FORCE VECTOR APPLIED TO STRUCTURE

C	INDEX
C	SFB(2) : SHAPE FUNCTION OF BEAM ELEMENT
C	FSE(2) : EQUIVALENT NODAL FORCE OF ITH WHEEL
C	NT : NUMBER OF TOTAL NODES
C	--------------------------------------------------------------------
      COMMON /IOUNIT/IN,IOUT,NSTIF
      DIMENSION FS(NEQ),FSS(*),IDWHPOS(*),NEID(NUID,*),XI(*),NRL(NDOF,*)

      DIMENSION SFB(2),FSE(2)
C	--------------------------------------------------------------------
      DO 40 I=1,NWHEEL
        IF(IDWHPOS(I).GT.0) THEN
          IENUM=IDWHPOS(I) 
          SFB(1)=XI(I)
          SFB(2)=1.-XI(I)

          FSE(1)=SFB(1)*FSS(I)*DL0*DCOS(PI0)
          FSE(2)=SFB(2)*FSS(I)*DL0*DCOS(PI0)

C	ASSEMBLE EQUIVALENT NODAL FORCE OF ELEMENT INTO GLOBAL NODAL FORCE
          DO 50 J=1,NNBE
            NDNUM=NEID(IENUM,J)
            IP=NRL(2,NDNUM)
            IF(IP.GT.0) THEN
              FS(IP)=FS(IP)+FSE(J)
            ENDIF
   50     CONTINUE
        ENDIF
   40 CONTINUE

      RETURN
      END
C
C	=======================================================================
      SUBROUTINE CONGR(NEVAB,TSTSM,ROTAT)
      IMPLICIT REAL*8(A-H,O-Z)
      IMPLICIT INTEGER*4 (I-N)
C	--------------------------------------------------------------------
C     PROGRAM TO TRANSFORM LOCAL ELEMENT TO GLOBAL STIFFNESS:
C		COMPUTES THE MATRIX OPERATION A = TRANSFOSE(B)*A*B
C		WHERE A AND B ARE SQUARE MATRICES
C	N  = ACTUAL ORDER OF A AND B
C	NX = ROW AND COLUMN DIMENSION OF A AND B
C	V  = AUXILIARY VECTOR
C	--------------------------------------------------------------------
      DIMENSION ROTAT(NEVAB,NEVAB),TSTSM(NEVAB,NEVAB),VV(NEVAB)
C
C	COMPUTE A * B AND STORE IN A
C	-----------------------------
      DO 10  I = 1,NEVAB
       DO  5  J = 1,NEVAB
        VV(J) = 0.
        DO 5 K=1,NEVAB
    5  VV(J) = VV(J) + TSTSM(I,K)*ROTAT(K,J)
C
       DO 10 J=1,NEVAB
   10 TSTSM(I,J) = VV(J)
C
C	COMPUTE TRANSPOSE(B) * A AND STORE IN A
C	----------------------------------------
      DO 20 J = 1,NEVAB
       DO 15 I = 1,NEVAB
        VV(I) = 0.
        DO 15 K=1,NEVAB
   15  VV(I) = VV(I) + ROTAT(K,I)*TSTSM(K,J)
       DO 20 I=1,NEVAB
   20 TSTSM(I,J) = VV(I)
      RETURN
      END
C
C	=======================================================================
CMKIM 2001. 7. 19.
      SUBROUTINE DAMPBE(AM,AC,AK,ROOT,NWK,NC,NITEM)     
      IMPLICIT REAL*8(A-H,O-Z)
      IMPLICIT INTEGER*4 (I-N)
C	---------------------------------------------------------------
C     PROGRAM TO CALCULATE DAMPING MATRIX USING MODAL DAMPING RATIOS:
C	---------------------------------------------------------------
C	INPUT:
C	AM(NWK)  = MASS MATRIX
C	AK(NWK)  = STIFFNESS MATRIX
C	ROOT(NC) = EIGENVALUES (SQUARED NATURAL FREQUENCIES)
C	NWK      = TOTAL NUMBER OF ELEMENTS OF STIFFNESS MATRIX
C	NC       = NUMBER OF ITERATION EIGENVALUES USED(=NROOT)
C	NITEM    = IF NITEM.EQ.-1, TWO EIGENVALUES SHOULD BE INPUTTED

C	OUTPUT:
C	AC(NWK)  = DAMPING MATRIX(OUTPUT)=ALPHA*M+BETA*K
C	ROOT(NC) = NATURAL FREQUENCIES(RAD/SEC)

C	INDEX:
C	ZETA(2)  = MODAL DAMPING RATIOS CORRESPONDING TO THE FIRST AND SECOND MODES
C	-------------------------------------------------------------------------
CN      COMMON /IOUNIT/IN,IOUT,NSTIF
      COMMON /INOU/ ITI,ITO,ISO,NDATI,NPLOT,NKFAC,NELEM,
     1              IFPR(10),IFPL(10)
C
      DIMENSION AM(*),AC(*),AK(*),ROOT(*)    
      DIMENSION ZETA(2)
C	--------------------------------------------------------------------------
      IF(NITEM.EQ.-1) THEN
CN        READ(IN,1000) (ROOT(I),I=1,NC)
CN        WRITE(IOUT,2000) (ROOT(I),I=1,NC)
	  READ(ITI,*)
        READ(ITI,1000) (ROOT(I),I=1,NC)
        WRITE(ISO,2000) (ROOT(I),I=1,NC)
      ENDIF
 2000 FORMAT(//,1X,'EIGENVALUES(SQUARED NATURAL FREQUENCIES)',/
     &1X,'FIRST EIGENVALUE    = ',E10.3/
     &1X,'SECOND EIGENVALUE   = ',E10.3)


CN      READ(IN,1000) (ZETA(I),I=1,2)
CN      WRITE(IOUT,1863) (ZETA(I),I=1,2)
cn	READ(ITI,*)
C	Previous line added to read data message of Winkler Connectivity
C	Previous chanegd to next 16Aug06 by NguyenDV
C	READ(ITI,*)

	READ(ITI,*)
      READ(ITI,*) (ZETA(I),I=1,2)
	WRITE(ITO,100)
      WRITE(ISO,1863) (ZETA(I),I=1,2)

  100 FORMAT(/,1X,'READ MODAL DAMPING RATIOS & CAL. DAMPING MATRIX OF 
     +BRIDGE') 

 1863 FORMAT(//,1X,'DAMPING RATIO',/
     &1X,'FIRST DAMPING RATIO  = ',F10.5/
     &1X,'SECOND DAMPING RATIO = ',F10.5)

CN      WRITE(IOUT,2010)
      WRITE(ISO,2010)
 2010 FORMAT(//,' MODE   PERIOD         FREQUENCY      FREQUENCY',
     &  '      EIGENVALUE',/
     &  '        (TIME)         (CYC/TIME)     (RAD/TIME)     ',
     &  '(RAD/TIME)**2')

      PI=3.141592654
      DO 40 I=1,NC
        TEMP=DSQRT(ROOT(I))
        TEMQ=TEMP/(2.*PI)
        TEMR=1./TEMQ
CN        WRITE(IOUT,2020) I,TEMR,TEMQ,TEMP,ROOT(I)
        WRITE(ISO,2020) I,TEMR,TEMQ,TEMP,ROOT(I)
   40 CONTINUE
 2020 FORMAT(I5,4(2X,E13.6))

      DO 20 I=1,NC
        ROOT(I)=DSQRT(ROOT(I))
   20 CONTINUE


      TEMP=2.*(ROOT(1)*ROOT(2))/(ROOT(2)**2-ROOT(1)**2)
      ALPHA=TEMP*(ROOT(2)*ZETA(1)-ROOT(1)*ZETA(2))
      BETA=TEMP*(-ZETA(1)/ROOT(2)+ZETA(2)/ROOT(1))

      DO 10 I=1,NWK
        AC(I)=ALPHA*AM(I)+BETA*AK(I)
   10 CONTINUE
  
      write(91,3000) (ak(i),i=1,nwk)
      write(92,3000) (am(i),i=1,nwk)
      write(93,3000) (ac(i),i=1,nwk)
 3000 format(4(3x,e22.14))

      RETURN
 1000 FORMAT(2F10.0)
      END
C   
C	=======================================================================
      SUBROUTINE DAMPEBC(AC,NRL,ND,NBC,BCLRB,NDOF,NLRB)
      IMPLICIT REAL*8(A-H,O-Z)
      IMPLICIT INTEGER*4 (I-N)
C	-----------------------------------------------------------------
C     PROGRAM TO ADD DAMPING OF BASE ISOLATORS TO BRIDGE DAMPING MATRIX
C	-----------------------------------------------------------------
C	INPUT
C	NRL(NDOF*NT)     : EQUATION NUMBER
C	ND(NEQ+1)        : VECTOR CONTAINING DIAGONAL ADDRESS
C	NBC(NLRB)        : NODE NUMBERS WITH LRB
C	BCLRB(NLRB,2)    : STIFFNESS & DAMPING OF LRB
C	NDOF             : NUMBER OF DEGREES OF FREEDOM(=3)
C	NLRB             : NUMBER OF ISOLATORS

C	OUTPUT
C	AC(NWK)          : DAMPING MATRIX

C	INDEX
C	NEQ              : NUMBER OF EQUATIONS
C	NT               : NUMBER OF TOTAL NODES
C	NWK              : NUMBER OF ELEMENTS OF TOTAL SYSTEM MATRIX
C	-----------------------------------------------------------------
CN      COMMON /IOUNIT/IN,IOUT,NSTIF
      COMMON /INOU/ ITI,ITO,ISO,NDATI,NPLOT,NKFAC,NELEM,
     1              IFPR(10),IFPL(10)
C
      DIMENSION AC(*),NRL(*),ND(*),NBC(*),BCLRB(NLRB,*)
C	-----------------------------------------------------------------
CMKIM 2001. 7. 14.
C	ASSEMBLE DAMPING MATRIX OF BASE ISOLATORS
      DO 50 I=1,NLRB
        IPOS=(NBC(I)-1)*NDOF+1
        IP=NRL(IPOS)
        IF(IP.LE.0) THEN
CN          WRITE(IOUT,1000) NBC(I)
          WRITE(ITO,1000) NBC(I)
		WRITE(ISO,1000) NBC(I)
          STOP
        ENDIF
        IP=ND(IP)
        IF(IP.GT.0) AC(IP)=AC(IP)+BCLRB(I,2)
   50 CONTINUE

      RETURN
 1000 FORMAT(//,1X,'PLEASE INPUT CHECK. BASE ISOLATOR CAN NOT BE
     &  ATTACHED AT FIXED B/C', I5)
      END
C
C	=======================================================================

      SUBROUTINE EFFSTIFB(AM,AC,AK,ND,DELT,ALPHA,BETA,NEQ,NWK,DDK,
	1				   TYP1,TYP2,TYP3,EFTF,TEMP)

      IMPLICIT REAL*8(A-H,O-Z)
      IMPLICIT INTEGER*4 (I-N)
	CHARACTER*4 TYP1,TYP2,TYP3,EFTF,TEMP
C	-----------------------------------------------------------------------
C	INPUT:
C	------
C	AM(NWK) : MASS MATRIX
C	AC(NWK) : DAMPING MATRIX
C	AK(NWK) : STIFFNESS MATRIX
C	ND(NEQ+1) : VECTOR CONTAINING ADRESSES OF DIAGONAL ELEMENTS OF STIFFNESS MATRIX
C	DELT : INCREMENTAL TIME
C	ALPHA : NEWMARK COEFFICIENT
C	BETA
C	NEQ : NUMBER OF EQUATIONS
C	NWK : NUMBER OF ELEMENTS OF STIFFNESS MATRIX

C	OUTPUT
C	AK(NWK) : [L]*[D]*[L]^T OF EFFECTIVE STIFFNESS MATRIX

C	AVERAGE ACCELERATION METHOD : UNCONDITIONALLY STABLE(RECOMMENDED)
C	ALPHA=1/4, BETA=1/2

C	LINEAR ACCELERATION METHOD : CONDITIONALLY STABLE
C	ALPHA=1/6, BETA=1/2
C	-----------------------------------------------------------------------
      COMMON /IOUNIT/IN,IOUT,NSTIF
      COMMON /INOU/ ITI,ITO,ISO,NDATI,NPLOT,NKFAC,NELEM,
     1              IFPR(10),IFPL(10)

      DIMENSION AM(1),AC(1),AK(1),ND(1),DDK(1)
c      DIMENSION AM(NWK),AC(NWK),AK(NWK),ND(NEQ+1) !7Nov2005
C	-----------------------------------------------------------------------
      IF(ALPHA.GT.0.25.AND.BETA.NE.0.5) THEN
        WRITE(*,1000) ALPHA,BETA
        STOP
      ENDIF

      A1=1./(ALPHA*DELT**2)
      A3=BETA/(ALPHA*DELT)

C	CALCULATE EFFECTIVE STIFFNESS MATRIX
C	DO 10 ITE=1,NWK
C	    AK(ITE)=A1*AM(ITE)+A3*AC(ITE)+AK(ITE)
C  10 CONTINUE
	CALL MDOPER(EFTF,TYP1,TYP2,1.0D0,A1,'ADD')
	CALL MDOPER(EFTF,EFTF,TYP3,1.0D0,A3,'ADD')


C	DECOMPOSE EFFECTIVE STIFFNESS MATRIX INTO [L]*[D]*[L]^T
C	ISH              : EIGENVALUE SHIFT INDEX(ISH=0:NOT USED,ISH=1:USED)

C	ISH=0
C	CALL DECOMP(AK,ND,NEQ,ISH,IOUT)
C	INDPD = 0
C	CALL COLSOL(ND,AK,DDK,DDK,1,INDPD,EFTF,TEMP)



      RETURN
 1000 FORMAT(//,1X,'INPUT ERROR IN NEWMARK COEFFICIENT',/
     &1X,'RECOMMENDED VALUES ALPHA = 0.15, BETA=0.5 BUT INPUT VALUES',/
     &1X,'ARE AS FOLLOWING',/
     &1X,'  ALPHA = ',F10.3/
     &1X,'  BETA  = ',F10.3)
      END
C
C	=======================================================================
      SUBROUTINE FORCEDYN(NEID,PELW,WHPOS,WHPOSINC,IDWHPOS,XI,
CMKIM 2001. 7. 13.
     &  FS,RS,RSN,AK,AC,AM,AMO,AKO,NRL,ND,AXLOAD,SS,NWHEEL,NUID,
CMKIM&  FS,RS,RSN,AK,AC,AM,AKO,NRL,ND,AXLOAD,SS,NWHEEL,NUID,
     &  TLENGTH,SCALE,NWK,NEQ,NDOF,NNBE,
     &  VEL,DELT,EXTDIS,ALPHA,BETA,IPRTST,PRTST,
     &  NPRTST,NT,DL0,PI0,IPATH)

      IMPLICIT REAL*8(A-H,O-Z)
      IMPLICIT INTEGER*4 (I-N)
C	-------------------------------------------------------------------------     
C	INPUT:
C	------
C	NEID(2,NELW) : NODE NUMBERS CORRESPONDING TO ELEMENT PATH WHERE WHEELS RUN
C	COOD(NT) : NODAL COORDINATE
C	WHPOS(NWHEEL) : WHEEL POSITION AT CURRENT TIME STEP
C	WHPOSINC(NWHEEL) : POSITION AT NEXT TIME STEP
C	IDWHPOS(NWHEEL) : ID NUMBER OF ELEMENT CORRESPONDING TO WHEEL POSITION
C	XI(NWHEEL): NATURAL COORDINATE OF WHEEL POSITION
C	FS(NEQ) : EQUIVALENT NODAL FORCE VECTOR OF AXLE LOAD APPLIED TO STRUCTURE
C	RS(NEQ,3) : (I)TH RESPONSE OF STRUCTURE[DIS, VEL, ACCE] 
C	RSN(NEQ,3) : (I+1)TH RESPONSE OF STRUCTURE
C	AK(NWK) : STIFFNESS MATRIX OF STRUCTURE
C	AC(NWK) : DAMPING MATRIX OF STRUCTURE
C	AM(NWK) : MASS MATRIX OF STRUCTURE
C	AMO(NWK) : ORIGINAL MASS MATRIX OF STRUCTURE
C	AKO(NWK) : ORIGINAL STIFFNESS MATRIX OF STRUCTURE
C	NRL(NDOF,NT) : EQUATION NUMBER OF STRUCTURE
C	ND(NEQ+1) : VECTOR CONTAINING ADDRESS OF DIAGONAL ELEMENTS OF STRUCTURE
C	AXLOAD(NWHEEL) : AXLE LOAD APPLIED TO STRUCTURE

C	SS(NEQ) : WORKING VECTOR


C	NWHEEL : NUMBER OF WHEELS
C	NUID : NUMBER OF ELEMENTS OF TRAIN PATH IN GENERAL, NUID=NEBEBR OR =NEBERA
C	TLENGTH : TOTAL LENGTH OF PATH WHERE WHEEL RUNS
C	SCALE : GRAVITY ACCELERATION
C	NWK : NUMBER OF ELEMENTS OF STIFFNESS MATRIX OF STRUCTURE
C	NEQ : NUMBER OF EQUATIONS OF STRUCTURE
C	NDOF : NUMBER OF DEGREES OF FREEDOM OF NODE
C	NNBE : NUMBER OF NODES MAKING A BEAM ELEMENT(=2)

C	VEL : VELOCITY(M/SEC) OF TRAIN
C	DELT : DELTA T(TIME INCREMENT)
C	EXTDIS : EXTRA DISTANCE

C	ALPHA : NEWMARK BETA COEFFICIENT
C	BETA

C	IPRTST(NPRTST,2) : NODES NUMBER OF STRUCTURE[NODE #, SPONSES
C	PRTST(NPRTST*2) : TEMPORARY STORAGE TO PRINT STRUCTURE RESPONSES
C	NPRTST : NUMBER OF NODES TO PRINT OF STRUCTURE

C	NT : NUMBER OF TOTAL NODES

C	INDEX
C	NSOLT : NUMBER OF TOTAL SOLUTION TIMES
C	---------------------------------------------------------------------------------
      COMMON /IOUNIT/IN,IOUT,NSTIF
      COMMON /INOU/ ITI,ITO,ISO,NDATI,NPLOT,NKFAC,NELEM,
     1              IFPR(10),IFPL(10)
      COMMON /MAXDM/AMXTR(100,2),AMXST(100,2)
C
      DIMENSION NEID(2,NELW),PELW(4,1),
     &  WHPOS(NWHEEL),WHPOSINC(NWHEEL),IDWHPOS(NWHEEL),XI(NWHEEL),
CMKIM 2001. 7. 13
     &  FS(NEQ),RS(NEQ,3),RSN(NEQ,3),AK(NWK),AC(NWK),AM(NWK),AMO(NWK),
     &  AKO(NWK),
CMKIM&  FS(NEQ),RS(NEQ,3),RSN(NEQ,3),AK(NWK),AC(NWK),AM(NWK),AKO(NWK),
     &  NRL(NDOF,NT),ND(NEQ+1),AXLOAD(NWHEEL),SS(NEQ),
     &  IPRTST(NPRTST,2),PRTST(NPRTST*2)
C	---------------------------------------------------------------------------------

      SOLT=(DABS(WHPOS(NWHEEL))+TLENGTH+EXTDIS)/VEL
      NSOLT=IDNINT(SOLT/DELT)
 
      DO 500 I=1,NWK
CMKIM 2001. 7. 13.
        AMO(I)=AM(I)
        AKO(I)=AK(I)
  500 CONTINUE

C	BEFORE DECOMP AK=ORIGINAL STIFFNESS MATRIX
C	AFTER DECOMP AK=DECOMPOSED STIFFNESS MATRIX
      ISH=0
      CALL DECOMP(AK,ND,NEQ,ISH,IOUT)
      
C ......................................................................
C .	ANALYSIS PROCESS AT ZERO STEP                                      .
C ......................................................................

      WRITE(*,1000)

C	IDENTIFY ELEMENT NUMBER CORRESPONDING TO WHEEL POSITION AT ZERO STEP
      CALL IDWHEEL(NELW,NEID,PELW,WHPOS,IDWHPOS,XI,NWHEEL)

C	INITIALIZE RESPONSE OF STRUCTURE AT ZERO STEP
      DO 60 J=1,3
        DO 60 K=1,NEQ
          RS(K,J)=0.0D0       
   60 CONTINUE

C	CALCULATE INTERACTION FORCE APPLIED TO STRUCTURE AT ZERO STEP
      CALL CALEAXLD(FS,IDWHPOS,NEID,COOD,XI,AXLOAD,NRL,NWHEEL,NEQ,
     &  NDOF,NUID,NNBE)


C	IN CASE OF FORCE RUNNING ON BRIDGE, CALCULATE TORSIONAL MOMENT DUE TO ECCENTRICITY
      IF(IPATH.EQ.1) THEN
        CALL CALETAXLD(FS,IDWHPOS,NEID,XI,AXLOAD,NRL,NWHEEL,NEQ,
     &    NDOF,NUID,NNBE,DL0,PI0)
      ENDIF


C	CALCULATE DISPLACEMENT OF STRUCTURE AT ZERO STEP
      CALL MULTDM(SS,AM,RS(1,3),ND,NEQ,NWK)
      DO 70 J=1,NEQ
        FS(J)=FS(J)-SS(J)
   70 CONTINUE

      CALL MULTDM(SS,AC,RS(1,2),ND,NEQ,NWK)
      DO 80 J=1,NEQ
        FS(J)=FS(J)-SS(J)
   80 CONTINUE

      CALL REDBAK(AK,FS,ND,NEQ)
      DO 81 J=1,NEQ
        RS(J,1)=FS(J)
   81 CONTINUE

       IPOS=1
      DO 855 I=1,NPRTST
        IPRT=NRL(IPRTST(I,2),IPRTST(I,1))
        PRTST(IPOS)=RS(IPRT,1)
        IPOS=IPOS+1
        PRTST(IPOS)=RS(IPRT,3)/SCALE
        IPOS=IPOS+1
  855 CONTINUE

      TIME=0.0D0
      IF(NPRTST.GT.0) THEN
        WRITE(27,8410) TIME,(PRTST(I),I=1,NPRTST*2)
      ENDIF

      DO 874 I=1,NPRTST*2
        AMXST(I,1)=PRTST(I)
        AMXST(I,2)=PRTST(I)
  874 CONTINUE
      
C	RESTORE ORIGINAL STIFFNESS MATRIX TO AK WHICH CONTAINS THE STIFFNESS MATRIX
C	DECOMPOSED IN THE SUBROUTINE DECOMP
      DO 135 I=1,NWK
        AK(I)=AKO(I)
  135 CONTINUE

CMKIM 2001. 7. 13.
C	BEFORE DECOMP AM=ORIGINAL MASS MATRIX
C	AFTER DECOMP AM=DECOMPOSED MASS MATRIX
      ISH=0
      CALL DECOMP(AM,ND,NEQ,ISH,IOUT)

CMKIM 2001. 7. 13.
C	CALCULATE EFFECTIVE STIFFNESS MATRIX OF SYSTEM
C	BEFORE EFFSTIF AK=ORIGINAL STIFFNESS MATRIX
C	AFTER EFFSTIF AK=DECOMPOSED EFFECTIVE STIFFNESS MATRIX
      CALL EFFSTIF(AMO,AC,AK,ND,DELT,ALPHA,BETA,NEQ,NWK)
CMKIM CALL EFFSTIF(AM,AC,AK,ND,DELT,ALPHA,BETA,NEQ,NWK)


C ......................................................................
C .	FOLLOWING STEP                                                     .
C ......................................................................
C      DO 140 ITE=1,NSOLT
      DO 140 ITE=3,NSOLT
        WRITE(*,3000) ITE,DFLOAT(ITE)/NSOLT*100.

C	CALCULATE (ITE+1)TH WHEEL POSITION 
        DO 175 J=1,NWHEEL
          WHPOSINC(J)=WHPOS(J)+ITE*DELT*VEL
  175   CONTINUE

C	IDENTIFY ELEMENT NUMBER CORRESPONDING TO WHEEL POSITION AT (ITE+1)TH STEP
        CALL IDWHEEL(NELW,NEID,PELW,WHPOSINC,IDWHPOS,XI,NWHEEL)
        
C	CALCULATE INTERACTION FORCE APPLIED TO STRUCTURE
        CALL CALEAXLD(FS,IDWHPOS,NEID,COOD,XI,AXLOAD,NRL,NWHEEL,NEQ,
     &    NDOF,NUID,NNBE)


C	IN CASE OF FORCE RUNNING ON BRIDGE, CALCULATE TORSIONAL MOMENT DUE TO ECCENTRICITY
        IF(IPATH.EQ.1) THEN
          CALL CALETAXLD(FS,IDWHPOS,NEID,XI,AXLOAD,NRL,NWHEEL,NEQ,
     &      NDOF,NUID,NNBE,DL0,PI0)
        ENDIF


C	ANALYZE STRUCTURE USING NEWMARK BETA METHOD
CMKIM 2001. 7. 13.
C	AMO : ORIGINAL MASS MATRIX
C	AC : ORIGINAL DAMPING MATRIX
C	AK : DECOMPOSED EFFECTIVE STIFFNESS MATRIX
C	AM : DECOMPOSED MASS MATRIX
C	AKO : ORIGINAL STIFFNESS MATRIX
cN13Oct05   CALL NMSOL(AMO,AC,AK,RS,RSN,FS,ND,DELT,ALPHA,BETA,NEQ,NWK)
        CALL NMSOL(AMO,AC,AK,RS,RSN,FS,ND,DELT,ALPHA,BETA,NEQ,NWK,NWK)

cN13Oct05   CALL CALACC(FS,RSN,AM,AC,AKO,SS,ND,NEQ,NWK)
        CALL CALACC(FS,RSN,AM,AC,AKO,SS,ND,NEQ,NWK,NWK)
CMKIM   CALL NMSOL(AM,AC,AK,RS,RSN,FS,ND,DELT,ALPHA,BETA,NEQ,NWK)
    
        DO 167 K=1,3
          DO 167 L=1,NEQ
            RS(L,K)=RSN(L,K)
  167   CONTINUE
 
        IPOS=1
        DO 858 K=1,NPRTST
          IPRT=NRL(IPRTST(K,2),IPRTST(K,1))
          PRTST(IPOS)=RS(IPRT,1)
          IPOS=IPOS+1
          PRTST(IPOS)=RS(IPRT,3)/SCALE
          IPOS=IPOS+1
  858   CONTINUE

        TIME=ITE*DELT
        IF(NPRTST.GT.0) THEN
          WRITE(27,8410) TIME,(PRTST(K),K=1,NPRTST*2)
        ENDIF

        DO 878 K=1,NPRTST*2
          IF(PRTST(K).GT.AMXST(K,1)) AMXST(K,1)=PRTST(K)
          IF(PRTST(K).LT.AMXST(K,2)) AMXST(K,2)=PRTST(K)
  878   CONTINUE

  140 CONTINUE

      DO 740 I=1,2
        WRITE(57,8420) (AMXST(J,I),J=1,NPRTST*2)
  740 CONTINUE
      WRITE(57,8420) (MAX(ABS(AMXST(J,1)),ABS(AMXST(J,2))),J=1,NPRTST*2)
 8420 FORMAT(100E15.7)  

      RETURN
 1000 FORMAT(1X,'CURRENT TIME STEP =       0     0.00%')
 3000 FORMAT(1X,'CURRENT TIME STEP = ',I8,3X,F6.2,'%')
 8410 FORMAT(F10.5,100E15.7)
      END
C
C	=======================================================================
      SUBROUTINE FORCESTA(NEID,COOD,WHPOS,WHPOSINC,IDWHPOS,XI,
CMKIM 2001. 7. 13.
     &  FS,RS,RSN,AK,AMO,AKO,NRL,ND,AXLOAD,NWHEEL,NUID,
CMKIM&  FS,RS,RSN,AK,AKO,NRL,ND,AXLOAD,NWHEEL,NUID,
     &  TLENGTH,SCALE,NWK,NEQ,NDOF,NNBE,
     &  VEL,DELT,EXTDIS,IPRTST,PRTST,
     &  NPRTST,NT,DL0,PI0,IPATH)

      IMPLICIT REAL*8(A-H,O-Z)
      IMPLICIT INTEGER*4 (I-N)
C	-----------------------------------------------------------------------
C	INPUT:
C	-------
C	NEID(2,NELW) : NODE NUMBERS CORRESPONDING TO ELEMENT PATH WHERE WHEELS RUN
C	COOD(NT) : NODAL COORDINATE
C	WHPOS(NWHEEL) : WHEEL POSITION AT CURRENT TIME STEP
C	WHPOSINC(NWHEEL) : POSITION AT NEXT TIME STEP
C	IDWHPOS(NWHEEL) : ID NUMBER OF ELEMENT CORRESPONDING TO WHEEL POSITION
C	XI(NWHEEL): NATURAL COORDINATE OF WHEEL POSITION
C	FS(NEQ) : EQUIVALENT NODAL FORCE VECTOR OF AXLE LOAD APPLIED TO STRUCTURE
C	RS(NEQ,3) : (I)TH RESPONSE OF STRUCTURE[DIS, VEL, ACCE] 
C	RSN(NEQ,3) : (I+1)TH RESPONSE OF STRUCTURE
C	AK(NWK) : STIFFNESS MATRIX OF STRUCTURE
C	AMO(NWK) : ORIGINAL MASS MATRIX OF STRUCTURE
C	AKO(NWK) : ORIGINAL STIFFNESS MATRIX OF STRUCTURE
C	NRL(NDOF,NT) : EQUATION NUMBER OF STRUCTURE
C	ND(NEQ+1) : VECTOR CONTAINING ADDRESS OF DIAGONAL ELEMENTS OF STRUCTURE
C	AXLOAD(NWHEEL) : AXLE LOAD APPLIED TO STRUCTURE

C	NWHEEL : NUMBER OF WHEELS
C	NUID : NUMBER OF ELEMENTS OF TRAIN PATH IN GENERAL, NUID=NEBEBR OR =NEBERA
C	TLENGTH : TOTAL LENGTH OF PATH WHERE WHEEL RUNS
C	SCALE : GRAVITY ACCELERATION
C	NWK : NUMBER OF ELEMENTS OF STIFFNESS MATRIX OF STRUCTURE
C	NEQ : NUMBER OF EQUATIONS OF STRUCTURE
C	NDOF : NUMBER OF DEGREES OF FREEDOM OF NODE
C	NNBE : NUMBER OF NODES MAKING A BEAM ELEMENT(=2)

C	VEL  = VELOCITY(M/SEC) OF TRAIN
C	DELT = DELTA T(TIME INCREMENT)
C	EXTDIS = EXTRA DISTANCE
C	IPRTST(NPRTST,2) = NODES NUMBER OF STRUCTURE[NODE #, SPONSES
C	PRTST(NPRTST*2)  = TEMPORARY STORAGE TO PRINT STRUCTURE RESPONSES
C	NPRTST : NUMBER OF NODES TO PRINT OF STRUCTURE

C	NT = NUMBER OF TOTAL NODES

C	INDEX
C	NSOLT = NUMBER OF TOTAL SOLUTION TIMES
C	-----------------------------------------------------------------------	
      COMMON /IOUNIT/IN,IOUT,NSTIF
      COMMON /INOU/ ITI,ITO,ISO,NDATI,NPLOT,NKFAC,NELEM,
     1              IFPR(10),IFPL(10)
      COMMON /MAXDM/AMXTR(100,2),AMXST(100,2)
C	-----------------------------------------------------------------------
      DIMENSION NEID(2,NELW),COOD(NT),
     &  WHPOS(NWHEEL),WHPOSINC(NWHEEL),IDWHPOS(NWHEEL),XI(NWHEEL),
CMKIM 2001. 7. 13.
     &  FS(NEQ),RS(NEQ,3),RSN(NEQ,3),AK(NWK),AMO(NWK),AKO(NWK),
CMKIM&  FS(NEQ),RS(NEQ,3),RSN(NEQ,3),AK(NWK),AKO(NWK),
     &  NRL(NDOF,NT),ND(NEQ+1),AXLOAD(NWHEEL),
     &  IPRTST(NPRTST,2),PRTST(NPRTST*2)
     
      SOLT=(DABS(WHPOS(NWHEEL))+TLENGTH+EXTDIS)/VEL
      NSOLT=IDNINT(SOLT/DELT)
 
      DO 500 I=1,NWK
        AKO(I)=AK(I)
  500 CONTINUE

      ISH=0
      CALL DECOMP(AK,ND,NEQ,ISH,IOUT)

      DO 142 I=1,3
        DO 142 J=1,NEQ
          RS(J,I)=0.0D0
          RSN(J,I)=0.0D0
  142 CONTINUE
  
      DO 874 I=1,NPRTST*2
        AMXST(I,1)=0.0
        AMXST(I,2)=0.0
  874 CONTINUE
C ......................................................................
C .	FOLLOWING STEP                                                     .
C ......................................................................

      DO 140 ITE=0,NSOLT
        WRITE(*,3000) ITE,DFLOAT(ITE)/NSOLT*100.

C	CALCULATE (ITE+1)TH WHEEL POSITION 
        DO 175 J=1,NWHEEL
          WHPOSINC(J)=WHPOS(J)+ITE*DELT*VEL
  175   CONTINUE

C	IDENTIFY ELEMENT NUMBER CORRESPONDING TO WHEEL POSITION AT (ITE+1)TH STEP
        CALL IDWHEEL(NELW,NEID,PELW,WHPOSINC,IDWHPOS,XI,NWHEEL)
        
C	CALCULATE INTERACTION FORCE APPLIED TO STRUCTURE AT ZERO STEP
        CALL CALEAXLD(FS,IDWHPOS,NEID,COOD,XI,AXLOAD,NRL,NWHEEL,NEQ,
     &    NDOF,NUID,NNBE)


C	IN CASE OF FORCE RUNNING ON BRIDGE, CALCULATE TORSIONAL MOMENT DUE TO ECCENTRICITY
        IF(IPATH.EQ.1) THEN
          CALL CALETAXLD(FS,IDWHPOS,NEID,XI,AXLOAD,NRL,NWHEEL,NEQ,
     &      NDOF,NUID,NNBE,DL0,PI0)
        ENDIF


C	ANALYZE STRUCTURE
        CALL REDBAK(AK,FS,ND,NEQ)

        DO 154 J=1,NEQ
          RSN(J,1)=FS(J)
  154   CONTINUE
    
        DO 167 L=1,NEQ
          RS(L,1)=RSN(L,1)
  167   CONTINUE
 
        IPOS=1
        DO 858 K=1,NPRTST
          IPRT=NRL(IPRTST(K,2),IPRTST(K,1))
          PRTST(IPOS)=RS(IPRT,1)
          IPOS=IPOS+1
          PRTST(IPOS)=RS(IPRT,3)/SCALE
          IPOS=IPOS+1
  858   CONTINUE

        TIME=ITE*DELT
        IF(NPRTST.GT.0) THEN
          WRITE(27,8410) TIME,(PRTST(K),K=1,NPRTST*2)
        ENDIF

        DO 878 K=1,NPRTST*2
          IF(PRTST(K).GT.AMXST(K,1)) AMXST(K,1)=PRTST(K)
          IF(PRTST(K).LT.AMXST(K,2)) AMXST(K,2)=PRTST(K)
  878   CONTINUE

  140 CONTINUE

      DO 740 I=1,2
        WRITE(57,8420) (AMXST(J,I),J=1,NPRTST*2)
  740 CONTINUE
      WRITE(57,8420) (MAX(ABS(AMXST(J,1)),ABS(AMXST(J,2))),J=1,NPRTST*2)
 8420 FORMAT(100E15.7)  

      RETURN
 3000 FORMAT(1X,'CURRENT TIME STEP = ',I8,3X,F6.2,'%')
 8410 FORMAT(F10.5,100E15.7)
      END
C
C	=======================================================================
      SUBROUTINE FORCEMD(NEID,COOD,WHPOS,WHPOSINC,IDWHPOS,XI,FS,
CMKIM 2001. 7. 13
     &  RS,RSN,AK,AC,AM,AMO,AKO,NRL,ND,SS,AXLOAD,NWHEEL,NUID,TLENGTH,
     &  SCALE,
CMKIM&  RS,RSN,AK,AC,AM,AKO,NRL,ND,SS,AXLOAD,NWHEEL,NUID,TLENGTH,SCALE,
     &  NWK,NEQ,NDOF,NNBE,VEL,DELT,EXTDIS,ALPHA,BETA,IPRTST,PRTST,
     &  NPRTST,NT,IANA,DL0,PI0,IPATH)

      IMPLICIT REAL*8(A-H,O-Z)
      IMPLICIT INTEGER*4 (I-N)
C	-----------------------------------------------------------------------
C	INPUT:
C	-------
C	NEID(2,NELW) : NODE NUMBERS CORRESPONDING TO ELEMENT PATH WHERE WHEELS RUN
C	COOD(NT) : NODAL COORDINATE
C	WHPOS(NWHEEL) : WHEEL POSITION AT CURRENT TIME STEP
C	WHPOSINC(NWHEEL) : POSITION AT NEXT TIME STEP
C	IDWHPOS(NWHEEL) : ID NUMBER OF ELEMENT CORRESPONDING TO WHEEL POSITION
C	XI(NWHEEL): NATURAL COORDINATE OF WHEEL POSITION
C	FS(NEQ) : EQUIVALENT NODAL FORCE VECTOR OF FSS APPLIED TO STRUCTURE
C	RS(NEQ,3) : (I)TH RESPONSE OF STRUCTURE[DIS, VEL, ACCE] 
C	RSN(NEQ,3) : (I+1)TH RESPONSE OF STRUCTURE
C	AK(NWK) : STIFFNESS MATRIX OF STRUCTURE
C	AC(NWK) : DAMPING MATRIX OF STRUCTURE
C	AM(NWK) : STIFFNESS MATRIX OF STRUCTURE
C	AMO(NWK) : ORIGINAL MASS MATRIX OF STRUCTURE
C	AKO(NWK) : ORIGINAL MASS MATRIX OF STRUCTURE
C	NRL(NDOF,NT) : EQUATION NUMBER OF STRUCTURE
C	ND(NEQ+1) : VECTOR CONTAINING ADDRESS OF DIAGONAL ELEMENTS OF STRUCTURE

C	SS(NEQ) : WORKING VECTOR

C	AXLOAD(NWHEEL) : AXLOAD LOAD

C	NWHEEL : NUMBER OF WHEELS
C	NUID : NUMBER OF ELEMENTS OF TRAIN PATH IN GENERAL, NUID=NEBEBR OR =NEBERA
C	TLENGTH : TOTAL LENGTH OF PATH WHERE WHEEL RUNS
C	SCALE : GRAVITY ACCELERATION
C	NWK : NUMBER OF ELEMENTS OF STIFFNESS MATRIX OF STRUCTURE
C	NEQ : NUMBER OF EQUATIONS OF STRUCTURE
C	NDOF : NUMBER OF DEGREES OF FREEDOM OF NODE
C	NNBE : NUMBER OF NODES MAKING A BEAM ELEMENT(=2)

C	VEL : VELOCITY(M/SEC) OF TRAIN
C	DELT : DELTA T(TIME INCREMENT)
C	EXTDIS : EXTRA DISTANCE

C	ALPHA : NEWMARK BETA COEFFICIENT
C	BETA

C	IPRTST(NPRTST,2) : NODES NUMBER OF STRUCTURE[NODE #, DOF #]
C	PRTST(NPRTST*2) : TEMPORARY STORAGE TO PRINT STRUCTURE RESPONSES
C	NPRTST : NUMBER OF NODES TO PRINT OF STRUCTURE

C	IANA : ANALYSIS TYPE
C	.EQ.1 MOVING MASS DYNAMIC ANALYSIS FOR INPUTED TRAIN
C	.EQ.2 MOVING FORCE DYNAMIC ANALYSIS FOR INPUTED TRAIN
C	.EQ.3 STATIC ANALYSIS FOR INPUTED TRAIN
C	.EQ.4 MOVING FORCE DYNAMIC ANALYSIS FOR INPUTED AXLE LOAD
C	.EQ.5 STATIC ANALYSIS FOR INPUTED AXLE LOAD

C	NT : NUMBER OF TOTAL NODES

C	INDEX
C	NSOLT : NUMBER OF TOTAL SOLUTION TIMES 
C	----------------------------------------------------------------------
C      COMMON /IOUNIT/IN,IOUT,NSTIF
      COMMON /INOU/ ITI,ITO,ISO,NDATI,NPLOT,NKFAC,NELEM,
     1              IFPR(10),IFPL(10)
C    
      DIMENSION NEID(2,NELW),COOD(NT),WHPOS(NWHEEL),WHPOSINC(NWHEEL),
     &  IDWHPOS(NWHEEL),XI(NWHEEL),FS(NEQ),RS(NEQ,3),RSN(NEQ,3),AK(NWK),
CMKIM 2001. 7. 13
     &  AC(NWK),AM(NWK),AMO(NWK),AKO(NWK),NRL(NDOF,NT),ND(NEQ+1),
     &  SS(NEQ),
CMKIM&  AC(NWK),AM(NWK),AKO(NWK),NRL(NDOF,NT),ND(NEQ+1),SS(NEQ),
     &  AXLOAD(NWHEEL),IPRTST(NPRTST,2),PRTST(NPRTST*2)
C	-----------------------------------------------------------------     
C     CALL PRINTOUT(AK,AC,AM,ND,NEQ)

C	READ NODES NUMBER OF STRUCTURE IPRTST(NPRTST,2)[NODE #, DOF #]:
C	------------------------------------------------------------
      IF(NPRTST.GT.0) THEN
	  READ(ITI,*)
        DO 1128 I=1,NPRTST
          READ(ITI,1118) (IPRTST(I,J),J=1,2)
 1128   CONTINUE
        WRITE(ISO,2228)
        DO 2238 I=1,NPRTST
          WRITE(ISO,2248) (IPRTST(I,J),J=1,2)

 2238   CONTINUE
      ENDIF

CN      IF(NPRTST.GT.0) THEN
CN        DO 1128 I=1,NPRTST
CN          READ(IN,1118) (IPRTST(I,J),J=1,2)
CN 1128   CONTINUE
CN        WRITE(IOUT,2228)
CN        DO 2238 I=1,NPRTST
CN          WRITE(IOUT,2248) (IPRTST(I,J),J=1,2)
CN 2238   CONTINUE
CN      ENDIF
      
      IF(IANA.EQ.4) THEN
        CALL FORCEDYN(NEID,COOD,WHPOS,WHPOSINC,IDWHPOS,XI,
CMKIM 2001. 7. 13
     &    FS,RS,RSN,AK,AC,AM,AMO,AKO,NRL,ND,AXLOAD,SS,NWHEEL,NUID,
CMKIM&    FS,RS,RSN,AK,AC,AM,AKO,NRL,ND,AXLOAD,SS,NWHEEL,NUID,
     &    TLENGTH,SCALE,NWK,NEQ,NDOF,NNBE,
     &    VEL,DELT,EXTDIS,ALPHA,BETA,IPRTST,PRTST,
     &    NPRTST,NT,DL0,PI0,IPATH)
      ENDIF
      
      IF(IANA.EQ.5) THEN
        CALL FORCESTA(NEID,COOD,WHPOS,WHPOSINC,IDWHPOS,XI,
CMKIM 2001. 7. 13
     &    FS,RS,RSN,AK,AMO,AKO,NRL,ND,AXLOAD,NWHEEL,NUID,
CMKIM&    FS,RS,RSN,AK,AKO,NRL,ND,AXLOAD,NWHEEL,NUID,
     &    TLENGTH,SCALE,NWK,NEQ,NDOF,NNBE,
     &    VEL,DELT,EXTDIS,IPRTST,PRTST,
     &    NPRTST,NT,DL0,PI0,IPATH)
      ENDIF
      
      RETURN
 1118 FORMAT(5I5)
 2228 FORMAT(//,1X,'PRINTED NODE NUMBER AND ITS DOF BRIDGE',/
     &'  NUM  DOF')
 2248 FORMAT(10I5)
      END
C
C	=======================================================================

      SUBROUTINE JACOBI1(A,B,X,EIGV,D,N,NWA,RTOL,NSMAX,IFPR,IOUT)
      IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER*4 (I-N)
C	-----------------------------------------------------------------------                                                            
C     PROGRAM  TO SOLVE THE GENERALIZED EIGENPROGRAM USING THE GENERALIZED 
C			 JACOBI ITERATION                            
C	-----------------------------------------------------------------------    
C     DIMENSION A(NWA),B(NWA),X(N,N),EIGV(N),D(N)
      DIMENSION A(*),B(*),X(N,*),EIGV(*),D(*)
C
C     INITIALIZE EIGENVALUE AND EIGENVECTOR MATRICES
C
      N1=N+1
      II=1
      DO 10 I=1,N
      IF(A(II).GT.0.D0.AND.B(II).GT.0.D0) GO TO 4
CN      IF(A(II).GT.0.D0.OR.B(II).GT.0.D0) GO TO 4
      WRITE(IOUT,2020) II,A(II),B(II)
      STOP
    4 D(I)=A(II)/B(II)
      EIGV(I)=D(I)
   10 II=II+N1-I
      DO 30 I=1,N
      DO 20 J=1,N
   20 X(I,J)=0.
   30 X(I,I)=1.
      IF(N.EQ.1) RETURN
C
C     INITIALIZE SWEEP COUNTER AND BEGIN ITERATION
C
      NSWEEP=0
      NR=N-1
   40 NSWEEP=NSWEEP+1
      IF(IFPR.EQ.1) WRITE(IOUT,2000) NSWEEP
C
C     CHECK IF PRESENT OFF-DIAGONAL ELEMENT IS LARGE ENOUGH TO
C     REQUIRE ZEROING 
C
      EPS=(.01**NSWEEP)**2
      DO 210 J=1,NR
      JP1=J+1
      JM1=J-1
      LJK=JM1*N-JM1*J/2
      JJ=LJK+J
      DO 210 K=JP1,N
      KP1=K+1
      KM1=K-1
      JK=LJK+K
      KK=KM1*N-KM1*K/2+K
      EPTOLA=(A(JK)*A(JK))/(A(JJ)*A(KK))
      EPTOLB=(B(JK)*B(JK))/(B(JJ)*B(KK))
      IF((EPTOLA.LT.EPS).AND.(EPTOLB.LT.EPS)) GO TO 210
C
C     IF ZEROING IS REQUIRED , CALCULATE THE ROTATION MATRIX
C
C     ELEMENTS CA AND CG.
      AKK=A(KK)*B(JK)-B(KK)*A(JK)
      AJJ=A(JJ)*B(JK)-B(JJ)*A(JK)
      AB=A(JJ)*B(KK)-A(KK)*B(JJ)
      CHECK=(AB*AB+4.*AKK*AJJ)/4.
      IF(CHECK) 50,60,60
   50 WRITE(IOUT,2020)
      STOP
   60 SQCH=DSQRT(CHECK)
      D1=AB/2.+SQCH
      D2=AB/2.-SQCH
      DEN=D1
      IF(DABS(D2).GT.DABS(D1)) DEN=D2
      IF(DEN) 80,70,80
   70 CA=0.
      CG=-A(JK)/A(KK)
      GO TO 90
   80 CA=AKK/DEN
      CG=-AJJ/DEN
C
C     PERFORM THE GENERALIZED ROTATION TO ZERO THE PRESENT
C     OFF-DIAGONAL ELEMENT
   90 IF(N-2)100,190,100
  100 IF(JM1-1)130,110,110
  110 DO 120 I=1,JM1
      IM1=I-1
      IJ=IM1*N-IM1*I/2+J
      IK=IM1*N-IM1*I/2+K
      AJ=A(IJ)
      BJ=B(IJ)
      AK=A(IK)
      BK=B(IK)
      A(IJ)=AJ+CG*AK
      B(IJ)=BJ+CG*BK
      A(IK)=AK+CA*AJ
  120 B(IK)=BK+CA*BJ
  130 IF(KP1-N)140,140,160
  140 LJI=JM1*N-JM1*J/2
      LKI=KM1*N-KM1*K/2
      DO 150 I=KP1,N
      JI=LJI+I
      KI=LKI+I
      AJ=A(JI)
      BJ=B(JI)
      AK=A(KI)
      BK=B(KI)
      A(JI)=AJ+CG*AK
      B(JI)=BJ+CG*BK
      A(KI)=AK+CA*AJ
  150 B(KI)=BK+CA*BJ
  160 IF(JP1-KM1) 170,170,190
  170 LJI=JM1*N-JM1*J/2
      DO 180 I=JP1,KM1
      JI=LJI+I
      IM1=I-1
      IK=IM1*N-IM1*I/2+K
      AJ=A(JI)
      BJ=B(JI)
      AK=A(IK)
      BK=B(IK)
      A(JI)=AJ+CG*AK
      B(JI)=BJ+CG*BK
      A(IK)=AK+CA*AJ
  180 B(IK)=BK+CA*BJ
  190 AK=A(KK)
      BK=B(KK)
      A(KK)=AK+2.*CA*A(JK)+CA*CA*A(JJ)
      B(KK)=BK+2.*CA*B(JK)+CA*CA*B(JJ)
      A(JJ)=A(JJ)+2.*CG*A(JK)+CG*CG*AK
      B(JJ)=B(JJ)+2.*CG*B(JK)+CG*CG*BK
      A(JK)=0.
      B(JK)=0.
C
C	UPDATE THE EIGENVECTOR MATRIX AFTER EACH ROTATION
C
      DO 200 I=1,N
      XJ=X(I,J)
      XK=X(I,K)
      X(I,J)=XJ+CG*XK
  200 X(I,K)=XK+CA*XJ
  210 CONTINUE
C
C	UPDATE THE EIGENVALUES AFTER EACH SWEEP
C
      II=1
      DO 220 I=1,N
      IF(A(II).GT.0.D0.AND.B(II).GT.0.D0) GO TO 215
CN      IF(A(II).GT.0.D0.OR.B(II).GT.0.D0) GO TO 215
      WRITE(IOUT,2020)II,A(II),B(II)
      STOP
  215 EIGV(I)=A(II)/B(II)
  220 II=II+N1-I
      IF(IFPR.EQ.0) GO TO 230
      WRITE(IOUT,2030)
      WRITE(IOUT,2010)(EIGV(I),I=1,N)
C	CHECK FOR CONVERGENCE
  230 DO 240 I=1,N
      TOL=RTOL*D(I)
      DIF=DABS(EIGV(I)-D(I))
      IF(DIF.GT.TOL) GO TO 280
  240 CONTINUE
C
C     CHECK ALL OFF-DIAGONAL ELEMENTS TO SEE IF ANOTHER SWEEP IS
C        REQUIRED
      EPS=RTOL**2
      DO 250 J=1,NR
      JM1=J-1
      JP1=J+1
      LJK=JM1*N-JM1*J/2
      JJ=LJK+J
      DO 250 K=JP1,N
      KM1=K-1
      JK=LJK+K
      KK=KM1*N-KM1*K/2+K
      EPSA=(A(JK)*A(JK))/(A(JJ)*A(KK))
      EPSB=(B(JK)*B(JK))/(B(JJ)*B(KK))
      IF((EPSA.LT.EPS).AND.(EPSB.LT.EPS)) GO TO 250
      GO TO 280
  250 CONTINUE
C
C	FILL OUT BOTTOM TRIANGLE OF RESULTANT MATRICES AND
C         SCALE EIGENVECTORS
  255 II=1
      DO 275 I=1,N
      BB=DSQRT(B(II))
      DO 270 K=1,N
  270 X(K,I)=X(K,I)/BB
  275 II=II+N1-I
      RETURN
C
C	UPDATE D MATRIX AND START NEW SWEEP,IF ALLOWED
C
  280 DO 290 I=1,N
  290 D(I)=EIGV(I)
      IF(NSWEEP.LT.NSMAX) GO TO 40
      GO TO 255
 2000 FORMAT(/1X,'SWEEP NUMBER IN  *JACOBI* =',I4)
 2010 FORMAT(1X,6E20.12)
 2020 FORMAT(/1X,'*** ERROR SOLUTION STOP'/1X,'MATRICES NOT  
     &  POSITIVE DEFINITE'/1X,'II=',I4,5X,'A(II)=',
     &  E20.12,5X,'B(II)=',E20.12)
 2030 FORMAT(/1X,'CURRENT EIGENVALUES IN *JACOBI* ARE',/)
      END
C
C	=======================================================================
      SUBROUTINE MAKENC(NRL,LNCONEC,NC,NE,NN,NDOF,NEQ)     
      IMPLICIT REAL*8(A-H,O-Z)
      IMPLICIT INTEGER*4 (I-N)
C	-----------------------------------------------------------
C	PROGRAM TO COMPUTE COLUMN HEIGHT INCLUDING DIAGONAL ELEMENT
C	-----------------------------------------------------------
C	INPUT:
C	------
C	NRL(NTD)    = EQUATION NUMBER(=NDOF*NT)
C	LNCONEC(NE,NN) = ELEMENT CONNECTIVITY
C	NE          = NUMBER OF ELEMENTS
C	NN          = NUMBER OF NODES MODELLING AN ELEMENT
C	NDOF        = DEGREES OF FREEDOM OF NODE(=3)
C	NEQ         = NUMBER OF EQUATIONS, MAX COLUMN HEIGHT OF THE SYSTEM
C
C	OUTPUT:
C	-------
C	NC(NEQ)     = COLUMN HEIGHT INCLUDING DIAGONAL ELEMENT
C
C	INDEX
C	ID(12)      = WORKING VECTOR TO MAKE NC
C	NTD         = NUMBER OF TOTAL DEGREES OF FREEDOM
C	NT          = NUMBER OF TOTAL NODES
C	---------------------------------------------------------
      DIMENSION NRL(*),LNCONEC(NE,*),NC(*)
      DIMENSION ID(12)
C	---------------------------------------------------------
      DO 20 INE=1,NE
        DO 30 INN=1,NN
          DO 40 IDOF=1,NDOF
            IDNUM=(INN-1)*NDOF+IDOF
            IPOS=(LNCONEC(INE,INN)-1)*NDOF+IDOF
            ID(IDNUM)=NRL(IPOS)
   40     CONTINUE
   30   CONTINUE
   
        N1=NEQ
        DO 50 IEOF=1,NN*NDOF
          K=ID(IEOF)
          IF(K.EQ.0) GOTO 50
          IF(K.LT.N1) N1=K
   50   CONTINUE
   
        DO 60 IEOF=1,NN*NDOF
          K=ID(IEOF)
          IF(K.EQ.0) GOTO 60
          N2=K-N1+1
          IF(NC(K).LT.N2) NC(K)=N2
   60   CONTINUE
   20 CONTINUE

      RETURN
      END
C
C	=======================================================================
      SUBROUTINE MAKEND(NC,ND,NEQ,NWK)
      IMPLICIT REAL*8(A-H,O-Z)
      IMPLICIT INTEGER*4 (I-N)
C	-----------------------------------------------------------
C	PROGRAM TO COMPUTE:
C		+ VECTOR CONTAINING DIAGONAL ELEMENT NUMBER
C		+ NUMBER OF ELEMENTS IN SYSTEM MATRIX
C	-----------------------------------------------------------
C	INPUT
C	NC(NEQ)     = COLUMN HEIGHT
C	NEQ         = NUMBER OF EQUATIONS

C	OUTPUT
C	ND(NEQ+1)   = VECTOR CONTAINING DIAGONAL ELEMENT NUMBER
C	NWK         = NUMBER OF ELEMENTS IN SYSTEM MATRIX
C	-----------------------------------------------------------
CN	DIMENSION NC(*),ND(*)
      DIMENSION NC(*),ND(NEQ+1)
C
      ND(1)=1
      DO 130 INEQ=1,NEQ
        ND(INEQ+1)=ND(INEQ)+NC(INEQ)
  130 CONTINUE

      NWK=ND(NEQ+1)-1

      RETURN
      END
C
C	=======================================================================
      SUBROUTINE MAKENEQ(NRL,NNBR,NT,NDOF,NEQ,NEQBR)
      IMPLICIT REAL*8(A-H,O-Z)
      IMPLICIT INTEGER*4 (I-N)
C	----------------------------------------------------------
C	INPUT
C	NRL(NDOF*NT) = BOUNDARY CONDITION(0:FREE,1:FIX)
C	NNBR         = NUMBER OF NODES MODELLING BRIDGE
C	NT           = NUMBER OF TOTAL NODES
C	NDOF         = NUMBER OF DEGREES OF FREEDOM OF A NODE

C	OUTPUT
C	NRL(NDOF*NT) = EQUATION NUMBER(0:FIXED DEGREE OF FREEDOM)
C	NEQ          = NUMBER OF EQUATIONS OF TOTAL SYSTEM
C	NEQBR        = NUMBER OF EQUATIONS OF BRIDGE

C	INDEX
C	NTD : NUMBER OF TOTAL DEGREES OF FREEDOM(=NT*NDOF)
C	----------------------------------------------------------
      COMMON /INOU/ ITI,ITO,ISO,NDATI,NPLOT,NKFAC,NELEM,
     1              IFPR(10),IFPL(10)
      DIMENSION NRL(*)
C	----------------------------------------------------------
      NEQ=0
      NEQBR=0
      
      NTD=NT*NDOF
      NTDBR=NNBR*NDOF

      DO 10 I=1,NTD
        IF(NRL(I).EQ.0) THEN
          NEQ=NEQ+1
          NRL(I)=NEQ
          IF(I.LE.NTDBR) NEQBR=NEQ
        ELSE
          NRL(I)=0
        ENDIF
   10 CONTINUE

      WRITE(ISO,1000) NEQ,NEQBR
      WRITE(ISO,2000)
      DO 20 I=1,NT
        IPOS=(I-1)*NDOF
        WRITE(ISO,3000) (NRL(JPOS),JPOS=IPOS+1,IPOS+NDOF)
   20 CONTINUE

      RETURN
 1000 FORMAT(//,
     &1X,'NUMBER OF EQUATIONS(NEQ)                               = ',I5/
     &1X,'NUMBER OF EQUATIONS OF BRIDGE(NEQBR)                   = ',I5)
 2000 FORMAT(//,1X,'EQUATION NUMBER')
 3000 FORMAT(10I5)
      END
C
C	=======================================================================
C      SUBROUTINE NMSOL(AM,AC,AKE,R,RN,FN,ND,DELT,ALPHA,BETA,NEQ,NWK)
C	 Added NWM 13Oct0025 by NguyenDV to for lumped mass matrix
      SUBROUTINE NMSOLB(AM,AC,AKE,R,RN,FN,ND,DELT,ALPHA,BETA,NEQ,NWM,
	1				  NWK,DDK,EFTF,MASS,DAMP)
      IMPLICIT REAL*8(A-H,O-Z)
      IMPLICIT INTEGER*4 (I-N)
	CHARACTER*4 EFTF,MASS,DAMP
C	----------------------------------------------------------------------
C	INPUT
C	------
C	AM(NWK)          : MASS MATRIX
C	AC(NWK)          : DAMPING MATRIX
C	AKE(NWK)         : [L]*[D]*[L]^T OF EFFECTIVE STIFFNESS MATRIX
C	R(NEQ,3)         : (I)TH RESPONCE[DIS,VEL,ACCE]
C	FN(NEQ)          : (I+1)TH EXTERNAL FORCE
C	ND(NEQ+1)        : VECTOR CONTAINING ADDRESSES OF DIAGONAL ELEMENTS
C	DELT             : TIME INCREMENT
C	ALPHA            : NEWMARK COEFFICIENT
C	BETA     
C	NEQ              : NUMBER OF EQUATIONS
C	NWK              : NUMBER OF ELEMENTS OF STIFFNESS MATRIX
C	NWM              : NUMBER OF ELEMENTS OF MASS MATRIX
C					   = NWK FOR CONSISTENT MASS MATRIX
C					   = NEQ FOR LUMPED MASS MATRIX

C	OUTPUT
C	-------
C	RN(NEQ,3)        : (I+1)TH RESPONCE[DIS,VEL,ACCE]
C	-----------------------------------------------------------------------
CN      COMMON /IOUNIT/IN,IOUT,NSTIF
C
C     DIMENSION AM(NWK),AC(NWK),AKE(NWK),R(NEQ,3),RN(NEQ,3),FN(NEQ) !CHANED TO NEXT 13OCT2005
      DIMENSION AM(NWM),AC(NWK),AKE(NWK),R(NEQ,3),RN(NEQ,3),FN(NEQ)
      DIMENSION ND(NEQ+1),DDK(1)
C	-----------------------------------------------------------------------
      A1=1./(ALPHA*DELT**2)
      A2=1./(ALPHA*DELT)
      A3=BETA*A2
      A4=1./(2.*ALPHA)-1.
      A5=BETA/ALPHA-1.
      A6=BETA/ALPHA-2.
      A7=1.-BETA
      A8=1.-BETA/(2.*ALPHA)
      A8=A8*DELT

      DO 5 JTE=1,3
        DO 5 ITE=1,NEQ
          RN(ITE,JTE)=0.0D0          
    5 CONTINUE
      DO 10 ITE=1,NEQ
        RN(ITE,2)=A1*R(ITE,1)+A2*R(ITE,2)+A4*R(ITE,3)
   10 CONTINUE
C      CALL MULTDM(RN(1,3),AM,RN(1,2),ND,NEQ,NWK)
C	Previous line changed to the next by Nguyen DV 13Oct2005 for various mass matrix

C	CALL MULTDM(RN(1,3),AM,RN(1,2),ND,NEQ,NWM)
	CALL MAMULT(ND,AM,RN(1,2),RN(1,3),MASS,'STD')

      DO 15 ITE=1,NEQ
        RN(ITE,1)=FN(ITE)+RN(ITE,3)
   15 CONTINUE

      DO 20 ITE=1,NEQ
        RN(ITE,2)=A3*R(ITE,1)+A5*R(ITE,2)+A6*DELT/2.*R(ITE,3)
   20 CONTINUE

C	CALL MULTDM(RN(1,3),AC,RN(1,2),ND,NEQ,NWK)
	CALL MAMULT(ND,AC,RN(1,2),RN(1,3),DAMP,'STD')

      DO 25 ITE=1,NEQ
        RN(ITE,1)=RN(ITE,1)+RN(ITE,3)
   25 CONTINUE
      
C	CALL REDBAK(AKE,RN(1,1),ND,NEQ)
	CALL COLSOL(ND,AKE,DDK,RN(1,1),1,INDPD,EFTF,'TEMP')
	CALL COLSOL(ND,AKE,DDK,RN(1,1),2,INDPD,EFTF,'TEMP')


      DO 30 ITE=1,NEQ
c        RN(ITE,2)=A3*(RN(ITE,1)-R(ITE,1))-A5*R(ITE,2)+A8*R(ITE,3)
c        RN(ITE,3)=A1*(RN(ITE,1)-R(ITE,1))-A2*R(ITE,2)-A4*R(ITE,3)
C	  PREVIOUS CHANGED TO THE NEXT (use previous, the structure vibrate nagatively only???)
CMKIM 2001. 7. 13.
      RN(ITE,3)=A1*(RN(ITE,1)-R(ITE,1))-A2*R(ITE,2)-A4*R(ITE,3) !Re-activated for DMF1D
      RN(ITE,2)=R(ITE,2)+A7*DELT*R(ITE,3)+BETA*DELT*RN(ITE,3)

CMKIM THERE IS A SUBROUTINE TO CALCULATE THE ACCELERATION FROM THE EQUILIBRIUM EQUATION
CMKIM OUTSIDE OF THIS SUBROUTINE.
CMKIM THE NAME OF THAT SUBROUTINE IS CALACC.
   30 CONTINUE

      RETURN
      END
C
C	=======================================================================
      SUBROUTINE PATH(NEID,LN,COOD,NE,NNBE,NUID,TLENGTH)
      IMPLICIT REAL*8(A-H,O-Z)
	IMPLICIT INTEGER*4 (I-N)
C	-----------------------------------------------------------------------
C	INPUT
C	LN(NE,NNBE) = ELEMENT CONNECTIVITY
C	COOD(NT)	= NODE COORDINATE
C	NE			= NUMBER OF BEAM ELEMENTS
C	NNBE		= NUMBER OF NODES MAKING A BEAM ELEMENT(=2)
C	NUID		= NUMBER OF ELEMENTS WHERE WHEELS PATH

C	OUTPUT
C	NEID(2,NELW) = NODE NUMBER OF WHEEL PATH ELEMENTS
C	TLENGTH			= TOTAL LENGTH WHERE WHEELS RUN

C	INDEX
C	NT = NUMBER OF TOTAL NODES
C	-----------------------------------------------------------------------
CN      COMMON /IOUNIT/IN,IOUT,NSTIF
      DIMENSION NEID(NUID,*),LN(NE,*),COOD(*)
c      DIMENSION NEID(2,NELW),LN(NE,NNBE),COOD(*)
C	-----------------------------------------------------------------------      
      DO 10 J=1,NNBE
        DO 10 I=1,NUID
          NEID(I,J)=LN(I,J)
   10 CONTINUE
   
      IFIRST=NEID(1,1)
      ILAST=NEID(NUID,2)
      TLENGTH=DABS(COOD(IFIRST)-COOD(ILAST))
   
      RETURN
      END
C
C	=======================================================================
      SUBROUTINE PRINTOUT(AK,AC,AM,ND,NEQ)
      IMPLICIT REAL*8(A-H,O-Z)
	
      COMMON /IOUNIT/IN,IOUT,NSTIF
      DIMENSION AK(*),AC(*),AM(*),ND(*)
	
      WRITE(IOUT,1763)
 1763 FORMAT(//,1X,'STIFFNESS MATRIX')
      DO I=1,NEQ
        WRITE(IOUT,1764) I
        IFIRST=ND(I)
        ILAST=ND(I+1)-1
        DO J=IFIRST,ILAST
          WRITE(IOUT,1765) AK(J)
        ENDDO
      ENDDO
 1764 FORMAT(I5)
 1765 FORMAT(E15.5)

      WRITE(IOUT,1766)
 1766 FORMAT(//,1X,'DAMPING MATRIX')
      DO I=1,NEQ
        WRITE(IOUT,1764) I
        IFIRST=ND(I)
        ILAST=ND(I+1)-1
        DO J=IFIRST,ILAST
          WRITE(IOUT,1765) AC(J)
        ENDDO
      ENDDO

      WRITE(IOUT,1767)
 1767 FORMAT(//,1X,'MASS MATRIX')
      DO I=1,NEQ
        WRITE(IOUT,1764) I
        IFIRST=ND(I)
        ILAST=ND(I+1)-1
        DO J=IFIRST,ILAST
          WRITE(IOUT,1765) AM(J)
        ENDDO
      ENDDO

      RETURN
      END
C
C	=======================================================================

      SUBROUTINE SCALFS(FSS,PROPH,RT,FS,IDWHPOS,NEID,COOD,XI,NRL,
     &  NWHEEL,NEQTR,NUID,NDOF,NBOGIE,NEQ,NNBE)

      IMPLICIT REAL*8(A-H,O-Z)
	IMPLICIT INTEGER*4 (I-N)
C	-----------------------------------------------------------------------
C	INPUT:
C	------
C	FSS(NWHEEL) : LUMPED FORCE APPLIED TO STRUCTURE AT WHEEL POSITION
C	PROPH(NWHEEL,2) : PROPERTIES OF HERTZIAN SPRING
C	RT(NEQTR,3) : RESPONSE OF TRAIN[DIS, VEL, ACCE]
C	IDWHPOS(NWHEEL) : ID NUMBER OF ELEMENT CORRESPONDING TO WHEEL POSITION
C	NEID(2,NELW) : NODE NUMBER OF BEAM ELEMENT WHERE WHEEL RUNS
C	COOD(NT) : NODAL COORDINATE 
C	XI(NWHEEL) : NATURAL COORDINATE OF WHEEL POSITION
C	NRL(NDOF,NT) : EQUATION NUMBER
C	NWHEEL : NUMBER OF WHEELS
C	NEQTR : NUMBER OF EQUATIONS OF TRAIN
C	NUID : NUMBER OF ELEMENTS WHERE WHEEL RUNS
C	NDOF : NUMBER OF DEGREES OF FREEDOM OF NODE(=3)
C	NBOGIE : NUMBER OF BOGIES
C	NEQ : NUMBER OF EQUATIONS OF STRUCTURE
C	NNBE : NUMBER OF NODES MODELLING A BEAM ELEMENT(=2)

C	OUTPUT:
C	-------
C	FS(NEQ) : EQUIVALENT NODAL FORCE VECTOR APPLIED TO STRUCTURE

C	INDEX
C	SFB(12) : SHAPE FUNCTION OF BEAM ELEMENT
C	FSE(12) : EQUIVALENT NODAL FORCE OF ITH WHEEL
C	NT : NUMBER OF TOTAL NODES
C	-----------------------------------------------------------------------
      COMMON /IOUNIT/IN,IOUT,NSTIF
      DIMENSION FSS(*),PROPH(NWHEEL,*),RT(NEQTR,*),
     &  FS(NEQ),IDWHPOS(*),NEID(NUID,*),COOD(*),XI(*),NRL(NDOF,*)

      DIMENSION SFB(12),FSE(12)
C	-----------------------------------------------------------------------------------
C	CALCULATE TRAIN/RAIL INTERACTION LUMPED FORCE APPLIED TO STRUCTURE AT WHEEL POSITION
      DO 10 J=1,NWHEEL
          FSS(J)=0.0D0
   10 CONTINUE

      DO 20 I=1,NBOGIE
        IF(IDWHPOS(2*I-1).GT.0) THEN
          FSS(2*I-1)=PROPH(2*I-1,1)*RT(5*I-1,1)
        ELSE
          FSS(2*I-1)=0.0D0
        ENDIF
        IF(IDWHPOS(2*I).GT.0) THEN
          FSS(2*I)=PROPH(2*I,1)*RT(5*I,1)
        ELSE
          FSS(2*I)=0.0D0
        ENDIF
   20 CONTINUE

C	EQUIVALENT NODAL FORCE CORRESPONDING TO INTERACTION LUMPED FORCE AT WHEEL POSITION
      DO 30 I=1,NEQ
        FS(I)=0.0D0
   30 CONTINUE

      DO 40 I=1,NWHEEL
        IF(IDWHPOS(I).GT.0) THEN
          IENUM=IDWHPOS(I)
          NDNUMI=NEID(IENUM,1)
          NDNUMJ=NEID(IENUM,2)
          BLE=DABS(COOD(NDNUMI)-COOD(NDNUMJ))
          SFB(1)=2.*XI(I)**3-3.*XI(I)**2+1.
          SFB(2)=0
          SFB(3)=XI(I)*BLE*(XI(I)-1.)**2
          SFB(4)=-2.*XI(I)**3+3.*XI(I)**2
          SFB(5)=0
          SFB(6)=XI(I)**2*BLE*(XI(I)-1.)

          FSE(1)=SFB(1)*FSS(I)
          FSE(2)=0
          FSE(3)=SFB(3)*FSS(I)
          FSE(4)=SFB(4)*FSS(I)
          FSE(5)=0
          FSE(6)=SFB(6)*FSS(I)

C	ASSEMBLE EQUIVALENT NODAL FORCE OF ELEMENT INTO GLOBAL NODAL FORCE
          DO 50 J=1,NNBE
            NDNUM=NEID(IENUM,J)
            DO 60 K=1,NDOF
              IP=NRL(K,NDNUM)
              IF(IP.GT.0) THEN
                FS(IP)=FS(IP)+FSE((J-1)*NDOF+K)
              ENDIF
   60       CONTINUE
   50     CONTINUE
        ENDIF
   40 CONTINUE

      RETURN
      END

C	=======================================================================
      SUBROUTINE SCALFT(PROPC,PROPB,PROPU,FT,ITRAIN,SCALE,NEQTR,
     &  NCARB,NBOGIE)

      IMPLICIT REAL*8(A-H,O-Z)
	IMPLICIT INTEGER*4 (I-N)
C	-----------------------------------------------------------------------
C	INPUT:
C	------
c propc(ncarb,4) : properties of car body(mass, inertia, alci, ahci)
c                  ahci is a length from front to mass center
C	PROPB(NBOGIE,3) : PROPERTIES OF BOGIE
C	PROPU(NWHEEL) : PROPERTIES OF WHEEL
C	ITRAIN(3) : TRAIN COMPOSITION
C	ITRAIN(1) : NUMBER OF FRONT POWER CARS
C	ITRAIN(2) : NUMBER OF INTERMEDIATE & PASSENGER CARS
C	ITRAIN(3) : NUMBER OF REAR POWER CARS
C	SCALE : GRAVITY ACCELERATION
C	NEQTR : NUMBER OF EQUATIONS OF TRAIN
C	NCARB : NUMBER OF CAR BODIES
C	NBOGIE: NUMBER OF BOGIES

C	OUTPUT
C	FT(NEQTR) : FORCE VECTOR APPLIED TO TRAIN

C	INDEX
C	NWHEEL : NUMBER OF WHEELS
C	------------------------------------------------------------------------
      COMMON /IOUNIT/IN,IOUT,NSTIF
      DIMENSION PROPC(NCARB,*),PROPB(NBOGIE,*),PROPU(*),FT(NEQTR),
     &  ITRAIN(*)
C
      DO 30 I=1,NEQTR
        FT(I)=0.0D0
   30 CONTINUE
   
      IPOS=1
      DO 40 I=1,ITRAIN(1)
cmkim 2001. 7. 20.
        ft(ipos)=propc(i,1)*(propc(i,3)-propc(i,4))/propc(i,3)*scale
cmkim   FT(IPOS)=PROPC(I,1)/2.*SCALE
        IPOS=IPOS+5
cmkim 2001. 7. 20
        ft(ipos)=propc(i,1)*propc(i,4)/propc(i,3)*scale
cmkim   FT(IPOS)=PROPC(I,1)/2.*SCALE
        IPOS=IPOS+5
   40 CONTINUE
   
      JPOS=ITRAIN(1)+1
cmkim 2001. 7. 20.
      ft(ipos)=propc(jpos,1)*(propc(jpos,3)-propc(jpos,4))/propc(jpos,3)
     &  *scale
cmkim FT(IPOS)=PROPC(JPOS,1)/2.*SCALE
      IPOS=IPOS+5
      
      DO 50 I=ITRAIN(1)+2,ITRAIN(1)+ITRAIN(2)
cmkim 2001. 7. 20.
        ft(ipos)=propc(i-1,1)*propc(i-1,4)/propc(i-1,3)+
     &           propc(i,1)*(propc(i,3)-propc(i,4))/propc(i,3)
        ft(ipos)=ft(ipos)*scale
cmkim   FT(IPOS)=(PROPC(I-1,1)+PROPC(I,1))/2.*SCALE
        IPOS=IPOS+5
   50 CONTINUE
   
      JPOS=ITRAIN(1)+ITRAIN(2)
cmkim 2001. 7. 20.
      ft(ipos)=propc(jpos,1)*propc(jpos,4)/propc(jpos,3)*scale
cmkim FT(IPOS)=PROPC(JPOS,1)/2.*SCALE
      IPOS=IPOS+5
      
      DO 60 I=1,ITRAIN(3)
        JPOS=ITRAIN(1)+ITRAIN(2)+I
cmkim 2001. 7. 20
        ft(ipos)=propc(jpos,1)*(propc(jpos,3)-propc(jpos,4))/
     &    propc(jpos,3)*scale
cmkim   FT(IPOS)=PROPC(JPOS,1)/2.*SCALE
        IPOS=IPOS+5
cmkim 2001. 7. 20.
        ft(ipos)=propc(jpos,1)*propc(jpos,4)/propc(jpos,3)*scale
cmkim   FT(IPOS)=PROPC(JPOS,1)/2.*SCALE
        IPOS=IPOS+5
   60 CONTINUE

      DO 70 I=1,NBOGIE
        FT((I-1)*5+2)=PROPB(I,1)*SCALE
        FT((I-1)*5+3)=0
        FT((I-1)*5+4)=PROPU(2*I-1)*SCALE
        FT((I-1)*5+5)=PROPU(2*I)*SCALE
   70 CONTINUE

      RETURN
      END
C
C	=======================================================================
C ****************************************************************
C *                                                              *
C *   P R O G R A M       TO 
C *           EVALUATE SHIFT FOR STURM SEQUENCE CHECK            *
C *                                                              *
C ****************************************************************
      SUBROUTINE SCHECK1 (EIGV,RTOLV,BUP,BLO,BUPC,NEIV,NC,NEI,
     &  RTOL,SHIFT,IOUT)
C
      IMPLICIT REAL*8 (A-H,O-Z)
      
CMKIM 2000. 3. 7
C     DIMENSION EIGV(NC),RTOLV(NC),BUP(NC),BLO(NC),BUPC(NC),NEIV(NC)
      DIMENSION EIGV(*),RTOLV(*),BUP(*),BLO(*),BUPC(*),NEIV(*)
C
      FTOL=0.01
C
      DO 100 I=1,NC
      BUP(I)=EIGV(I)*(1.+FTOL)
  100 BLO(I)=EIGV(I)*(1.-FTOL)
      NROOT=0
      DO 120 I=1,NC
  120 IF(RTOLV(I).LT.RTOL) NROOT=NROOT+1
      IF(NROOT.GE.1) GOTO 200
      WRITE(IOUT,1010)
      STOP
C
C     FIND UPPER BOUNDS ON EIGENVALUE CLUSTERS
C
  200 DO 240 I=1,NROOT
  240 NEIV(I)=1
      IF(NROOT.NE.1) GOTO 260
      BUPC(1)=BUP(1)
      LM=1
      L=1
      I=2
      GOTO 295
  260 L=1
      I=2
  270 IF(BUP(I-1).LE.BLO(I)) GOTO 280
      NEIV(L)=NEIV(L)+1
      I=I+1
      IF(I.LE.NROOT) GOTO 270
  280 BUPC(L)=BUP(I-1)
      IF(I.GT.NROOT) GOTO 290
      L=L+1
      I=I+1
      IF(I.LE.NROOT) GOTO 270
      BUPC(L)=BUP(I-1)
  290 LM=L
      IF(NROOT.EQ.NC) GOTO 300
  295 IF(BUP(I-1).LE.BLO(I)) GOTO 300
      IF(RTOLV(I).GT.RTOL) GOTO 300
      BUPC(L)=BUP(I)
      NEIV(L)=NEIV(L)+1
      NROOT=NROOT+1
      IF(NROOT.EQ.NC) GOTO 300
      I=I+1
      GO TO 295
C
C     FIND SHIFT
C
  300 WRITE(IOUT,1020)
      WRITE(IOUT,1005)(BUPC(I),I=1,LM)
      WRITE(IOUT,1030)
      WRITE(IOUT,1006)(NEIV(I),I=1,LM)
      LL=LM-1
      IF(LM.EQ.1) GO TO 310
  330 DO 320 I=1,LL
  320 NEIV(L)=NEIV(L)+NEIV(I)
      L=L-1
      LL=LL-1
      IF(L.NE.1) GO TO 330 
  310 WRITE(IOUT,1040)
      WRITE(IOUT,1006)(NEIV(I),I=1,1,LM)
      L=0
      DO 340 I=1,LM
      L=L+1
      IF(NEIV(I).GE.NROOT) GO TO 350
  340 CONTINUE
  350 SHIFT=BUPC(L)
      NEI=NEIV(L)
C
      RETURN
C
 1005 FORMAT(1X,6E22.14)
 1006 FORMAT(1X,6I22)
 1010 FORMAT(/1X,'****ERROR SOLUTION STOP IN *SCHECK*'/12X,
     & 'NO EIGENVALUES FOUND',/1X)
 1020 FORMAT(/,1X,'UPPER BOUNDS EIGENVALUE CLUSTERS')
 1030 FORMAT(/1X,'NO OF EIGENVALUES IN EACH CLUSTER')
 1040 FORMAT(/1X,'NO OF EIGENVALUES LESS THAN UPPER BOUNDS')
      END
C
C	=======================================================================
C      P R O G R A M
C      TO SOLVE FOR THE SMALLEST EIGENVALUES AND CORRESPONING
C      EIGENVECTORS IN THE GENERALIZED EIGENPROBLEM USING THE
C      SUBSPACE ITERATION METHOD
C
C	INPUT VARIABLES:
C	----------------
C      A(NWK)    = STIFFNESS MATRAX IN COMPACTED FORM (ASSUMED
C                POSITIVE DEFINITE)
C      B(NWM)    = MASS MATRIX IN COMPACTED FORM
C      IDIAG(NNM)= VECTOR CONTIANING ADDRESSES OF DIGONAL
C                  ELEMENTS OF STIFFNESS MATRIX A
C      R(NN,NC)  = EIGENVECTORS ON SOLUTION EXIT
C      EIGV(NC)  = EIGENVALUES ON SOLUTION EXIT
C      TT(NN)    = WORKING VECTOR
C      W(NN)     = WORKING VECTOR
C      AR(NNC)   = WORKING MATRIX STORING PROJECTION OF K
C      BR(NNC)   = WORKING MATRIX STORING PROJECTION OF M
C      VEC(NC,NC)= WORKING MSTRIX
C      D(NC)     = WORKING VECTOR
C      RTOLV(NC) = WORKING VECTOR
C      BUP(NC)   = WORKING VECTOR
C      BLO(NC)   = WORKING VECTOR
C      BUPC(NC)  = WORKING VECTOR
C      NN        = ORDER OF STIFFNESS AND MASS MATRICES
C      NNM       = NN+1
C      NWK       = NUMBER OF ELEMENTS BELOW SKYLINE OF 
C                  STIFFNESS MATRIX
C      NWM       = NUMBER OF ELEMENT BELOW SKYLINE OF
C                  MASS MATRIX
C                  I.E. NWM=NWK FOR CONSISTENT MASS MATRIX
C                       NWM=NN  FOR LUMPED MASS MATRIX
C      NROOT     = NUMBER OF REQUIRED EIGENVALUES AND 
C                  EIGENVECTORS
C      RTOL      = CONVERGENCE TOLERANCE ON EIGENVALUES
C                  ( 1.E-6 OR SMALLER)
C      NC        = NUMBER OF ITERATION VECTORS USED
C                  ( USUALLY SET TO MIN(2*NROOT,NROOT+8) BUT
C                  CAN NOT BE LARGER THAN THE NUMBER OF MASS
C                  DEGREES OF FREDOM)
C      NNC       = NC*(NC+1)/2 DIMENSION OF STORAGE VECTOR AR,
C                  BR
C      NITEM     = MAXIMUM NUMBER OF SUBSPACE ITERATION 
C                  PERMITTED (USALLY SET TO 16)
C      IFSS      = FLAG FOR STURM SEQUENCE CHECK
C                  EQ.0 NO CHECK
C                  EQ.1 CHECK
C      IFPR      = FLAG FOR PRINTING DURING ITERATION
C                  EQ.0 NO PRINTING
C                  EQ.1 PRINTING
C      NSTIF     = SCRATCP FILE TO STORE STIFFNESS MATRIX
C      IOUT      = OUTPUT PRINTING FILE
C      OUTPUT:
C	 --------
C      EIGV(NROOT) = EIGENVALUES
C      R(NN,NROOT) = EIGENVECTORS
C ......................................................................
      SUBROUTINE SSPACE1(A,B,IDIAG,R,EIGV,TT,W,AR,BR,VEC,D,RTOLV,BUP,
     &  BLO,BUPC,NN,NNM,NWK,NWM,NROOT,RTOL,NC,NNC,NITEM,IFSS,IFPR,NSTIF,
     &  ITO,ISO)
      IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER*4 (I-N)
C	-------------------------------------------------------------------
C	COMMON /INOU/ ITI,ITO,ISO,NDATI,NPLOT,NKFAC,NELEM,
C     1              IFPR(10),IFPL(10)
CMKIM 2000. 3. 7
      DIMENSION A(NWK),B(*),R(NN,*),TT(*),W(*),EIGV(3),D(*),VEC(NC,*),
     &          AR(*),BR(*),RTOLV(*),BUP(*),BLO(1),BUPC(1)
CN      INTEGER   IDIAG(*)
	DIMENSION IDIAG(*)
C	-------------------------------------------------------------------
CN      write(90,8720) (idiag(i),i=1,nnm)
CN	WRITE(ISO,*)'VECTOR CONTAIN ADD. OF DIAG. ELEMS OF STIFF MATRIX A'
CN      write(ISO,8720) (idiag(i),i=1,nnm)
CN 8720 format(20i5)

CN	Added 18 Nov04
CN	EIGV(1)= 0.67217433832162
CN	EIGV(2)= 0.10576561553736E+01 
CN	EIGV(3)= 0.13192847760328E+04
CN	return
c
C9Dec  	WRITE (ISO,*) ('DIA STIFF MATRIX OF BRIDGE AFTER REARANGE AKBO')
C9Dec	DO I = 1,NN
C9Dec	II = IDIAG(I)
C9Dec	WRITE (ISO,*) A(II)
C9Dec	ENDDO

C	SET TOLERANCE FOR JACOBI ITERATION
C	----------------------------------
      TOLJ=1.D-10
C
C	INITIALIZATION
C	---------------
      ICONV=0
      NSCH=0
      NSMAX=12
      N1=NC+1
      NC1=NC-1
      REWIND NSTIF
      WRITE(NSTIF) A
      DO 60 I=1,NC
   60 D(I)=0.
C
C	ESTABLISH STARTING ITERATION VECTORS
C	-------------------------------------
      ND = NN/NC
      IF(NWM.GT.NN) GO TO 4
      J=0
      DO 2 I=1,NN
      II=IDIAG(I)
      R(I,1) = B(I)
      IF(B(I).GT.0.D0) J=J+1
    2 W(I)=B(I)/A(II)
      IF(NC.LE.J) GO TO 16
CN      WRITE(IOUT,1007)
CN	WRITE(ITO,1007)
      WRITE(ISO,1007)
      STOP
    4 DO 10 I=1,NN
      II = IDIAG(I)
      R(I,1) = B(II)
   10 W(I) = B(II)/A(II)
   16 DO 20 J=2,NC
      DO 20 I=1,NN
   20 R(I,J)=0.
C
      L=NN-ND
      DO 30 J=2,NC
      RT=0.
      DO 40 I=1,L
      IF(W(I).LT.RT) GO TO 40
      RT=W(I)
      IJ=I
   40 CONTINUE
      DO 50 I=L,NN
      IF(W(I).LE.RT) GO TO 50
      RT=W(I)
      IJ=I
   50 CONTINUE
      TT(J)=FLOAT(IJ)
      W(IJ)=0.
      L=L-ND
   30 R(IJ,J)=1.
CN      WRITE(IOUT,1008)
CN      WRITE(IOUT,1002) (TT(J),J=2,NC)
      WRITE(ISO,1008)
      WRITE(ISO,1002) (TT(J),J=2,NC)
C
C	FACTORIZE MATRIX A INTO (L)*(D)*(L(T)):
C	----------------------------------------
      ISH=0
CN      CALL DECOMP(A,IDIAG,NN,ISH,IOUT)
      CALL DECOMP(A,IDIAG,NN,ISH,ISO)
C	-----------------------------------------------
C	S T A R T    O F   I T E R A T I O N   L O O P:
C	-----------------------------------------------
      NITE=0
  100 NITE=NITE+1
      IF(IFPR.EQ.0) GO TO 90
C      WRITE(IOUT,1010) NITE
      WRITE(ISO,1010) NITE
C
C	CALCULATE THE PROJECTION OF A AND B:
C	------------------------------------
   90 IJ=0
      DO 110 J=1,NC
      DO 120 K=1,NN
  120 TT(K)=R(K,J)
      CALL REDBAK(A,TT,IDIAG,NN)
      DO 130 I=J,NC
      ART=0.
      DO 140 K=1,NN
  140 ART=ART+R(K,I)*TT(K)
      IJ=IJ+1
  130 AR(IJ)=ART
      DO 150 K=1,NN
  150 R(K,J)=TT(K)
  110 CONTINUE
      IJ=0
      DO 160 J=1,NC
      CALL MULTDM(TT,B,R(1,J),IDIAG,NN,NWM)
      DO 180 I=J,NC
      BRT=0.
      DO 190 K=1,NN
  190 BRT=BRT+R(K,I)*TT(K)
      IJ=IJ+1
  180 BR(IJ)=BRT
      IF(ICONV.GT.0) GO TO 160 
      DO 200 K=1,NN
  200 R(K,J)=TT(K)
  160 CONTINUE
C
C	SOLVE FOR EIGENSYSTEM OF SUBSPACE OPERATORS:
C	--------------------------------------------
      IF(IFPR.EQ.0) GO TO 320
      IND=1
CN  210 WRITE(IOUT,1020)
  210 WRITE(ISO,1020)
      II=1
      DO 300 I=1,NC
      ITEMP=II+NC-I

CN      WRITE(IOUT,1005) (AR(J),J=II,ITEMP)
	WRITE(ISO,1005) (AR(J),J=II,ITEMP)
  300 II=II+N1-I
CN       WRITE(IOUT,1030)
	 WRITE(ISO,1030)
      II=1
      DO 310 I=1,NC
      ITEMP=II+NC-I

CN      WRITE(IOUT,1005) (BR(J),J=II,ITEMP)
	WRITE(ISO,1005) (BR(J),J=II,ITEMP)
  310 II=II+N1-I
      IF(IND.EQ.2) GO TO 350
C
CN  320 CALL JACOBI1(AR,BR,VEC,EIGV,W,NC,NNC,TOLJ,NSMAX,IFPR,IOUT)
  320 CALL JACOBI1(AR,BR,VEC,EIGV,W,NC,NNC,TOLJ,NSMAX,IFPR,ISO)
C
      IF(IFPR.EQ.0) GO TO 350
CN      WRITE(IOUT,1040)
      WRITE(ISO,1040)
      IND=2
      GO TO 210
C
C	ARRANGE EIGENVALUE IN ASCENDING ORDER:
C	--------------------------------------
  350 IS=0
      II=1
      DO 360 I=1,NC1
      ITEMP=II+N1-I
      IF(EIGV(I+1).GE.EIGV(I)) GO TO 360
      IS=IS+1
      EIGVT=EIGV(I+1)
      EIGV(I+1)=EIGV(I)
      EIGV(I)=EIGVT
      BT=BR(ITEMP)
      BR(ITEMP)=BR(II)
      BR(II)=BT
      DO 370 K=1,NC
      RT=VEC(K,I+1)
      VEC(K,I+1)=VEC(K,I)
  370 VEC(K,I)=RT
  360 II=ITEMP
      IF(IS.GT.0) GO TO 350
      IF(IFPR.EQ.0) GO TO 375

C      WRITE(IOUT,1035)
      WRITE(ISO,1035)
CN      WRITE(IOUT,1006) (EIGV(I),I=1,NC)
      WRITE(ISO,1006) (EIGV(I),I=1,NC)
C
C	CALCULATE B TIMES APROXIMATE EIGENVECTORS (ICONV.EQ.0)
C	OR FINAL EIGENVECTORS APROXIMATIONS (ICONV.GT.0)
C	------------------------------------------------------
  375 DO 420 I=1,NN
      DO 422 J=1,NC
  422 TT(J)=R(I,J)
      DO 424 K=1,NC
      RT=0.
      DO 430 L=1,NC
  430 RT=RT+TT(L)*VEC(L,K)
  424 R(I,K)=RT
  420 CONTINUE
      IF(ICONV.GT.0) GO TO 500
C
C	CHECK CONVERGENCE OF EIGENVALUES:
C	---------------------------------
      DO 380 I=1,NC
      DIF=DABS(EIGV(I)-D(I))
  380 RTOLV(I)=DIF/EIGV(I)
      IF(IFPR.EQ.0) GO TO 385

CN      WRITE(IOUT,1050)
      WRITE(ISO,1050)

CN      WRITE(IOUT,1005) (RTOLV(I),I=1,NC)
	WRITE(ISO,1005) (RTOLV(I),I=1,NC)
C
  385 DO 390 I=1,NROOT
      IF(RTOLV(I).GT.RTOL) GO TO 400
  390 CONTINUE
CN      WRITE(IOUT,1060) RTOL
      WRITE(ISO,1060) RTOL
      ICONV=1
      GO TO 100
  400 IF(NITE.LT.NITEM) GO TO 410
CN      WRITE(IOUT,1070)
      WRITE(ISO,1070)
      ICONV=2
      IFSS=0
      GO TO 100
C
  410 DO 440 I=1,NC
  440 D(I)=EIGV(I)
      GO TO 100
C
C	<====E N D    O F   I T E R A T I O N   L O O P
C
CN  500 WRITE(IOUT,1100)
CN      WRITE(IOUT,1006) (EIGV(I),I=1,NROOT)
  500 WRITE(ISO,1100)
      WRITE(ISO,1006) (EIGV(I),I=1,NROOT)

CMKIM 2000. 2. 17.
C	CALCULATE AND PRINT ERROR NORMS
C	--------------------------------
      REWIND NSTIF
      READ(NSTIF) A
      DO 580 L=1,NROOT
      RT=EIGV(L)
      CALL MULTDM(TT,A,R(1,L),IDIAG,NN,NWK)
      VNORM=0.
      DO 590 I=1,NN
  590 VNORM=VNORM+TT(I)*TT(I)
      CALL MULTDM(W,B,R(1,L),IDIAG,NN,NWM)
      WNORM=0.
      DO 600 I=1,NN
      TT(I) = TT(I) - RT*W(I)
  600 WNORM=WNORM+TT(I)*TT(I)
      VNORM=DSQRT(VNORM)
      WNORM=DSQRT(WNORM)
      D(L)=WNORM/VNORM
  580 CONTINUE
C      WRITE(IOUT,1115)
C      WRITE(IOUT,1006) (D(I),I=1,NROOT)
      WRITE(ISO,1115)
      WRITE(ISO,1006) (D(I),I=1,NROOT)
C
C	APPLY STURM SEQUENCE CHECK
C	----------------------------
      IF(IFSS.EQ.0) GO TO 700
CN      CALL SCHECK1(EIGV,RTOLV,BUP,BLO,BUPC,D,NC,NEI,RTOL,SHIFT,IOUT)
      CALL SCHECK1(EIGV,RTOLV,BUP,BLO,BUPC,D,NC,NEI,RTOL,SHIFT,ISO)
C
CN      WRITE(IOUT,1120) SHIFT
      WRITE(ISO,1120) SHIFT
C
C	SHIFT MATRIX A
C	---------------
      REWIND NSTIF
      READ(NSTIF) A
      IF(NWM.GT.NN) GO TO 645
      DO 640 I=1,NN
      II=IDIAG(I)
  640 A(II)=A(II)-B(I)*SHIFT
      GO TO 660
  645 DO 650 I=1,NWK
  650 A(I)=A(I)-B(I)*SHIFT
C
C	FACTORIZE SHIFT MATRIX
C	----------------------
  660 ISH=1
CN      CALL DECOMP(A,IDIAG,NN,ISH,IOUT)
      CALL DECOMP(A,IDIAG,NN,ISH,ISO)

C	COUNT OF NEGATIVE DIGONAL ELEMENTS
      NSCH=0
      DO 664 I=1,NN
      II=IDIAG(I)
      IF(A(II).LT.0.D0) NSCH=NSCH+1
  664 CONTINUE
      IF(NSCH.EQ.NEI) GO TO 670
      NMIS=NSCH-NEI
CN      WRITE(IOUT,1130) NMIS
      WRITE(ISO,1130) NMIS
      GO TO 700
CN  670 WRITE(IOUT,1140) NSCH
  670 WRITE(ISO,1140) NSCH
  700 RETURN
C
CMKIM 2001. 8. 15
 1002 FORMAT(7F10.0)
C1002 FORMAT(1X,10F10.0)
 1005 FORMAT(1X,15F7.4)
CMKIM 2001. 8. 15.
C1006 FORMAT(5(2X,E13.6))
 1006 FORMAT(1X,6E22.14)
 1007 FORMAT(/1X,'STOP, NC IS LARGER THAN THE NUMBER OF MASS ',
     &  'DEGREES OF FREDOM')
 1008 FORMAT(//1X,'DREGREES OF FREDOM EXCITED BY UNIT STARTING ',
     &  'ITERATION VECTORS')
 1010 FORMAT(//,1X,'I T E R A T I O N    N U M B E R ',I4/)
 1020 FORMAT(/1X,'PROJECTION OF A (MATRIX AR)')
 1030 FORMAT(/1X,'PROJECTION OF B (MATRIX BR)')
 1035 FORMAT(/1X,'EIGENVALUE OF AR-LAMBDA*BR')
 1040 FORMAT(/1X,'AR AND BR AFTER JACOBI DIGONALIZATION')
 1050 FORMAT(/1X,'RELATIVE TOLERANCE REACHED EIGENVALUES')
 1060 FORMAT(/1X,'CONVERGENCE REACHED FOR RTOL',E10.4/)
 1070 FORMAT(//,'NO CONVERGENCE IN MAXIMUM NUMBER OF ',
     &  'ITERATIONS PERMITED'/1X,'WE ACCEPT CURRENT ',
     &  'ITERATION VLAUE'/1X,'THE STURM SEQUENCE CHECK ',
     &  'IS NOT PERFOMED')
CMKIM 2000. 2. 17
C1100 FORMAT(//1X,'THE SQUARE ROOTS OF CALCULATD EIGENVALUES ARE',/)
 1100 FORMAT(//1X,'THE CALCULATD EIGENVALUES ARE',/)
 1115 FORMAT(//1X,'PRINT ERROR NORMS ON THE EIGENVALUES')
 1110 FORMAT(//1X,'THE CALCULATED EIGENVECTORS ARE'//)
 1120 FORMAT(//1X,'CHECK APPLIED AT SHIFT',E22.14)
 1130 FORMAT(//1X,'THERE ARE',I4,3X,'EIGENVALUES MISSING')
 1140 FORMAT(//1X,'WE FOUND THE LOWEST',I4,3X,'EIGENVALUES')
      END
C
C	=======================================================================
CMKIM 2001. 7. 14.
      SUBROUTINE SYSBR(AK,AKF,AM,COOD,NRL,LNBE,MPBE,PRBE,ND,NBC,BCLRB,
     &				NDOF,NEBE,NPBE,NNBE,NWKBR,NLRB,NT,NEQ,NWK)
      IMPLICIT REAL*8(A-H,O-Z)
      IMPLICIT INTEGER*4 (I-N)
C	-----------------------------------------------------
C	PROGRAM TO FORM MATRICES (MASS, STIFFNESS) OF BRIDGE
C	-----------------------------------------------------
C	INPUT:
C	COOD(NT)         = NODE COORDINATE
C	NRL(NDOF*NT)     = EQUATION NUMBER
C	LNBE(NEBE,NNBE)  = ELEMENT CONNECTIVITY
C	MPBE(NEBE)       = MATERIAL PROPERTY
C	PRBE(NPBE,9)     = PROPERTY CARD OF BEAM
C	ND(NEQ+1)        = VECTOR CONTAINING DIAGONAL ADDRESS
C	NBC(NLRB)        = NODE NUMBERS WITH LRB
C	BCLRB(NLRB,2)    = STIFFNESS & DAMPING OF LRB
C	NDOF             = NUMBER OF DEGREES OF FREEDOM(=3)
C	NEBE             = NUMBER OF BEAM ELEMENTS
C	NPBE             = NUMBER OF PROPERTY CARDS TO MODEL BEAM
C	NNBE             = NUMBER OF NODES MODELLING BEAM(=2)
C	NLRB             = NUMBER OF ISOLATORS

C	OUTPUT:
C	AK(NWKBR)        = STIFFNESS MATRIX OF BRIDGE
C	AKF(NWK)         = AK IS STORED INTO AKF MATRIX TO ASSEMBLE THE GLOBAL STIFFNESS MATRIX
C	AM(NWK)          = MASS MATRIX OF BRIDGE OF TOTAL SYSTEM

C	INDEX:
C	NEQ              = NUMBER OF EQUATIONS
C	NT               = NUMBER OF TOTAL NODES
C	NWKBR            = NUMBER OF ELEMENTS OF BRIDGE STIFFNESS MATRIX
C	NWK              = NUMBER OF ELEMENTS OF TOTAL SYSTEM MATRIX
C	----------------------------------------------------------------------
      COMMON /INOU/ ITI,ITO,ISO,NDATI,NPLOT,NKFAC,NELEM,
     1              IFPR(10),IFPL(10)
C
CN      DIMENSION AK(*),AKF(*),AM(*),COOD(*),NRL(*),LNBE(NEBE,*),MPBE(*),
CN     &		  PRBE(NPBE,*),ND(*),NBC(*),BCLRB(NLRB,*)
CN      DIMENSION AKE(6,6),AME(6,6),ID(12)

      DIMENSION AKF(*),MPBE(*),PRBE(NPBE,*),NBC(*),BCLRB(NLRB,*),AK(*)
      DIMENSION NRL(*),COOD(*),LNBE(NEBE,*),ND(*),AM(*)
			  
	DIMENSION AKE(6,6),AME(6,6),ID(12)

C9DEC     DIMENSION AKE(6,6),AME(6,6),ID(12),AK(NWKBR),NRL(NDOF*NT),COOD(NT)
C9DEC	DIMENSION LNBE(NEBE,NNBE),ND(NEQ+1),AM(NWK)
C	----------------------------------------------------------------------
C	Next added Nov04
C9DEC	WRITE (100,*) ('EQUATION NUMBER ARRAY')
C9DEC	WRITE (100,*) NRL

C	NDOFE : NUMBER OF DEGREES OF FREEDOM OF A BEAM ELEMENT
      NDOFE=NNBE*NDOF

C	LOOPS OVER NUMBER OF BEAM ELEMENTS FOR BRIDGE MODELLING
      DO 10 IEBE=1,NEBE
      
        CALL BEAMSTIF(AKE,AME,IEBE,COOD,LNBE,MPBE,PRBE,NEBE,NPBE)
C
        DO 20 INBE=1,NNBE
          DO 30 IDOF=1,NDOF
            IDNUM=(INBE-1)*NDOF+IDOF

            IPOS=(LNBE(IEBE,INBE)-1)*NDOF+IDOF

            ID(IDNUM)=NRL(IPOS)
	
   30     CONTINUE
   20   CONTINUE

   	WRITE (100,700)IEBE 
  700 FORMAT(/,1X,'EQUATION NUMBER FOR ELEMENT', I5)	
   	WRITE (100,*) ID

        DO 10 IEDOF=1,NDOFE
          DO 9 JEDOF=IEDOF,NDOFE
            IR=ID(IEDOF)
            IF(IR.EQ.0) GOTO 9
            IC=ID(JEDOF)
            IF(IC.EQ.0) GOTO 9
            IF(IR.LE.IC) GOTO 40
            IT=IR
            IR=IC
            IC=IT
   40       IP=ND(IC)+(IC-IR)
            AK(IP)=AK(IP)+AKE(IEDOF,JEDOF)
            AM(IP)=AM(IP)+AME(IEDOF,JEDOF)

C9DEC	WRITE (100,*) IP,ND(IC),AK(IP),AKE(IEDOF,JEDOF)

    9     CONTINUE
   10 CONTINUE

C
C9DEC  	WRITE (100,*) ('DIA STIFFNESS MATRIX OF BRIDGE')
C9DEC	DO I = 1,NEQ
C9DEC	II = ND(I)
C9DEC	WRITE (100,*) AK(II)
C9DEC	ENDDO

C  	WRITE (100,*) ('STIFFNESS MATRIX OF BRIDGE -NO ISOLATOR')
C	WRITE (100,*) AK
CMKIM 2001. 7. 14.
C	-------------------------------------
C	ASSEMBLE STIFFNESS OF BASE ISOLATORS:
C	-------------------------------------
C	DAMPING OF BASE ISOLATORS WILL BE ASSEMBLED IN THE SUBROUTINE DAMPEBC
      DO 50 I=1,NLRB
        IPOS=(NBC(I)-1)*NDOF+1
        IP=NRL(IPOS)
        IF(IP.LE.0) THEN
		WRITE(ITO,1000) NBC(I)
		WRITE(ISO,1000) NBC(I)
          STOP
        ENDIF
        IP=ND(IP)
        AK(IP)=AK(IP)+BCLRB(I,1)
   50 CONTINUE

      DO 60 IWKBR=1,NWKBR
        AKF(IWKBR)=AK(IWKBR)
   60 CONTINUE

C9DEC  	WRITE (100,*) ('STIFFNESS MATRIX OF BRIDGE WITH ISOLATOR')
C9DEC	WRITE (100,*) AK

C9DEC	WRITE (100,*) ('MASS MATRIX OF BRIDGE AM IN SYSBR-TEXT DATA')
C9DEC	WRITE (100,*) AM

C9DEC  	WRITE (100,*) ('DIA MASS MATRIX OF BRIDGE')
C9DEC	DO I = 1,NEQ
C9DEC	II = ND(I)
C9DEC	WRITE (100,*) AM(II)
C9DEC	ENDDO
C
      RETURN
 1000 FORMAT(/,1X,'PLEASE INPUT CHECK. BASE ISOLATOR CAN NOT BE
     &  INSTALLED AT FIXED B/C', I5)
      END
C
C	=======================================================================
      SUBROUTINE SYSRA(AK,AM,COOD,NRL,LNBE,MPBE,PRBE,ND,NDOF,NEBE,NPBE,
     &   NNBE)
      IMPLICIT REAL*8(A-H,O-Z)
      IMPLICIT INTEGER*4 (I-N)
C	-------------------------------------------------------------------------
C	PROGRAM TO FORM GLOBAL MATRICES (MASS, STIFFNESS) BY ADDING RAIL ELEMENT
C	-------------------------------------------------------------------------
C	INPUT
C	COOD(NT)         : NODE COORDINATE
C	NRL(NDOF*NT)     : EQUATION NUMBER
C	LNBE(NEBE,NNBE)  : ELEMENT CONNECTIVITY
C	MPBE(NEBE)       : MATERIAL PROPERTY
C	PRBE(NPBE,9)     : PROPERTY CARD OF BEAM
C	ND(NEQ+1)        : VECTOR CONTAINING DIAGONAL ADDRESS
C	NDOF             : NUMBER OF DEGREES OF FREEDOM(=3)
C	NEBE             : NUMBER OF BEAM ELEMENTS
C	NPBE             : NUMBER OF PROPERTY CARDS TO MODEL BEAM
C	NNBE             : NUMBER OF NODES MODELLING BEAM(=2)

C	OUTPUT
C	AK(NWK)          : GLOBAL STIFFNESS MATRIX
C	AM(NWK)          : GLOBAL MASS MATRIX

C	INDEX
C	NT               : NUMBER OF TOTAL NODES
C	NEQ              : NUMBER OF EQUATIONS
C	NWK              : NUMBER OF ELEMENTS OF TOTAL SYSTEM MATRIX
C	----------------------------------------------------------------------
CN      COMMON /IOUNIT/IN,IOUT,NSTIF
      DIMENSION AK(*),AM(*),COOD(*),NRL(*),LNBE(NEBE,*),MPBE(*),
     &  PRBE(NPBE,*),ND(*)  
      DIMENSION AKE(6,6),AME(6,6),ID(12)
C	----------------------------------------------------------------------
C	NDOFE : NUMBER OF DEGREES OF FREEDOM OF A BEAM ELEMENT
      NDOFE=NNBE*NDOF
      DO 10 IEBE=1,NEBE
      
        CALL BEAMSTIF(AKE,AME,IEBE,COOD,LNBE,MPBE,PRBE,NEBE,NPBE)
        
        DO 20 INBE=1,NNBE
          DO 30 IDOF=1,NDOF
            IDNUM=(INBE-1)*NDOF+IDOF
            IPOS=(LNBE(IEBE,INBE)-1)*NDOF+IDOF
            ID(IDNUM)=NRL(IPOS)
   30     CONTINUE
   20   CONTINUE
        DO 10 IEDOF=1,NDOFE
          DO 9 JEDOF=IEDOF,NDOFE
            IR=ID(IEDOF)
            IF(IR.EQ.0) GOTO 9
            IC=ID(JEDOF)
            IF(IC.EQ.0) GOTO 9
            IF(IR.LE.IC) GOTO 40
            IT=IR
            IR=IC
            IC=IT
   40       IP=ND(IC)+(IC-IR)
            AK(IP)=AK(IP)+AKE(IEDOF,JEDOF)
            AM(IP)=AM(IP)+AME(IEDOF,JEDOF)
    9     CONTINUE
   10 CONTINUE

      RETURN
      END
C
C	=======================================================================
      SUBROUTINE SYSWK(AK,AC,COOD,NRL,LNWK,MPWK,PRWK,ND,NDOF,NEWK,NPWK,
     &   NNWK,DL0,PI0)
      IMPLICIT REAL*8(A-H,O-Z)
      IMPLICIT INTEGER*4 (I-N)
C	----------------------------------------------------------------
C	PROGRAM TO FORM GLOBAL MATRIX (ADD WINKLER ELEMENT & TRANSFORM)
C	----------------------------------------------------------------
C	INPUT
C	COOD(NT)         : NODE COORDINATE
C	NRL(NDOF*NT)     : EQUATION NUMBER
C	LNWK(NEWK,NNWK)  : ELEMENT CONNECTIVITY
C	MPWK(NEWK)       : MATERIAL PROPERTY
C	PRWK(NPWK,2)     : PROPERTY CARD OF WINKLER ELEMENT
C	ND(NEQ+1)        : VECTOR CONTAINING ADDRESS OF DIAGONAL ELEMENTS
C	NDOF             : NUMBER OF DEGREES OF FREEDOM(=3)
C	NEWK             : NUMBER OF WINKLER ELEMENTS
C	NPWK             : NUMBER OF PROPERTY CARDS TO MODEL WINKLER
C	NNWK             : NUMBER OF NODES MODELLING WINKLER(=4)
C	DL0               : ECCENTIRCITY
C	PI0
C	ROT(12,12)        : ROTATION MATRIX

C	OUTPUT
C	AK(NWK)          : GLOBAL STIFFNESS MATRIX
C	AC(NWK)          : GLOBAL MASS MATRIX

C	INDEX
C	NT               : NUMBER OF TOTAL NODES
C	NEQ              : NUMBER OF EQUATIONS
C	NWK              : NUMBER OF ELEMENTS OF TOTAL SYSTEM MATRIX
C	-----------------------------------------------------------------
CN      COMMON /IOUNIT/IN,IOUT,NSTIF

      DIMENSION AK(*),AC(*),COOD(*),NRL(*),LNWK(NEWK,*),MPWK(*),
     &  PRWK(NPWK,*),ND(*)

      DIMENSION AKE(12,12),ACE(12,12),ID(12),ROT(12,12)
C	-----------------------------------------------------------------
C	NDOFE : NUMBER OF DEGREES OF FREEDOM OF A WINKLER ELEMENT
C
C	LOOP OVER NUMBER OF WINKLER ELEMENTS:
C	-------------------------------------
      NDOFE=NNWK*NDOF
      DO 10 IEWK=2,NEWK

C	  + FORM WINKLER ELEMENT MATRIX (STIFFNESS, DAMPING)   
        CALL WINKSTIF(AKE,ACE,IEWK,COOD,LNWK,MPWK,PRWK,NEWK,NPWK)
        
        IF(DL0.NE.0.0D0.AND.PI0.NE.0.0D0) THEN
          DO 50 JTE=1,12
            DO 50 ITE=1,8
              ROT(ITE,JTE)=0.0D0
   50    CONTINUE

C	   + FORM TRANSFORM MATRIX (ROT) BY ECCENTRICITY
          ROT(1,1)=1.0
          ROT(1,2)=DL0*DCOS(PI0)
          ROT(2,2)=1.0
          ROT(3,3)=1.0
          ROT(4,4)=1.0
          ROT(4,5)=DL0*DCOS(PI0)
          ROT(5,5)=1.0
          ROT(6,6)=1.0
          ROT(7,7)=1.0
CMKIM     ROT(7,8)=DL0*DCOS(PI0)
          ROT(8,8)=1.0
          ROT(9,9)=1.0
          ROT(10,10)=1.0
CMKIM     ROT(10,11)=DL0*DCOS(PI0)
          ROT(11,11)=1.0
          ROT(12,12)=1.0

          NNT=NNWK*NDOF

C	  + TRANSFORM LOCAL ELEMENT MATRICES TO GLOBAL MATRICES	
          CALL CONGR(NNT,AKE,ROT)
          CALL CONGR(NNT,ACE,ROT)
       
        ENDIF
C 
C	  + ADD WINKLER GLOBAL ELEMENT MATRICES TO SYSTEM MATRICES	    
        DO 20 INWK=1,NNWK
          DO 30 IDOF=1,NDOF
            IDNUM=(INWK-1)*NDOF+IDOF
            IPOS=(LNWK(IEWK,INWK)-1)*NDOF+IDOF
            ID(IDNUM)=NRL(IPOS)
   30     CONTINUE
   20   CONTINUE
C
        DO 10 IEDOF=1,NDOFE
          DO 9 JEDOF=IEDOF,NDOFE
            IR=ID(IEDOF)
            IF(IR.EQ.0) GOTO 9
            IC=ID(JEDOF)
            IF(IC.EQ.0) GOTO 9
            IF(IR.LE.IC) GOTO 40
            IT=IR
            IR=IC
            IC=IT
   40       IP=ND(IC)+(IC-IR)
            AK(IP)=AK(IP)+AKE(IEDOF,JEDOF)
            AC(IP)=AC(IP)+ACE(IEDOF,JEDOF)
    9     CONTINUE
   10 CONTINUE

      RETURN
      END
C
C	=======================================================================
      SUBROUTINE TKIRRE(POSI,TLENGTH,TIRREGU) 

      IMPLICIT REAL*8(A-H,O-Z)
	IMPLICIT INTEGER*4 (I-N)
C
      COMMON /IOUNIT/IN,IOUT,NSTIF
      
	PI = 3.14156 
C	TRACK IRREGULARITY 
      TIRREGU=SIN(0.5*2.*PI*POSI/TLENGTH)*0.0127
      TIRREGU=0.0D0
     
      RETURN
      END
C
C	=======================================================================
      SUBROUTINE TRAINMD(RWP,ORWP,NEID,COOD,WHPOS,WHPOSINC,IDWHPOS,XI,
     &  PROPH,PROPC,PROPB,PROPU,FT,FTS,FS,FSS,RT,RTN,RS,RSN,AKTR,ACTR,
     &  AMTR,AMOTR,AKOTR,AK,AC,AM,AMO,AKO,NRL,NDTR,ND,XX,SS,ITRAIN,
     &  NWHEEL,NUID,
     &  TLENGTH,SCALE,NCARB,NBOGIE,NWKTR,NEQTR,NWK,NEQ,NDOF,NNBE,TOLER,
     &  VEL,DELT,NMAX,EXTDIS,ALPHA,BETA,IPRTTR,IPRTST,PRTTR,PRTST,
     &  NPRTTR,NPRTST,NT,IANA,TT,DL0,PI0,IPATH)

      IMPLICIT REAL*8(A-H,O-Z)
      IMPLICIT INTEGER*4 (I-N)
C	----------------------------------------------------------------------
C	INPUT:
C	------
C	RWP(NWHEEL,2)  = CURRENT RESPONSES OF STRUCTURE PART UNDER WHEEL AT WHEEL POSITION
C	ORWP(NWHEEL,2) = PREVIOUS RESPONSES OF STRUCTURE PART UNDER WHEEL AT WHEE POSITION
C	NEID(2,NELW)= NODE NUMBERS CORRESPONDING TO ELEMENT PATH WHERE WHEELS RUN
C	COOD(NT)	   = NODAL COORDINATE
C	WHPOS(NWHEEL)  = WHEEL POSITION AT CURRENT TIME STEP
C	WHPOSINC(NWHEEL)= POSITION AT NEXT TIME STEP
C	IDWHPOS(NWHEEL)= ID NUMBER OF ELEMENT CORRESPONDING TO WHEEL POSITION
C	XI(NWHEEL): NATURAL COORDINATE OF WHEEL POSITION
C	PROPH(NWHEEL,2)= PROPERTIES OF HERTZIAN SPRING & DAMPER[AKHI, ACHI]
cmkim 2001. 7. 20.
c	propc(ncarb,4) = properties of car body(mass, inertia, alci, ahci)
c                  ahci is a length from front to mass center
C	PROPB(NBOGIE,3) = PROPERTIES OF BOGIE[MASS, INERTIA, ALBI]
C	PROPU(NWHEEL) = PROPERTIES OF WHEEL[MASS]
C	FT(NEQTR)	  = FORCE VECTOR APPLIED TO TRAIN
C	FTS(NWHEEL,2) = FTS(I,1)=KHI*(VRI-GRI)
C                 FTS(I,2)=CHI*VDRI
C                 WHERE KHI=STIFFNESS OF HERTZIAN OF ITH WHEEL
C                       CHI=DAMPING OF HERTZIAN OF ITH WHEEL
C                       VRI,VDRI=BEAM RESPONSE AT ITH WHEEL POSITION
C                       GRI=RAIL IRREGULARITY AT ITH POSITION
C	FS(NEQ)		= EQUIVALENT NODAL FORCE VECTOR OF FSS APPLIED TO STRUCTURE
C	FSS(NWHEEL) = FORCE VECTOR APPLIED TO STRUCTURE AT WHEEL POSITION
C	RT(NEQTR,3) = (I)TH RESPONSE OF TRAIN[DIS, VEL, ACCE]
C	RTN(NEQTR,3)= (I+1)TH RESPONSE OF TRAIN
C	RS(NEQ,3)   = (I)TH RESPONSE OF STRUCTURE[DIS, VEL, ACCE] 
C	RSN(NEQ,3)  = (I+1)TH RESPONSE OF STRUCTURE
C	AKTR(NWKTR) = STIFFNESS MATRIX OF TRAIN
C	ACTR(NWKTR) = DAMPING MATRIX OF TRAIN
C	AMTR(NWKTR) = MASS MATRIX OF TRAIN
C	AMOTR(NWKTR)= ORIGINAL MASS MATRIX OF TRAIN
C	AKOTR(NWKTR)= ORIGINAL STIFFNESS MATRIX 
C	AK(NWK)     = STIFFNESS MATRIX OF STRUCTURE
C	AC(NWK)     = DAMPING MATRIX OF STRUCTURE
C	AM(NWK)     = STIFFNESS MATRIX OF STRUCTURE
C	AMO(NWK)    = ORIGINAL STIFFNESS MATRIX OF STRUCTURE
C	AKO(NWK)    = ORIGINAL MASS MATRIX OF STRUCTURE
C	NRL(NDOF,NT)= EQUATION NUMBER OF STRUCTURE
C	NDTR(NEQTR+1)= VECTOR CONTAINING ADDRESS OF DIAGONAL ELEMENTS OF TRAIN
C	ND(NEQ+1)	= VECTOR CONTAINING ADDRESS OF DIAGONAL ELEMENTS OF STRUCTURE

C	XX(NEQTR)  = WORKING VECTOR
C	SS(NEQ)    = WORKING VECTOR

C	ITRAIN(3)  = TRAIN COMPOSITION
C	ITRAIN(1)  = NUMBER OF FRONT POWER CARS
C	ITRAIN(2)  = NUMBER OF INTERMEDIATE & PASSENGER CARS
C	ITRAIN(3)  = NUMBER OF REAR POWER CARS

C	NWHEEL     = NUMBER OF WHEELS
C	NUID       = NUMBER OF ELEMENTS OF TRAIN PATH IN GENERAL, NUID=NEBEBR OR =NEBERA
C	TLENGTH    = TOTAL LENGTH OF PATH WHERE WHEEL RUNS
C	SCALE      = GRAVITY ACCELERATION
C	NCARB      = NUMBER OF CAR BODIES
C	NBOGIE     = NUMBER OF BOGIES
C	NWKTR      = NUMBER OF ELEMENTS OF STIFFNESS MATRIX OF TRAIN
C	NEQTR      = NUMBER OF EQUATIONS OF TRAIN
C	NWK		   = NUMBER OF ELEMENTS OF STIFFNESS MATRIX OF STRUCTURE
C	NEQ   = NUMBER OF EQUATIONS OF STRUCTURE
C	NDOF  = NUMBER OF DEGREES OF FREEDOM OF NODE
C	NNBE  = NUMBER OF NODES MAKING A BEAM ELEMENT(=2)
C	TOLER = TOLERANCE FOR THE ITERATION

C	VEL : VELOCITY(M/SEC) OF TRAIN
C	DELT : DELTA T(TIME INCREMENT)
C	NMAX : NUMBER OF MAXIMUM ITERATIONS
C	EXTDIS : EXTRA DISTANCE

C	ALPHA : NEWMARK BETA COEFFICIENT
C	BETA

C	IPRTTR(NPRTTR) : DEGREES OF FREEDOM OF TRAIN TO PRINT
C	IPRTST(NPRTST,2) : NODES NUMBER OF STRUCTURE[NODE #, DOF #]
C	PRTTR(NPRTTR*2) : TEMPORARY STORAGE TO PRINT TRAIN RESPONSES
C	PRTST(NPRTST*2) : TEMPORARY STORAGE TO PRINT STRUCTURE RESPONSES
C	NPRTTR : NUMBER OF DEGREES OF FREEDOM TO PRINT OF TRAIN
C	NPRTST : NUMBER OF NODES TO PRINT OF STRUCTURE

C	IANA : ANALYSIS TYPE
C		.EQ.1 MOVING MASS DYNAMIC ANALYSIS FOR INPUTED TRAIN
C		.EQ.2 MOVING FORCE(AXLE LOAD) DYNAMIC ANALYSIS FOR INPUTED TRAIN
C		.EQ.3 STATIC ANALYSIS(AXLE LOAD) FOR INPUTED TRAIN
C		.EQ.4 MOVING FORCE DYNAMIC ANALYSIS FOR INPUTED AXLE LOAD
C		.EQ.5 STATIC ANALYSIS FOR INPUTED AXLE LOAD

C	NT : NUMBER OF TOTAL NODES

C	DL0 : ECCENTIRCITY
C	PI0 

C	INDEX:
C	------
C	NSOLT : NUMBER OF TOTAL SOLUTION TIMES
C	TT(NEQTR) : DISPLACEMENT OF TRAIN AT ZERO STEP
c	---------------------------------------------------------------------
CN      COMMON /IOUNIT/IN,IOUT,NSTIF
      COMMON /INOU/ ITI,ITO,ISO,NDATI,NPLOT,NKFAC,NELEM,
     1              IFPR(10),IFPL(10)
C	---------------------------------------------------------------------
      DIMENSION RWP(NWHEEL,2),ORWP(NWHEEL,2),NEID(2,NELW),COOD(NT),
     &  WHPOS(NWHEEL),WHPOSINC(NWHEEL),IDWHPOS(NWHEEL),XI(NWHEEL),
     &  proph(nwheel,2),propc(ncarb,4),propb(nbogie,3),propu(nwheel),
     &  FT(NEQTR),FTS(NWHEEL,2),FS(NEQ),FSS(NWHEEL),RT(NEQTR,3),
     &  RTN(NEQTR,3),RS(NEQ,3),RSN(NEQ,3),AKTR(NWKTR),ACTR(NWKTR),
     &  AMTR(NWKTR),AMOTR(NWKTR),AKOTR(NWKTR),AK(NWK),AC(NWK),AM(NWK),
     &  AMO(NWK),AKO(NWK),
CMKIM&  AMTR(NWKTR),AKOTR(NWKTR),AK(NWK),AC(NWK),AM(NWK),AKO(NWK),
     &  NRL(NDOF,NT),NDTR(NEQTR+1),ND(NEQ+1),XX(NEQTR),SS(NEQ),
     &  ITRAIN(3),IPRTTR(NPRTTR),IPRTST(NPRTST,2),PRTTR(NPRTTR*2),
     &  PRTST(NPRTST*2),TT(NEQTR)
C	---------------------------------------------------------------------
C	READ DEGREES OF FREEDOM OF TRAIN TO PRINT:
C	------------------------------------------
      IF(NPRTTR.GT.0) THEN
	  READ(ITI,*)
CN        READ(IN,1118) (IPRTTR(I),I=1,NPRTTR)
CN        WRITE(IOUT,1228)
CN        WRITE(IOUT,1238) (IPRTTR(I),I=1,NPRTTR)

        READ(ITI,1118) (IPRTTR(I),I=1,NPRTTR)
        WRITE(ISO,1228)
        WRITE(ISO,1238) (IPRTTR(I),I=1,NPRTTR)
      ENDIF

C	READ NODES NUMBER OF STRUCTURE IPRTST(NPRTST,2)[NODE #, DOF #]:
C	------------------------------------------------------------
      IF(NPRTST.GT.0) THEN
	  READ(ITI,*)
        DO 1128 I=1,NPRTST
CN          READ(IN,1118) (IPRTST(I,J),J=1,2)
CN 1128   CONTINUE
CN        WRITE(IOUT,2228)
CN        DO 2238 I=1,NPRTST
CN          WRITE(IOUT,2248) (IPRTST(I,J),J=1,2)

CN          READ(ITI,1118) (IPRTST(I,J),J=1,2)
		READ(ITI,*) (IPRTST(I,J),J=1,2)
 1128   CONTINUE

        WRITE(ISO,2228)
        DO 2238 I=1,NPRTST
          WRITE(ISO,2248) (IPRTST(I,J),J=1,2)

 2238   CONTINUE
      ENDIF
C
      
      IF(IANA.EQ.1) THEN
        CALL TRNMASS(RWP,ORWP,NEID,COOD,WHPOS,WHPOSINC,IDWHPOS,XI,
     &  PROPH,PROPC,PROPB,PROPU,FT,FTS,FS,FSS,RT,RTN,RS,RSN,AKTR,ACTR,
CMKIM 2001. 7. 13.
     &  AMTR,AMOTR,AKOTR,AK,AC,AM,AMO,AKO,NRL,NDTR,ND,XX,SS,ITRAIN,
     &  NWHEEL,NUID,
CMKIM&  AMTR,AKOTR,AK,AC,AM,AKO,NRL,NDTR,ND,XX,SS,ITRAIN,NWHEEL,NUID,
     &  TLENGTH,SCALE,NCARB,NBOGIE,NWKTR,NEQTR,NWK,NEQ,NDOF,NNBE,TOLER,
     &  VEL,DELT,NMAX,EXTDIS,ALPHA,BETA,IPRTTR,IPRTST,PRTTR,PRTST,
     &  NPRTTR,NPRTST,NT,TT,DL0,PI0,IPATH)
      ENDIF
      
      IF(IANA.EQ.2) THEN
        CALL TRNFOCE(NEID,COOD,WHPOS,WHPOSINC,IDWHPOS,XI,
     &  PROPH,PROPC,PROPB,PROPU,FT,FS,FSS,RT,RTN,RS,RSN,AKTR,ACTR,
CMKIM 2001. 7. 13.
     &  AMTR,AMOTR,AKOTR,AK,AC,AM,AMO,AKO,NRL,NDTR,ND,SS,ITRAIN,
     &  NWHEEL,NUID,
CMKIM&  AMTR,AKOTR,AK,AC,AM,AKO,NRL,NDTR,ND,SS,ITRAIN,NWHEEL,NUID,
     &  TLENGTH,SCALE,NCARB,NBOGIE,NWKTR,NEQTR,NWK,NEQ,NDOF,NNBE,
     &  VEL,DELT,EXTDIS,ALPHA,BETA,IPRTTR,IPRTST,PRTTR,PRTST,
     &  NPRTTR,NPRTST,NT,TT,DL0,PI0,IPATH)
      ENDIF
      
      IF(IANA.EQ.3) THEN
        CALL TRNSTAC(NEID,COOD,WHPOS,WHPOSINC,IDWHPOS,XI,
     &  PROPH,PROPC,PROPB,PROPU,FT,FS,FSS,RT,RTN,RS,RSN,AKTR,ACTR,
CMKIM 2001. 7. 13
     &  AMTR,AMOTR,AKOTR,AK,AC,AM,AMO,AKO,NRL,NDTR,ND,ITRAIN,NWHEEL,
     &  NUID,
CMKIM&  AMTR,AKOTR,AK,AC,AM,AKO,NRL,NDTR,ND,ITRAIN,NWHEEL,NUID,
     &  TLENGTH,SCALE,NCARB,NBOGIE,NWKTR,NEQTR,NWK,NEQ,NDOF,NNBE,
     &  VEL,DELT,EXTDIS,IPRTTR,IPRTST,PRTTR,PRTST,NPRTTR,NPRTST,NT,
     &  TT,DL0,PI0,IPATH)
      ENDIF

      RETURN
 1118 FORMAT(5I5)
 1228 FORMAT(//,1X,'PRINTED DEGREES OF FREEDOM OF TRAIN')
 1238 FORMAT(10I5)
 2228 FORMAT(//,1X,'PRINTED NODE NUMBER AND ITS DOF BRIDGE',/
     &'  NUM  DOF')
 2248 FORMAT(10I5)
      END
C
C	=======================================================================
      SUBROUTINE TRAINSTIF(PROPC,PROPS,PROPB,PROPP,PROPU,PROPH,ITRAIN,
     &  AMTR,ACTR,AKTR,NDTR,NCARB,NBOGIE,NWHEEL,NEQTR,NWKTR)     
      IMPLICIT REAL*8(A-H,O-Z)
      IMPLICIT INTEGER*4 (I-N)
C	---------------------------------------------------------------------
C	INPUT:
C	------
cmkim PROPC(NCARB,4)  = PROPERTIES OF CAR BODY(MASS, INERTIA, ALCI, ALHI)
C					 ahci is a length from front to mass center
C	PROPS(NBOGIE,2) = PROPERTIES OF SECONDARY SUSPENSION(AKPI, ACPI)
C	PROPB(NBOGIE,3) = PROPERTIES OF BOGIE(MASS, INERTIA, ALBI)
C	PROPP(NWHEEL,2) = PROPERTIES OF PRIMARY SUSPENSION(AKSI, ACSI)
C	PROPU(NWHEEL)   = PROPERTIES OF WHEEL(MASS)
C	PROPH(NWHEEL,2) = PROPERTIES OF HERTZIAN(AKHI, ACHI)
C	ITRAIN(3)       = TRAIN COMPOSITION
C	ITRAIN(1)       = NUMBER OF FRONT POWER CARS
C	ITRAIN(2)       = NUMBER OF INTERMEDIATE & PASSENGER CARS
C	ITRAIN(3)       = NUMBER OF REAR POWER CARS
C	NCARB  = NUMBER OF CAR BODIES(=ITRAIN(1)+ITRAIN(2)+ITRAIN(3))
C	NBOGIE = NUMBER OF BOGIES(=ITRAIN(1)*2+(ITRAIN(2)+1)+ITRAIN(3)*2)
C	NWHEEL = NUMBER OF WHEELS(=NBOGIE*2)
C	NEQTR  = NUMBER OF EQUATIONS OF STIFFNESS MATRIX(=NBOGIE*5)
C	NWKTR  = NUMBER OF ELEMENTS OF STIFFNESS MATRIX(=ITRAIN(1)*29+(12+ITRAIN(2)*17)+ITRAIN(3)*29)

C	OUTPUT:
C	-------
C	AMTR(NWKTR)  = MASS MATRIX OF TRAIN
C	ACTR(NWKTR)  = DAMPING MATRIX OF TRAIN
C	AKTR(NWKTR)  = STIFFNESS MATRIX OF TRAIN
C	NDTR(NEQTR+1)= VECTOR CONTAINING ADDRESS OF DIAGONAL ELEMENTS

C	INDEX:
C	------
C	NCTR1(10) : VECTOR CONTAINING NUMBER OF ELEMENTS IN CLOUMN
C	------------------------------------------------------------------------------------
CN      COMMON /IOUNIT/IN,IOUT,NSTIF
      COMMON /INOU/ ITI,ITO,ISO,NDATI,NPLOT,NKFAC,NELEM,
     1              IFPR(10),IFPL(10)
C
      DIMENSION PROPC(NCARB,*),PROPS(NBOGIE,*),PROPB(NBOGIE,*),
     &  PROPP(NWHEEL,*),PROPU(*),PROPH(NWHEEL,*),ITRAIN(*),AMTR(*),
     &  ACTR(*),AKTR(*),NDTR(*)
      DIMENSION NCTR1(10)
C	---------------------------------------------------------------------------
C 	EVALUATION OF SYSTEM MATRICES(MASS, DAMPING, STIFFNESS) OF FRONT POWER CAR:                                                    
C	---------------------------------------------------------------------------
      IF(ITRAIN(2).GT.0.AND.ITRAIN(2).LT.3) THEN
CN        WRITE(*,1000) ITRAIN(2)
        WRITE(ITO,1000) ITRAIN(2)
        STOP
      ENDIF

      IPOS=0
      DO 10 I=1,ITRAIN(1)
        JT=2*I-1
        IP=JT/2+1
        AMTR(IPOS+1 )=PROPC(IP,1)/4+PROPC(IP,2)/PROPC(IP,3)**2
        AMTR(IPOS+2 )=PROPB(JT,1)
        AMTR(IPOS+3 )=0
        AMTR(IPOS+4 )=PROPB(JT,2)
        AMTR(IPOS+5 )=0
        AMTR(IPOS+6 )=PROPU(2*JT-1)
        AMTR(IPOS+7 )=0
        AMTR(IPOS+8 )=0
        AMTR(IPOS+9 )=PROPU(2*JT)
        AMTR(IPOS+10)=0
        AMTR(IPOS+11)=0
        AMTR(IPOS+12)=0
        
        AKTR(IPOS+1 )=PROPS(JT,1)
        AKTR(IPOS+2 )=PROPS(JT,1)+PROPP(2*JT-1,1)+PROPP(2*JT,1)
        AKTR(IPOS+3 )=-PROPS(JT,1)
        AKTR(IPOS+4 )=(PROPP(2*JT-1,1)+PROPP(2*JT,1))*PROPB(JT,3)**2
        AKTR(IPOS+5 )=(PROPP(2*JT-1,1)-PROPP(2*JT,1))*PROPB(JT,3)
        AKTR(IPOS+6 )=PROPP(2*JT-1,1)+PROPH(2*JT-1,1)
        AKTR(IPOS+7 )=-PROPP(2*JT-1,1)*PROPB(JT,3)
        AKTR(IPOS+8 )=-PROPP(2*JT-1,1)
        AKTR(IPOS+9 )=PROPP(2*JT,1)+PROPH(2*JT,1)
        AKTR(IPOS+10)=0
        AKTR(IPOS+11)=PROPP(2*JT,1)*PROPB(JT,3)
        AKTR(IPOS+12)=-PROPP(2*JT,1)
        
        ACTR(IPOS+1 )=PROPS(JT,2)
        ACTR(IPOS+2 )=PROPS(JT,2)+PROPP(2*JT-1,2)+PROPP(2*JT,2)
        ACTR(IPOS+3 )=-PROPS(JT,2)
        ACTR(IPOS+4 )=(PROPP(2*JT-1,2)+PROPP(2*JT,2))*PROPB(JT,3)**2
        ACTR(IPOS+5 )=(PROPP(2*JT-1,2)-PROPP(2*JT,2))*PROPB(JT,3)
        ACTR(IPOS+6 )=PROPP(2*JT-1,2)+PROPH(2*JT-1,2)
        ACTR(IPOS+7 )=-PROPP(2*JT-1,2)*PROPB(JT,3)
        ACTR(IPOS+8 )=-PROPP(2*JT-1,2)
        ACTR(IPOS+9 )=PROPP(2*JT,2)+PROPH(2*JT,2)
        ACTR(IPOS+10)=0
        ACTR(IPOS+11)=PROPP(2*JT,2)*PROPB(JT,3)
        ACTR(IPOS+12)=-PROPP(2*JT,2)

        JT=2*I
        IP=JT/2      
        AMTR(IPOS+13)=PROPC(IP,1)/4+PROPC(IP,2)/PROPC(IP,3)**2
        AMTR(IPOS+14)=0
        AMTR(IPOS+15)=0
        AMTR(IPOS+16)=0
        AMTR(IPOS+17)=0
        AMTR(IPOS+18)=PROPC(IP,1)/4-PROPC(IP,2)/PROPC(IP,3)**2
        AMTR(IPOS+19)=PROPB(JT,1)
        AMTR(IPOS+20)=0
        AMTR(IPOS+21)=PROPB(JT,2)
        AMTR(IPOS+22)=0
        AMTR(IPOS+23)=PROPU(2*JT-1)
        AMTR(IPOS+24)=0
        AMTR(IPOS+25)=0
        AMTR(IPOS+26)=PROPU(2*JT)
        AMTR(IPOS+27)=0
        AMTR(IPOS+28)=0
        AMTR(IPOS+29)=0

        AKTR(IPOS+13)=PROPS(JT,1)
        AKTR(IPOS+14)=0
        AKTR(IPOS+15)=0
        AKTR(IPOS+16)=0
        AKTR(IPOS+17)=0
        AKTR(IPOS+18)=0
        AKTR(IPOS+19)=PROPS(JT,1)+PROPP(2*JT-1,1)+PROPP(2*JT,1)
        AKTR(IPOS+20)=-PROPS(JT,1)
        AKTR(IPOS+21)=(PROPP(2*JT-1,1)+PROPP(2*JT,1))*PROPB(JT,3)**2
        AKTR(IPOS+22)=(PROPP(2*JT-1,1)-PROPP(2*JT,1))*PROPB(JT,3)
        AKTR(IPOS+23)=PROPP(2*JT-1,1)+PROPH(2*JT-1,1)
        AKTR(IPOS+24)=-PROPP(2*JT-1,1)*PROPB(JT,3)
        AKTR(IPOS+25)=-PROPP(2*JT-1,1)
        AKTR(IPOS+26)=PROPP(2*JT,1)+PROPH(2*JT,1)
        AKTR(IPOS+27)=0
        AKTR(IPOS+28)=PROPP(2*JT,1)*PROPB(JT,3)
        AKTR(IPOS+29)=-PROPP(2*JT,1)   
        
        ACTR(IPOS+13)=PROPS(JT,2)
        ACTR(IPOS+14)=0
        ACTR(IPOS+15)=0
        ACTR(IPOS+16)=0
        ACTR(IPOS+17)=0
        ACTR(IPOS+18)=0
        ACTR(IPOS+19)=PROPS(JT,2)+PROPP(2*JT-1,2)+PROPP(2*JT,2)
        ACTR(IPOS+20)=-PROPS(JT,2)
        ACTR(IPOS+21)=(PROPP(2*JT-1,2)+PROPP(2*JT,2))*PROPB(JT,3)**2
        ACTR(IPOS+22)=(PROPP(2*JT-1,2)-PROPP(2*JT,2))*PROPB(JT,3)
        ACTR(IPOS+23)=PROPP(2*JT-1,2)+PROPH(2*JT-1,2)
        ACTR(IPOS+24)=-PROPP(2*JT-1,2)*PROPB(JT,3)
        ACTR(IPOS+25)=-PROPP(2*JT-1,2)
        ACTR(IPOS+26)=PROPP(2*JT,2)+PROPH(2*JT,2)
        ACTR(IPOS+27)=0
        ACTR(IPOS+28)=PROPP(2*JT,2)*PROPB(JT,3)
        ACTR(IPOS+29)=-PROPP(2*JT,2)         
        
        IPOS=IPOS+29
   10 CONTINUE

C	-----------------------------------------------------------
C	EVALUATION OF SYSTEM MATRICES(MASS, DAMPING, STIFFNESS) OF               
C	INTERMEDIATE AND PASSENGER CARS                                    
C	-----------------------------------------------------------     
      
      IF(ITRAIN(2).GE.3) THEN
        JT=ITRAIN(1)*2+1
        IP=JT/2+1
        
        AMTR(IPOS+1 )=PROPC(IP,1)/4+PROPC(IP,2)/PROPC(IP,3)**2
        AMTR(IPOS+2 )=PROPB(JT,1)
        AMTR(IPOS+3 )=0
        AMTR(IPOS+4 )=PROPB(JT,2)
        AMTR(IPOS+5 )=0
        AMTR(IPOS+6 )=PROPU(2*JT-1)
        AMTR(IPOS+7 )=0
        AMTR(IPOS+8 )=0
        AMTR(IPOS+9 )=PROPU(2*JT)
        AMTR(IPOS+10)=0
        AMTR(IPOS+11)=0
        AMTR(IPOS+12)=0
        
        AKTR(IPOS+1 )=PROPS(JT,1)
        AKTR(IPOS+2 )=PROPS(JT,1)+PROPP(2*JT-1,1)+PROPP(2*JT,1)
        AKTR(IPOS+3 )=-PROPS(JT,1)
        AKTR(IPOS+4 )=(PROPP(2*JT-1,1)+PROPP(2*JT,1))*PROPB(JT,3)**2
        AKTR(IPOS+5 )=(PROPP(2*JT-1,1)-PROPP(2*JT,1))*PROPB(JT,3)
        AKTR(IPOS+6 )=PROPP(2*JT-1,1)+PROPH(2*JT-1,1)
        AKTR(IPOS+7 )=-PROPP(2*JT-1,1)*PROPB(JT,3)
        AKTR(IPOS+8 )=-PROPP(2*JT-1,1)
        AKTR(IPOS+9 )=PROPP(2*JT,1)+PROPH(2*JT,1)
        AKTR(IPOS+10)=0
        AKTR(IPOS+11)=PROPP(2*JT,1)*PROPB(JT,3)
        AKTR(IPOS+12)=-PROPP(2*JT,1)
        
        ACTR(IPOS+1 )=PROPS(JT,2)
        ACTR(IPOS+2 )=PROPS(JT,2)+PROPP(2*JT-1,2)+PROPP(2*JT,2)
        ACTR(IPOS+3 )=-PROPS(JT,2)
        ACTR(IPOS+4 )=(PROPP(2*JT-1,2)+PROPP(2*JT,2))*PROPB(JT,3)**2
        ACTR(IPOS+5 )=(PROPP(2*JT-1,2)-PROPP(2*JT,2))*PROPB(JT,3)
        ACTR(IPOS+6 )=PROPP(2*JT-1,2)+PROPH(2*JT-1,2)
        ACTR(IPOS+7 )=-PROPP(2*JT-1,2)*PROPB(JT,3)
        ACTR(IPOS+8 )=-PROPP(2*JT-1,2)
        ACTR(IPOS+9 )=PROPP(2*JT,2)+PROPH(2*JT,2)
        ACTR(IPOS+10)=0
        ACTR(IPOS+11)=PROPP(2*JT,2)*PROPB(JT,3)
        ACTR(IPOS+12)=-PROPP(2*JT,2) 
        
        IPOS=IPOS+12
        
        DO 20 JT=ITRAIN(1)*2+2,ITRAIN(1)*2+ITRAIN(2)
          IP=ITRAIN(1)+(JT-(ITRAIN(1)*2+1))
          AMTR(IPOS+1 )=PROPC(IP,1)/4+PROPC(IP,2)/PROPC(IP,3)**2+ 
     &      PROPC(IP+1,1)/4+PROPC(IP+1,2)/PROPC(IP+1,3)**2
          AMTR(IPOS+2 )=0
          AMTR(IPOS+3 )=0
          AMTR(IPOS+4 )=0
          AMTR(IPOS+5 )=0
          AMTR(IPOS+6 )=PROPC(IP,1)/4-PROPC(IP,2)/PROPC(IP,3)**2
          AMTR(IPOS+7 )=PROPB(JT,1)
          AMTR(IPOS+8 )=0
          AMTR(IPOS+9 )=PROPB(JT,2)
          AMTR(IPOS+10)=0
          AMTR(IPOS+11)=PROPU(2*JT-1)
          AMTR(IPOS+12)=0
          AMTR(IPOS+13)=0
          AMTR(IPOS+14)=PROPU(2*JT)
          AMTR(IPOS+15)=0
          AMTR(IPOS+16)=0
          AMTR(IPOS+17)=0
          
          AKTR(IPOS+1 )=PROPS(JT,1)
          AKTR(IPOS+2 )=0
          AKTR(IPOS+3 )=0
          AKTR(IPOS+4 )=0
          AKTR(IPOS+5 )=0
          AKTR(IPOS+6 )=0
          AKTR(IPOS+7 )=PROPS(JT,1)+PROPP(2*JT-1,1)+PROPP(2*JT,1)
          AKTR(IPOS+8 )=-PROPS(JT,1)
          AKTR(IPOS+9 )=(PROPP(2*JT-1,1)+PROPP(2*JT,1))*PROPB(JT,3)**2
          AKTR(IPOS+10)=(PROPP(2*JT-1,1)-PROPP(2*JT,1))*PROPB(JT,3)
          AKTR(IPOS+11)=PROPP(2*JT-1,1)+PROPH(2*JT-1,1)
          AKTR(IPOS+12)=-PROPP(2*JT-1,1)*PROPB(JT,3)
          AKTR(IPOS+13)=-PROPP(2*JT-1,1)
          AKTR(IPOS+14)=PROPP(2*JT,1)+PROPH(2*JT,1)
          AKTR(IPOS+15)=0
          AKTR(IPOS+16)=PROPP(2*JT,1)*PROPB(JT,3)
          AKTR(IPOS+17)=-PROPP(2*JT,1)
          
          ACTR(IPOS+1 )=PROPS(JT,2)
          ACTR(IPOS+2 )=0
          ACTR(IPOS+3 )=0
          ACTR(IPOS+4 )=0
          ACTR(IPOS+5 )=0
          ACTR(IPOS+6 )=0
          ACTR(IPOS+7 )=PROPS(JT,2)+PROPP(2*JT-1,2)+PROPP(2*JT,2)
          ACTR(IPOS+8 )=-PROPS(JT,2)
          ACTR(IPOS+9 )=(PROPP(2*JT-1,2)+PROPP(2*JT,2))*PROPB(JT,3)**2
          ACTR(IPOS+10)=(PROPP(2*JT-1,2)-PROPP(2*JT,2))*PROPB(JT,3)
          ACTR(IPOS+11)=PROPP(2*JT-1,2)+PROPH(2*JT-1,2)
          ACTR(IPOS+12)=-PROPP(2*JT-1,2)*PROPB(JT,3)
          ACTR(IPOS+13)=-PROPP(2*JT-1,2)
          ACTR(IPOS+14)=PROPP(2*JT,2)+PROPH(2*JT,2)
          ACTR(IPOS+15)=0
          ACTR(IPOS+16)=PROPP(2*JT,2)*PROPB(JT,3)
          ACTR(IPOS+17)=-PROPP(2*JT,2)
          
          IPOS=IPOS+17
   20   CONTINUE
        
        JT=ITRAIN(1)*2+ITRAIN(2)+1
        IP=ITRAIN(1)+ITRAIN(2)
        
        AMTR(IPOS+1 )=PROPC(IP,1)/4+PROPC(IP,2)/PROPC(IP,3)**2
        AMTR(IPOS+2 )=0
        AMTR(IPOS+3 )=0
        AMTR(IPOS+4 )=0
        AMTR(IPOS+5 )=0
        AMTR(IPOS+6 )=PROPC(IP,1)/4-PROPC(IP,2)/PROPC(IP,3)**2
        AMTR(IPOS+7 )=PROPB(JT,1)
        AMTR(IPOS+8 )=0
        AMTR(IPOS+9 )=PROPB(JT,2)
        AMTR(IPOS+10)=0
        AMTR(IPOS+11)=PROPU(2*JT-1)
        AMTR(IPOS+12)=0
        AMTR(IPOS+13)=0
        AMTR(IPOS+14)=PROPU(2*JT)
        AMTR(IPOS+15)=0
        AMTR(IPOS+16)=0
        AMTR(IPOS+17)=0
        
        AKTR(IPOS+1 )=PROPS(JT,1)
        AKTR(IPOS+2 )=0
        AKTR(IPOS+3 )=0
        AKTR(IPOS+4 )=0
        AKTR(IPOS+5 )=0
        AKTR(IPOS+6 )=0
        AKTR(IPOS+7 )=PROPS(JT,1)+PROPP(2*JT-1,1)+PROPP(2*JT,1)
        AKTR(IPOS+8 )=-PROPS(JT,1)
        AKTR(IPOS+9 )=(PROPP(2*JT-1,1)+PROPP(2*JT,1))*PROPB(JT,3)**2
        AKTR(IPOS+10)=(PROPP(2*JT-1,1)-PROPP(2*JT,1))*PROPB(JT,3)
        AKTR(IPOS+11)=PROPP(2*JT-1,1)+PROPH(2*JT-1,1)
        AKTR(IPOS+12)=-PROPP(2*JT-1,1)*PROPB(JT,3)
        AKTR(IPOS+13)=-PROPP(2*JT-1,1)
        AKTR(IPOS+14)=PROPP(2*JT,1)+PROPH(2*JT,1)
        AKTR(IPOS+15)=0
        AKTR(IPOS+16)=PROPP(2*JT,1)*PROPB(JT,3)
        AKTR(IPOS+17)=-PROPP(2*JT,1)  
        
        ACTR(IPOS+1 )=PROPS(JT,2)
        ACTR(IPOS+2 )=0
        ACTR(IPOS+3 )=0
        ACTR(IPOS+4 )=0
        ACTR(IPOS+5 )=0
        ACTR(IPOS+6 )=0
        ACTR(IPOS+7 )=PROPS(JT,2)+PROPP(2*JT-1,2)+PROPP(2*JT,2)
        ACTR(IPOS+8 )=-PROPS(JT,2)
        ACTR(IPOS+9 )=(PROPP(2*JT-1,2)+PROPP(2*JT,2))*PROPB(JT,3)**2
        ACTR(IPOS+10)=(PROPP(2*JT-1,2)-PROPP(2*JT,2))*PROPB(JT,3)
        ACTR(IPOS+11)=PROPP(2*JT-1,2)+PROPH(2*JT-1,2)
        ACTR(IPOS+12)=-PROPP(2*JT-1,2)*PROPB(JT,3)
        ACTR(IPOS+13)=-PROPP(2*JT-1,2)
        ACTR(IPOS+14)=PROPP(2*JT,2)+PROPH(2*JT,2)
        ACTR(IPOS+15)=0
        ACTR(IPOS+16)=PROPP(2*JT,2)*PROPB(JT,3)
        ACTR(IPOS+17)=-PROPP(2*JT,2)        
        
        IPOS=IPOS+17
      ENDIF
      
C	---------------------------------------------------------------------------
C	EVALUATION OF SYSTEM MATRICES(MASS, DAMPING, STIFFNESS) OF REAR POWER CARS                                                    .
C	---------------------------------------------------------------------------         
      DO 30 I=1,ITRAIN(3)
        JT=ITRAIN(1)*2+ITRAIN(2)+1+2*I-1
        IP=ITRAIN(1)+ITRAIN(2)+I
        
        AMTR(IPOS+1 )=PROPC(IP,1)/4+PROPC(IP,2)/PROPC(IP,3)**2
        AMTR(IPOS+2 )=PROPB(JT,1)
        AMTR(IPOS+3 )=0
        AMTR(IPOS+4 )=PROPB(JT,2)
        AMTR(IPOS+5 )=0
        AMTR(IPOS+6 )=PROPU(2*JT-1)
        AMTR(IPOS+7 )=0
        AMTR(IPOS+8 )=0
        AMTR(IPOS+9 )=PROPU(2*JT)
        AMTR(IPOS+10)=0
        AMTR(IPOS+11)=0
        AMTR(IPOS+12)=0
        
        AKTR(IPOS+1 )=PROPS(JT,1)
        AKTR(IPOS+2 )=PROPS(JT,1)+PROPP(2*JT-1,1)+PROPP(2*JT,1)
        AKTR(IPOS+3 )=-PROPS(JT,1)
        AKTR(IPOS+4 )=(PROPP(2*JT-1,1)+PROPP(2*JT,1))*PROPB(JT,3)**2
        AKTR(IPOS+5 )=(PROPP(2*JT-1,1)-PROPP(2*JT,1))*PROPB(JT,3)
        AKTR(IPOS+6 )=PROPP(2*JT-1,1)+PROPH(2*JT-1,1)
        AKTR(IPOS+7 )=-PROPP(2*JT-1,1)*PROPB(JT,3)
        AKTR(IPOS+8 )=-PROPP(2*JT-1,1)
        AKTR(IPOS+9 )=PROPP(2*JT,1)+PROPH(2*JT,1)
        AKTR(IPOS+10)=0
        AKTR(IPOS+11)=PROPP(2*JT,1)*PROPB(JT,3)
        AKTR(IPOS+12)=-PROPP(2*JT,1) 
        
        ACTR(IPOS+1 )=PROPS(JT,2)
        ACTR(IPOS+2 )=PROPS(JT,2)+PROPP(2*JT-1,2)+PROPP(2*JT,2)
        ACTR(IPOS+3 )=-PROPS(JT,2)
        ACTR(IPOS+4 )=(PROPP(2*JT-1,2)+PROPP(2*JT,2))*PROPB(JT,3)**2
        ACTR(IPOS+5 )=(PROPP(2*JT-1,2)-PROPP(2*JT,2))*PROPB(JT,3)
        ACTR(IPOS+6 )=PROPP(2*JT-1,2)+PROPH(2*JT-1,2)
        ACTR(IPOS+7 )=-PROPP(2*JT-1,2)*PROPB(JT,3)
        ACTR(IPOS+8 )=-PROPP(2*JT-1,2)
        ACTR(IPOS+9 )=PROPP(2*JT,2)+PROPH(2*JT,2)
        ACTR(IPOS+10)=0
        ACTR(IPOS+11)=PROPP(2*JT,2)*PROPB(JT,3)
        ACTR(IPOS+12)=-PROPP(2*JT,2) 
        
        JT=ITRAIN(1)*2+ITRAIN(2)+1+2*I
        IP=ITRAIN(1)+ITRAIN(2)+I

        AMTR(IPOS+13)=PROPC(IP,1)/4+PROPC(IP,2)/PROPC(IP,3)**2
        AMTR(IPOS+14)=0
        AMTR(IPOS+15)=0
        AMTR(IPOS+16)=0
        AMTR(IPOS+17)=0
        AMTR(IPOS+18)=PROPC(IP,1)/4-PROPC(IP,2)/PROPC(IP,3)**2
        AMTR(IPOS+19)=PROPB(JT,1)
        AMTR(IPOS+20)=0
        AMTR(IPOS+21)=PROPB(JT,2)
        AMTR(IPOS+22)=0
        AMTR(IPOS+23)=PROPU(2*JT-1)
        AMTR(IPOS+24)=0
        AMTR(IPOS+25)=0
        AMTR(IPOS+26)=PROPU(2*JT)
        AMTR(IPOS+27)=0
        AMTR(IPOS+28)=0
        AMTR(IPOS+29)=0   
        
        AKTR(IPOS+13)=PROPS(JT,1)
        AKTR(IPOS+14)=0
        AKTR(IPOS+15)=0
        AKTR(IPOS+16)=0
        AKTR(IPOS+17)=0
        AKTR(IPOS+18)=0
        AKTR(IPOS+19)=PROPS(JT,1)+PROPP(2*JT-1,1)+PROPP(2*JT,1)
        AKTR(IPOS+20)=-PROPS(JT,1)
        AKTR(IPOS+21)=(PROPP(2*JT-1,1)+PROPP(2*JT,1))*PROPB(JT,3)**2
        AKTR(IPOS+22)=(PROPP(2*JT-1,1)-PROPP(2*JT,1))*PROPB(JT,3)
        AKTR(IPOS+23)=PROPP(2*JT-1,1)+PROPH(2*JT-1,1)
        AKTR(IPOS+24)=-PROPP(2*JT-1,1)*PROPB(JT,3)
        AKTR(IPOS+25)=-PROPP(2*JT-1,1)
        AKTR(IPOS+26)=PROPP(2*JT,1)+PROPH(2*JT,1)
        AKTR(IPOS+27)=0
        AKTR(IPOS+28)=PROPP(2*JT,1)*PROPB(JT,3)
        AKTR(IPOS+29)=-PROPP(2*JT,1)
        
        ACTR(IPOS+13)=PROPS(JT,2)
        ACTR(IPOS+14)=0
        ACTR(IPOS+15)=0
        ACTR(IPOS+16)=0
        ACTR(IPOS+17)=0
        ACTR(IPOS+18)=0
        ACTR(IPOS+19)=PROPS(JT,2)+PROPP(2*JT-1,2)+PROPP(2*JT,2)
        ACTR(IPOS+20)=-PROPS(JT,2)
        ACTR(IPOS+21)=(PROPP(2*JT-1,2)+PROPP(2*JT,2))*PROPB(JT,3)**2
        ACTR(IPOS+22)=(PROPP(2*JT-1,2)-PROPP(2*JT,2))*PROPB(JT,3)
        ACTR(IPOS+23)=PROPP(2*JT-1,2)+PROPH(2*JT-1,2)
        ACTR(IPOS+24)=-PROPP(2*JT-1,2)*PROPB(JT,3)
        ACTR(IPOS+25)=-PROPP(2*JT-1,2)
        ACTR(IPOS+26)=PROPP(2*JT,2)+PROPH(2*JT,2)
        ACTR(IPOS+27)=0
        ACTR(IPOS+28)=PROPP(2*JT,2)*PROPB(JT,3)
        ACTR(IPOS+29)=-PROPP(2*JT,2) 
        
        IPOS=IPOS+29
   30 CONTINUE
      
C	MAKING VECTOR CONTAINING DIAGONAL ELEMENT NUMBER
      NCTR1(1)=1
      NCTR1(2)=2
      NCTR1(3)=2
      NCTR1(4)=3
      NCTR1(5)=4
      NCTR1(6)=6
      NCTR1(7)=2
      NCTR1(8)=2
      NCTR1(9)=3
      NCTR1(10)=4
      
      IPOS=0
      NDTR(1)=1
C	MAKING NDTR OF POWER CAR      
      DO 40 I=2,ITRAIN(1)*10+1
        IP=MOD(I-1,10)
        IF(IP.EQ.0) IP=10
        NDTR(IPOS+I)=NDTR(IPOS+(I-1))+NCTR1(IP)
   40 CONTINUE

C	MAKING NDTR OF INTERMEDIATE AND PASSENGER CARS
      IF(ITRAIN(2).GE.3) THEN
        IPOS=IPOS+ITRAIN(1)*10
        DO 50 I=2,6
          NDTR(IPOS+I)=NDTR(IPOS+(I-1))+NCTR1(I-1)
   50   CONTINUE
        
        IPOS=IPOS+5
        DO 60 I=2,ITRAIN(2)*5+1
          IP=MOD(I-1,5)
          IF(IP.EQ.0) IP=5
          NDTR(IPOS+I)=NDTR(IPOS+(I-1))+NCTR1(IP+5)
   60   CONTINUE
      ENDIF
      
C	MAKING NDTR OF REAR CAR 
      IPOS=IPOS+ITRAIN(2)*5     
      DO 70 I=2,ITRAIN(3)*10+1
        IP=MOD(I-1,10)
        IF(IP.EQ.0) IP=10
        NDTR(IPOS+I)=NDTR(IPOS+(I-1))+NCTR1(IP)
   70 CONTINUE
      
      RETURN
 1000 FORMAT(1X,'NUMBER OF INTERMEDIATE AND PASSENGER CARS SHOULD BE',/,
     &1X,'EQUAL TO 0 OR GREATER THAN AND EQUAL TO 3',/,
     &1X,'IT2 = ',I5)
      END
C
C	=======================================================================
      SUBROUTINE TRNFOCE(NEID,COOD,WHPOS,WHPOSINC,IDWHPOS,XI,
     &  PROPH,PROPC,PROPB,PROPU,FT,FS,FSS,RT,RTN,RS,RSN,AKTR,ACTR,
CMKIM 2001. 7. 13.
     &  AMTR,AMOTR,AKOTR,AK,AC,AM,AMO,AKO,NRL,NDTR,ND,SS,ITRAIN,
     &  NWHEEL,NUID,
CMKIM&  AMTR,AKOTR,AK,AC,AM,AKO,NRL,NDTR,ND,SS,ITRAIN,NWHEEL,NUID,
     &  TLENGTH,SCALE,NCARB,NBOGIE,NWKTR,NEQTR,NWK,NEQ,NDOF,NNBE,
     &  VEL,DELT,EXTDIS,ALPHA,BETA,IPRTTR,IPRTST,PRTTR,PRTST,
     &  NPRTTR,NPRTST,NT,TT,DL0,PI0,IPATH)

      IMPLICIT REAL*8(A-H,O-Z)
      IMPLICIT INTEGER*4 (I-N)
C	------------------------------------------------------------------------
C	INPUT:
C	------
C	NEID(2,NELW) : NODE NUMBERS CORRESPONDING TO ELEMENT PATH WHERE WHEELS RUN
C	COOD(NT) : NODAL COORDINATE
C	WHPOS(NWHEEL) : WHEEL POSITION AT CURRENT TIME STEP
C	WHPOSINC(NWHEEL) : POSITION AT NEXT TIME STEP
C	IDWHPOS(NWHEEL) : ID NUMBER OF ELEMENT CORRESPONDING TO WHEEL POSITION
C	XI(NWHEEL): NATURAL COORDINATE OF WHEEL POSITION
C	PROPH(NWHEEL,2) : PROPERTIES OF HERTZIAN SPRING & DAMPER[AKHI, ACHI]
cmkim 2001. 7. 20.
c	propc(ncarb,4) : properties of car body(mass, inertia, alci, ahci)
c                  ahci is a length from front to mass center
cmkim PROPC(NCARB,3) : PROPERTIES OF CAR BODY[MASS, INERTIA, ALCI]
C	PROPB(NBOGIE,3) : PROPERTIES OF BOGIE[MASS, INERTIA, ALBI]
C	PROPU(NWHEEL) : PROPERTIES OF WHEEL[MASS]
C	FT(NEQTR) : FORCE VECTOR APPLIED TO TRAIN
C	FS(NEQ) : EQUIVALENT NODAL FORCE VECTOR OF FSS APPLIED TO STRUCTURE
C	FSS(NWHEEL) : FORCE VECTOR APPLIED TO STRUCTURE AT WHEEL POSITION
C	RT(NEQTR,3) : (I)TH RESPONSE OF TRAIN[DIS, VEL, ACCE]
C	RTN(NEQTR,3) : (I+1)TH RESPONSE OF TRAIN
C	RS(NEQ,3) : (I)TH RESPONSE OF STRUCTURE[DIS, VEL, ACCE] 
C	RSN(NEQ,3) : (I+1)TH RESPONSE OF STRUCTURE
C	AKTR(NWKTR) : STIFFNESS MATRIX OF TRAIN
C	ACTR(NWKTR) : DAMPING MATRIX OF TRAIN
C	AMTR(NWKTR) : MASS MATRIX OF TRAIN
C	AMOTR(NWKTR) : ORIGINAL MASS MATRIX OF TRAIN
C	AKOTR(NWKTR) : ORIGINAL STIFFNESS MATRIX OF TRAIN
C	AK(NWK) : STIFFNESS MATRIX OF STRUCTURE
C	AC(NWK) : DAMPING MATRIX OF STRUCTURE
C	AM(NWK) : MASS MATRIX OF STRUCTURE
C	AMO(NWK) : MASS MATRIX OF STRUCTURE
C	AKO(NWK) : ORIGINAL MASS MATRIX OF STRUCTURE
C	NRL(NDOF,NT) : EQUATION NUMBER OF STRUCTURE
C	NDTR(NEQTR+1) : VECTOR CONTAINING ADDRESS OF DIAGONAL ELEMENTS OF TRAIN
C	ND(NEQ+1) : VECTOR CONTAINING ADDRESS OF DIAGONAL ELEMENTS OF STRUCTURE

C	SS(NEQ) : WORKING VECTOR

C	ITRAIN(3) : TRAIN COMPOSITION
C	ITRAIN(1) : NUMBER OF FRONT POWER CARS
C	ITRAIN(2) : NUMBER OF INTERMEDIATE & PASSENGER CARS
C	ITRAIN(3) : NUMBER OF REAR POWER CARS

C	NWHEEL : NUMBER OF WHEELS
C	NUID : NUMBER OF ELEMENTS OF TRAIN PATH IN GENERAL, NUID=NEBEBR OR =NEBERA
C	TLENGTH : TOTAL LENGTH OF PATH WHERE WHEEL RUNS
C	SCALE : GRAVITY ACCELERATION
C	NCARB : NUMBER OF CAR BODIES
C	NBOGIE : NUMBER OF BOGIES
C	NWKTR : NUMBER OF ELEMENTS OF STIFFNESS MATRIX OF TRAIN
C	NEQTR : NUMBER OF EQUATIONS OF TRAIN
C	NWK : NUMBER OF ELEMENTS OF STIFFNESS MATRIX OF STRUCTURE
C	NEQ : NUMBER OF EQUATIONS OF STRUCTURE
C	NDOF : NUMBER OF DEGREES OF FREEDOM OF NODE
C	NNBE : NUMBER OF NODES MAKING A BEAM ELEMENT(=2)

C	VEL : VELOCITY(M/SEC) OF TRAIN
C	DELT : DELTA T(TIME INCREMENT)
C	EXTDIS : EXTRA DISTANCE

C	ALPHA : NEWMARK BETA COEFFICIENT
C	BETA

C	IPRTTR(NPRTTR) : DEGREES OF FREEDOM OF TRAIN TO PRINT
C	IPRTST(NPRTST,2) : NODES NUMBER OF STRUCTURE[NODE #, DOF #]
C	PRTTR(NPRTTR*2) : TEMPORARY STORAGE TO PRINT TRAIN RESPONSES
C	PRTST(NPRTST*2) : TEMPORARY STORAGE TO PRINT STRUCTURE RESPONSES
C	NPRTTR : NUMBER OF DEGREES OF FREEDOM TO PRINT OF TRAIN
C	NPRTST : NUMBER OF NODES TO PRINT OF STRUCTURE

C	NT : NUMBER OF TOTAL NODES

C	INDEX:
C	------
C	TT(NEQTR) : DISPLACEMENT OF TRAIN AT ZERO STEP
C	NSOLT : NUMBER OF TOTAL SOLUTION TIMES
C	--------------------------------------------------------------------
      COMMON /IOUNIT/IN,IOUT,NSTIF
      COMMON /INOU/ ITI,ITO,ISO,NDATI,NPLOT,NKFAC,NELEM,
     1              IFPR(10),IFPL(10)

      COMMON /MAXDM/AMXTR(100,2),AMXST(100,2)

C	Next commnon block added 12Jan05
	COMMON /LODW/ I_MPWK,I_LNWK,I_PRWK,I_MPBEBR,I_LNBEBR,I_PRBEBR
C	Next commnon block added 12Jan05
	COMMON /MEMW/ W(5000000),IW(4000000)
C	--------------------------------------------------------------------
      DIMENSION NEID(2,NELW),COOD(NT),WHPOS(NWHEEL),WHPOSINC(NWHEEL)
      DIMENSION IDWHPOS(NWHEEL),XI(NWHEEL),proph(nwheel,2)
      DIMENSION propc(ncarb,4),propb(nbogie,3),propu(nwheel),FT(NEQTR)
	DIMENSION FS(NEQ),FSS(NWHEEL),RT(NEQTR,3),RTN(NEQTR,3),RS(NEQ,3)
      DIMENSION RSN(NEQ,3),AKTR(NWKTR),ACTR(NWKTR),AMTR(NWKTR)
	DIMENSION AMOTR(NWKTR),AKOTR(NWKTR),AK(NWK),AC(NWK),AM(NWK)
      DIMENSION AMO(NWK),AKO(NWK),NRL(NDOF,NT),NDTR(NEQTR+1),ND(NEQ+1)
	DIMENSION SS(NEQ),ITRAIN(3),IPRTTR(NPRTTR),IPRTST(NPRTST,2)
	DIMENSION PRTTR(NPRTTR*2),PRTST(NPRTST*2),TT(NEQTR)	
C	--------------------------------------------------------------------     
      SOLT=(DABS(WHPOS(NWHEEL))+TLENGTH+EXTDIS)/VEL
      NSOLT=IDNINT(SOLT/DELT)
 
      DO 450 I=1,NWKTR
        AKOTR(I)=AKTR(I)
  450 CONTINUE
      DO 500 I=1,NWK
CMKIM 2001. 7. 13.
        AMO(I)=AM(I)
        AKO(I)=AK(I)
  500 CONTINUE

C	BEFORE DECOMP AKTR=ORIGINAL STIFFNESS MATRIX OF TRAIN
C                   AK  =ORIGINAL STIFFNESS MATRIX OF STRUCTURE
C	AFTER DECOMP AKTR =DECOMPOSED STIFFNESS MATRIX OF TRAIN
C                  AK   =DECOMPOSED STIFFNESS MATRIX OF STRUCTURE
      ISH=0
      CALL DECOMP(AKTR,NDTR,NEQTR,ISH,IOUT)
      CALL DECOMP(AK,ND,NEQ,ISH,IOUT)
      
C ......................................................................
C .	ANALYSIS PROCESS AT ZERO STEP                                      .
C ......................................................................

      WRITE(*,1000)

C	IDENTIFY ELEMENT NUMBER CORRESPONDING TO WHEEL POSITION AT ZERO STEP
      CALL IDWHEEL(NELW,NEID,PELW,WHPOS,IDWHPOS,XI,NWHEEL)

C	INITIALIZE RESPONSES OF TRAIN AT ZERO STEP
      DO 30 J=1,3
        DO 30 K=1,NEQTR
          RTN(K,J)=0.0D0
   30 CONTINUE

C	INITIALIZE RESPONSE OF STRUCTURE AT ZERO STEP
      DO 60 J=1,3
        DO 60 K=1,NEQ
          RS(K,J)=0.0D0       
   60 CONTINUE

C	CALCULATE INTERACTION FORCE APPLIED TO TRAIN AT ZERO STEP
      CALL SCALFT(PROPC,PROPB,PROPU,FT,ITRAIN,SCALE,NEQTR,
     &  NCARB,NBOGIE)     

C	ANALYZE TRAIN SYSTEM
      CALL REDBAK(AKTR,FT,NDTR,NEQTR)

      DO 51 J=1,NEQTR
        RTN(J,1)=FT(J)
   51 CONTINUE

C	CALCULATE INTERACTION FORCE APPLIED TO STRUCTURE AT ZERO STEP
      CALL SCALFS(FSS,PROPH,RTN,FS,IDWHPOS,NEID,COOD,XI,NRL,
     &  NWHEEL,NEQTR,NUID,NDOF,NBOGIE,NEQ,NNBE)


C	IN CASE OF TRAIN RUNNING ON BRIDGE, CALCULATE TORSIONAL MOMENT DUE TO ECCENTRICITY
      IF(IPATH.EQ.1) THEN
        CALL CALTFS(FS,FSS,IDWHPOS,NEID,XI,NRL,NWHEEL,NUID,NDOF,NEQ,
     &    NNBE,DL0,PI0)
      ENDIF

C	CALCULATE DISPLACEMENT OF STRUCTURE AT ZERO STEP
      CALL MULTDM(SS,AM,RS(1,3),ND,NEQ,NWK)
      DO 70 J=1,NEQ
        FS(J)=FS(J)-SS(J)
   70 CONTINUE

      CALL MULTDM(SS,AC,RS(1,2),ND,NEQ,NWK)
      DO 80 J=1,NEQ
        FS(J)=FS(J)-SS(J)
   80 CONTINUE

      CALL REDBAK(AK,FS,ND,NEQ)
      DO 81 J=1,NEQ
        RS(J,1)=FS(J)
   81 CONTINUE

      DO 145 J=1,NEQTR
        TT(J)=RTN(J,1)
  145 CONTINUE       

      IPOS=1
      DO 854 I=1,NPRTTR
        IPRT=IPRTTR(I)
        PRTTR(IPOS)=RTN(IPRT,1)-TT(IPRT)
        IPOS=IPOS+1
        PRTTR(IPOS)=RTN(IPRT,3)/SCALE
        IPOS=IPOS+1
  854 CONTINUE
 
      IPOS=1
      DO 855 I=1,NPRTST
        IPRT=NRL(IPRTST(I,2),IPRTST(I,1))
        PRTST(IPOS)=RS(IPRT,1)
        IPOS=IPOS+1
        PRTST(IPOS)=RS(IPRT,3)
        IPOS=IPOS+1
  855 CONTINUE

      TIME=0.0D0
      IF(NPRTTR.GT.0) THEN
        WRITE(17,8410) TIME,(PRTTR(I),I=1,NPRTTR*2)
      ENDIF
 
      IF(NPRTST.GT.0) THEN
        WRITE(27,8410) TIME,(PRTST(I),I=1,NPRTST*2)
      ENDIF

      DO 873 I=1,NPRTTR*2
        AMXTR(I,1)=PRTTR(I)
        AMXTR(I,2)=PRTTR(I)
  873 CONTINUE

      DO 874 I=1,NPRTST*2
        AMXST(I,1)=PRTST(I)
        AMXST(I,2)=PRTST(I)
  874 CONTINUE
 
C	WRITE AXLE LOAD
      WRITE(37,8410) TIME,(FSS(IDO),IDO=1,10)

C	RESTORE ORIGINAL STIFFNESS MATRIX TO AK WHICH CONTAINS THE STIFFNESS
C	MATRIX DECOMPOSED IN THE SUROUTINE DECOMP
      DO 135 I=1,NWK
        AK(I)=AKO(I)
  135 CONTINUE

CMKIM 2001. 7. 13.
C	BEFORE DECOMP AM=ORIGINAL MASS MATRIX OF STRUCTURE
C	AFTER DECOMP AM=DECOMPOSED MASS MATRIX OF STRUCTURE
      ISH=0
      CALL DECOMP(AM,ND,NEQ,ISH,IOUT)
C              
C	CALCULATE EFFECTIVE STIFFNESS MATRIX OF SYSTEM
CMKIM 2001. 7. 13.
C	BEFORE EFFSTIF AK=ORIGINAL STIFFNESS MATRIX
C	AFTER EFFSTIF AK=DECOMPOSED EFFECTIVE STIFFNESS MATRIX
      CALL EFFSTIF(AMO,AC,AK,ND,DELT,ALPHA,BETA,NEQ,NWK)
CMKIM CALL EFFSTIF(AM,AC,AK,ND,DELT,ALPHA,BETA,NEQ,NWK)


C ......................................................................
C .	FOLLOWING STEP                                                     .
C ......................................................................

      DO 140 ITE=1,NSOLT
        WRITE(*,3000) ITE,DFLOAT(ITE)/NSOLT*100.

C	CALCULATE (ITE+1)TH WHEEL POSITION 
        DO 175 J=1,NWHEEL
          WHPOSINC(J)=WHPOS(J)+ITE*DELT*VEL
  175   CONTINUE

C	IDENTIFY ELEMENT NUMBER CORRESPONDING TO WHEEL POSITION AT (ITE+1)TH STEP
        CALL IDWHEEL(NELW,NEID,PELW,WHPOSINC,IDWHPOS,XI,NWHEEL)
        
C	CALCULATE INTERACTION FORCE APPLIED TO TRAIN
        CALL SCALFT(PROPC,PROPB,PROPU,FT,ITRAIN,SCALE,NEQTR,
     &    NCARB,NBOGIE)     

C	ANALYZE TRAIN SYSTEM
        CALL REDBAK(AKTR,FT,NDTR,NEQTR)

        DO 61 J=1,NEQTR
          RTN(J,1)=FT(J)
   61   CONTINUE

C	CALCULATE INTERACTION FORCE APPLIED TO STRUCTURE AT ZERO STEP
        CALL SCALFS(FSS,PROPH,RTN,FS,IDWHPOS,NEID,COOD,XI,NRL,
     &    NWHEEL,NEQTR,NUID,NDOF,NBOGIE,NEQ,NNBE)


C	IN CASE OF TRAIN RUNNING ON BRIDGE, CALCULATE TORSIONAL MOMENT DUE TO ECCENTRICITY
        IF(IPATH.EQ.1) THEN
          CALL CALTFS(FS,FSS,IDWHPOS,NEID,XI,NRL,NWHEEL,NUID,NDOF,NEQ,
     &      NNBE,DL0,PI0)
        ENDIF


C	ANALYZE STRUCTURE USING NEWMARK BETA METHOD
CMKIM 2001. 7. 13.
C	AMO : ORIGINAL MASS MATRIX
C	AC : ORIGINAL DAMPING MATRIX
C	AK : DECOMPOSED EFFECTIVE STIFFNESS MATRIX
C	AM : DECOMPOSED MASS MATRIX
C	AKO : ORIGINAL STIFFNESS MATRIX
CN13OCT05   CALL NMSOL(AMO,AC,AK,RS,RSN,FS,ND,DELT,ALPHA,BETA,NEQ,NWK)
        CALL NMSOL(AMO,AC,AK,RS,RSN,FS,ND,DELT,ALPHA,BETA,NEQ,NWK,NWK)

CN13OCT05   CALL CALACC(FS,RSN,AM,AC,AKO,SS,ND,NEQ,NWK)
	  CALL CALACC(FS,RSN,AM,AC,AKO,SS,ND,NEQ,NWK,NWK)
CMKIM   CALL NMSOL(AM,AC,AK,RS,RSN,FS,ND,DELT,ALPHA,BETA,NEQ,NWK)
  
        DO 157 K=1,3
          DO 157 L=1,NEQTR
            RT(L,K)=RTN(L,K)
  157   CONTINUE
  
        DO 167 K=1,3
          DO 167 L=1,NEQ
            RS(L,K)=RSN(L,K)
  167   CONTINUE

        IPOS=1
        DO 857 K=1,NPRTTR
          IPRT=IPRTTR(K)
          PRTTR(IPOS)=RT(IPRT,1)-TT(IPRT)
          IPOS=IPOS+1
          PRTTR(IPOS)=RT(IPRT,3)/SCALE
          IPOS=IPOS+1
  857   CONTINUE
 
        IPOS=1
        DO 858 K=1,NPRTST
          IPRT=NRL(IPRTST(K,2),IPRTST(K,1))
          PRTST(IPOS)=RS(IPRT,1)
          IPOS=IPOS+1
          PRTST(IPOS)=RS(IPRT,3)/SCALE
          IPOS=IPOS+1
  858   CONTINUE

C	Added 13Jan05 by NguyenDV
	CALL CLEARA(SS,NEQ)
	DO I=1,NEQ
		SS(I) = RS(I,1)
	ENDDO
C	ADDED 5JAN05 BY NGUYENDV
	CALL BRPRDIS (NRL,SS,NDOF,ITE)

C	Added 11Jan05 by NguyenDV to print stress resultant
	CALL BRPRSTR (SS,ITE,NRL,COOD,IW(I_LNBEBR),IW(I_MPBEBR),
     +			 W(I_PRBEBR))

        TIME=ITE*DELT

C	  PRINT TRAIN RESPONSES:
C	  ---------------------- 
        IF(NPRTTR.GT.0) THEN
          WRITE(17,8410) TIME,(PRTTR(K),K=1,NPRTTR*2)
        ENDIF

C	  PRINT STRUCTURE RESPONSES:
C	  --------------------------  
        IF(NPRTST.GT.0) THEN
          WRITE(27,8410) TIME,(PRTST(K),K=1,NPRTST*2)
        ENDIF

        DO 877 K=1,NPRTTR*2
          IF(PRTTR(K).GT.AMXTR(K,1)) AMXTR(K,1)=PRTTR(K)
          IF(PRTTR(K).LT.AMXTR(K,2)) AMXTR(K,2)=PRTTR(K)
  877   CONTINUE

        DO 878 K=1,NPRTST*2
          IF(PRTST(K).GT.AMXST(K,1)) AMXST(K,1)=PRTST(K)
          IF(PRTST(K).LT.AMXST(K,2)) AMXST(K,2)=PRTST(K)
  878   CONTINUE

C	  WRITE AXLE LOAD:
C	  -----------------
        WRITE(37,8410) TIME,(FSS(IDO),IDO=1,10)
  140 CONTINUE

      DO 740 I=1,2
        WRITE(47,8420) (AMXTR(J,I),J=1,NPRTTR*2)
        WRITE(57,8420) (AMXST(J,I),J=1,NPRTST*2)
  740 CONTINUE
 
      WRITE(47,8420) (MAX(ABS(AMXTR(J,1)),ABS(AMXTR(J,2))),J=1,NPRTTR*2)
      WRITE(57,8420) (MAX(ABS(AMXST(J,1)),ABS(AMXST(J,2))),J=1,NPRTST*2)
 8420 FORMAT(100E15.7)
  
      RETURN
 1000 FORMAT(1X,'CURRENT TIME STEP =        0     0.00%')
 3000 FORMAT(1X,'CURRENT TIME STEP = ',I8,3X,F6.2,'%')
 8410 FORMAT(F10.5,100E15.7)
      END
C
C	=======================================================================
      SUBROUTINE TRNMASS(RWP,ORWP,NEID,COOD,WHPOS,WHPOSINC,IDWHPOS,XI,
     &  PROPH,PROPC,PROPB,PROPU,FT,FTS,FS,FSS,RT,RTN,RS,RSN,AKTR,ACTR,
CMKIM 2001. 7. 13
     &  AMTR,AMOTR,AKOTR,AK,AC,AM,AMO,AKO,NRL,NDTR,ND,XX,SS,ITRAIN,
     &  NWHEEL,NUID,
CMKIM&  AMTR,AKOTR,AK,AC,AM,AKO,NRL,NDTR,ND,XX,SS,ITRAIN,NWHEEL,NUID,
     &  TLENGTH,SCALE,NCARB,NBOGIE,NWKTR,NEQTR,NWK,NEQ,NDOF,NNBE,TOLER,
     &  VEL,DELT,NMAX,EXTDIS,ALPHA,BETA,IPRTTR,IPRTST,PRTTR,PRTST,
     &  NPRTTR,NPRTST,NT,TT,DL0,PI0,IPATH)

      IMPLICIT REAL*8(A-H,O-Z)
      IMPLICIT INTEGER*4 (I-N)
C	------------------------------------------------------------------------
C	INPUT:
C	------
C	RWP(NWHEEL,2) : CURRENT RESPONSES OF STRUCTURE PART UNDER WHEEL AT WHEEL POSITION
C	ORWP(NWHEEL,2) : PREVIOUS RESPONSES OF STRUCTURE PART UNDER WHEEL AT WHEEL POSITION
C	NEID(2,NELW) : NODE NUMBERS CORRESPONDING TO ELEMENT PATH WHERE WHEELS RUN
C	COOD(NT) : NODAL COORDINATE
C	WHPOS(NWHEEL) : WHEEL POSITION AT CURRENT TIME STEP
C	WHPOSINC(NWHEEL) : POSITION AT NEXT TIME STEP
C	IDWHPOS(NWHEEL) : ID NUMBER OF ELEMENT CORRESPONDING TO WHEEL POSITION
C	XI(NWHEEL): NATURAL COORDINATE OF WHEEL POSITION
C	PROPH(NWHEEL,2) : PROPERTIES OF HERTZIAN SPRING & DAMPER[AKHI, ACHI]
cmkim 2001. 7. 20.
c	propc(ncarb,4) : properties of car body(mass, inertia, alci, ahci)
c                  ahci is a length from front to mass center
cmkim PROPC(NCARB,3) : PROPERTIES OF CAR BODY[MASS, INERTIA, ALCI]
C	PROPB(NBOGIE,3) : PROPERTIES OF BOGIE[MASS, INERTIA, ALBI]
C	PROPU(NWHEEL) : PROPERTIES OF WHEEL[MASS]
C	FT(NEQTR) : FORCE VECTOR APPLIED TO TRAIN
C	FTS(NWHEEL,2) : FTS(I,1)=KHI*(VRI-GRI)
C                 FTS(I,2)=CHI*VDRI
C                 WHERE KHI=STIFFNESS OF HERTZIAN OF ITH WHEEL
C                       CHI=DAMPING OF HERTZIAN OF ITH WHEEL
C                       VRI,VDRI=BEAM RESPONSE AT ITH WHEEL POSITION
C                       GRI=RAIL IRREGULARITY AT ITH POSITION
C	FS(NEQ) : EQUIVALENT NODAL FORCE VECTOR OF FSS APPLIED TO STRUCTURE
C	FSS(NWHEEL) : FORCE VECTOR APPLIED TO STRUCTURE AT WHEEL POSITION
C	RT(NEQTR,3) : (I)TH RESPONSE OF TRAIN[DIS, VEL, ACCE]
C	RTN(NEQTR,3) : (I+1)TH RESPONSE OF TRAIN
C	RS(NEQ,3) : (I)TH RESPONSE OF STRUCTURE[DIS, VEL, ACCE] 
C	RSN(NEQ,3) : (I+1)TH RESPONSE OF STRUCTURE
C	AKTR(NWKTR) : STIFFNESS MATRIX OF TRAIN
C	ACTR(NWKTR) : DAMPING MATRIX OF TRAIN
C	AMTR(NWKTR) : MASS MATRIX OF TRAIN
C	AMOTR(NWKTR) : ORIGINAL MASS MATRIX OF TRAIN
C	AKOTR(NWKTR) : ORIGINAL STIFFNESS MATRIX 
C	AK(NWK) : STIFFNESS MATRIX OF STRUCTURE
C	AC(NWK) : DAMPING MATRIX OF STRUCTURE
C	AM(NWK) : MASS MATRIX OF STRUCTURE
C	AMO(NWK) : ORIGINAL MASS MATRIX OF STRUCTURE
C	AKO(NWK) : ORIGINAL STIFFNESS MATRIX OF STRUCTURE
C	NRL(NDOF,NT) : EQUATION NUMBER OF STRUCTURE
C	NDTR(NEQTR+1) : VECTOR CONTAINING ADDRESS OF DIAGONAL ELEMENTS OF TRAIN
C	ND(NEQ+1) : VECTOR CONTAINING ADDRESS OF DIAGONAL ELEMENTS OF STRUCTURE

C	XX(NEQTR) : WORKING VECTOR
C	SS(NEQ) : WORKING VECTOR

C	ITRAIN(3) : TRAIN COMPOSITION
C	ITRAIN(1) : NUMBER OF FRONT POWER CARS
C	ITRAIN(2) : NUMBER OF INTERMEDIATE & PASSENGER CARS
C	ITRAIN(3) : NUMBER OF REAR POWER CARS

C	NWHEEL : NUMBER OF WHEELS
C	NUID : NUMBER OF ELEMENTS OF TRAIN PATH IN GENERAL, NUID=NEBEBR OR =NEBERA
C	TLENGTH : TOTAL LENGTH OF PATH WHERE WHEEL RUNS
C	SCALE : GRAVITY ACCELERATION
C	NCARB : NUMBER OF CAR BODIES
C	NBOGIE : NUMBER OF BOGIES
C	NWKTR : NUMBER OF ELEMENTS OF STIFFNESS MATRIX OF TRAIN
C	NEQTR : NUMBER OF EQUATIONS OF TRAIN
C	NWK : NUMBER OF ELEMENTS OF STIFFNESS MATRIX OF STRUCTURE
C	NEQ : NUMBER OF EQUATIONS OF STRUCTURE
C	NDOF : NUMBER OF DEGREES OF FREEDOM OF NODE
C	NNBE : NUMBER OF NODES MAKING A BEAM ELEMENT(=2)
C	TOLER : TOLERANCE FOR THE ITERATION

C	VEL : VELOCITY(M/SEC) OF TRAIN
C	DELT : DELTA T(TIME INCREMENT)
C	NMAX : NUMBER OF MAXIMUM ITERATIONS
C	EXTDIS : EXTRA DISTANCE

C	ALPHA : NEWMARK BETA COEFFICIENT
C	BETA

C	IPRTTR(NPRTTR) : DEGREES OF FREEDOM OF TRAIN TO PRINT
C	IPRTST(NPRTST,2) : NODES NUMBER OF STRUCTURE[NODE #, DOF #]
C	PRTTR(NPRTTR*2) : TEMPORARY STORAGE TO PRINT TRAIN RESPONSES
C	PRTST(NPRTST*2) : TEMPORARY STORAGE TO PRINT STRUCTURE RESPONSES
C	NPRTTR : NUMBER OF DEGREES OF FREEDOM TO PRINT OF TRAIN
C	NPRTST : NUMBER OF NODES TO PRINT OF STRUCTURE

C	NT : NUMBER OF TOTAL NODES

C	INDEX:
C	------
C	TT(NEQTR) : DISPLACEMENT OF TRAIN AT ZERO STEP
C	NSOLT : NUMBER OF TOTAL SOLUTION TIMES
C	------------------------------------------------------------------
      COMMON /IOUNIT/IN,IOUT,NSTIF
      COMMON /INOU/ ITI,ITO,ISO,NDATI,NPLOT,NKFAC,NELEM,
     1              IFPR(10),IFPL(10)

      COMMON /MAXDM/AMXTR(100,2),AMXST(100,2)
C
      DIMENSION RWP(NWHEEL,2),ORWP(NWHEEL,2),NEID(2,NELW),COOD(NT),
     &  WHPOS(NWHEEL),WHPOSINC(NWHEEL),IDWHPOS(NWHEEL),XI(NWHEEL),
cmkim 2001. 7. 20.
     &  proph(nwheel,2),propc(ncarb,4),propb(nbogie,3),propu(nwheel),
cmkim&  PROPH(NWHEEL,2),PROPC(NCARB,3),PROPB(NBOGIE,3),PROPU(NWHEEL),
     &  FT(NEQTR),FTS(NWHEEL,2),FS(NEQ),FSS(NWHEEL),RT(NEQTR,3),
     &  RTN(NEQTR,3),RS(NEQ,3),RSN(NEQ,3),AKTR(NWKTR),ACTR(NWKTR),
CMKIM 2001. 7. 13
     &  AMTR(NWKTR),AMOTR(NWKTR),AKOTR(NWKTR),AK(NWK),AC(NWK),AM(NWK),
     &  AMO(NWK),AKO(NWK),
CMKIM&  AMTR(NWKTR),AKOTR(NWKTR),AK(NWK),AC(NWK),AM(NWK),AKO(NWK),
     &  NRL(NDOF,NT),NDTR(NEQTR+1),ND(NEQ+1),XX(NEQTR),SS(NEQ),
     &  ITRAIN(3),IPRTTR(NPRTTR),IPRTST(NPRTST,2),PRTTR(NPRTTR*2),
     &  PRTST(NPRTST*2),TT(NEQTR)
C	-------------------------------------------------------------------
      SOLT=(DABS(WHPOS(NWHEEL))+TLENGTH+EXTDIS)/VEL
      NSOLT=IDNINT(SOLT/DELT)
 
      DO 450 I=1,NWKTR
CMKIM 2001. 7. 13
        AMOTR(I)=AMTR(I)
        AKOTR(I)=AKTR(I)
  450 CONTINUE
      DO 500 I=1,NWK
CMKIM 2001. 7. 13
        AMO(I)=AM(I)
        AKO(I)=AK(I)
  500 CONTINUE

C ......................................................................
C .	ZERO STEP                                                          .
C ......................................................................

C	ASSUMPTING RESPONSES OF STRUCTURE AT STARTING WHEEL POSITION OF TRAIN PATH[VRI, VDRI]
      DO 10 J=1,2
        DO 10 I=1,NWHEEL
          RWP(I,J)=0.0D0
   10 CONTINUE 

C	IDENTIFY ELEMENT NUMBER CORRESPONDING TO WHEEL POSITION AT ZERO STEP
      CALL IDWHEEL(NELW,NEID,PELW,WHPOS,IDWHPOS,XI,NWHEEL)

c     WRITE(*,1000)

C ......................................................................
C .	ITERATION PROCESS OF ZERO STEP                                     .
C ......................................................................
      DO 20 JTE=1,NMAX
c       WRITE(*,2000) JTE

C	CALCULATE INTERACTION FORCE APPLIED TO TRAIN AT ZERO STEP
        CALL CALFT(IDWHPOS,PROPH,RWP,WHPOS,PROPC,PROPB,PROPU,FT,FTS,
     &    ITRAIN,NWHEEL,TLENGTH,SCALE,NEQTR,NCARB,NBOGIE)     

C	INITIALIZE RESPONSES OF TRAIN AT ZERO STEP
        DO 30 J=1,3
          DO 30 K=1,NEQTR
            RT(K,J)=0.0D0
   30   CONTINUE
   
C	CALCULATE DISPLACEMENT OF TRAIN AT ZERO STEP
        CALL MULTDM(XX,AMTR,RT(1,3),NDTR,NEQTR,NWKTR)
        DO 40 J=1,NEQTR
          FT(J)=FT(J)-XX(J)
   40   CONTINUE

        CALL MULTDM(XX,ACTR,RT(1,2),NDTR,NEQTR,NWKTR)
        DO 50 J=1,NEQTR
          FT(J)=FT(J)-XX(J)
   50   CONTINUE

C	BEFORE DECOMP AKTR=ORIGINAL STIFFNESS MATRIX
C	AFTER DECOMP AKTR=DECOMPOSED STIFFNESS MATRIX
        IF(JTE.EQ.1) THEN
          ISH=0
          CALL DECOMP(AKTR,NDTR,NEQTR,ISH,IOUT)
        ENDIF          
        CALL REDBAK(AKTR,FT,NDTR,NEQTR)
        DO 51 J=1,NEQTR
          RT(J,1)=FT(J)
   51   CONTINUE

C	INITIALIZE RESPONSE OF STRUCTURE AT ZERO STEP
        DO 60 J=1,3
          DO 60 K=1,NEQ
            RS(K,J)=0.0D0
   60   CONTINUE

C	CALCULATE INTERACTION FORCE APPLIED TO STRUCTURE AT ZERO STEP
        CALL CALFS(FSS,PROPH,RT,FTS,FS,IDWHPOS,NEID,COOD,XI,NRL,NWHEEL,
     &    NEQTR,NUID,NDOF,NBOGIE,NEQ,NNBE)

C	IN CASE OF TRAIN RUNNING ON BRIDGE, CALCULATE TORSIONAL MOMENT DUE TO ECCENTRICITY
        IF(IPATH.EQ.1) THEN
          CALL CALTFS(FS,FSS,IDWHPOS,NEID,XI,NRL,NWHEEL,NUID,NDOF,NEQ,
     &      NNBE,DL0,PI0)
        ENDIF

C	CALCULATE DISPLACEMENT OF STRUCTURE AT ZERO STEP
        CALL MULTDM(SS,AM,RS(1,3),ND,NEQ,NWK)
        DO 70 J=1,NEQ
          FS(J)=FS(J)-SS(J)
   70   CONTINUE

        CALL MULTDM(SS,AC,RS(1,2),ND,NEQ,NWK)
        DO 80 J=1,NEQ
          FS(J)=FS(J)-SS(J)
   80   CONTINUE

C	BEFORE DECOMP AK=ORIGINAL STIFFNESS MATRIX
C	AFTER DECOMP AK=DECOMPOSED STIFFNESS MATRIX
        IF(JTE.EQ.1) THEN
          ISH=0
          CALL DECOMP(AK,ND,NEQ,ISH,IOUT)
        ENDIF
        CALL REDBAK(AK,FS,ND,NEQ)
        DO 81 J=1,NEQ
          RS(J,1)=FS(J)
   81   CONTINUE

        DO 90 J=1,2
          DO 90 K=1,NWHEEL
            ORWP(K,J)=RWP(K,J)
   90   CONTINUE

        CALL CALRWP(IDWHPOS,NEID,COOD,XI,NRL,RS,RWP,NWHEEL,NUID,NNBE,
     &    NDOF,NEQ)

        DO 100 J=1,2
          DO 100 K=1,NWHEEL
            ORWP(K,J)=RWP(K,J)-ORWP(K,J)
  100   CONTINUE

CMKIN 2000. 4. 17. 
C	COMMENT FOLLOWING ROUTINE BECAUSE ACCELERATION OF STRUCTURE IS NOT 
C	USED TO CALCULATE CALFT
        TOL=0.0D0
        DO 110 J=1,NWHEEL
          TOL=TOL+ORWP(J,1)**2
  110   CONTINUE
        TOL=DSQRT(TOL)
        IF(TOL.GT.TOLER) GOTO 20

C       TOL=0.0D0
C       DO 120 J=1,NWHEEL
C         TOL=TOL+ORWP(J,2)**2
C 120   CONTINUE
C       TOL=DSQRT(TOL)
C       IF(TOL.GT.TOLER) GOTO 20

        GOTO 130
   20 CONTINUE

  130 CONTINUE
  
      DO 145 I=1,NEQTR
        TT(I)=RT(I,1)
  145 CONTINUE       


      IPOS=1
      DO 854 I=1,NPRTTR
        IPRT=IPRTTR(I)
        PRTTR(IPOS)=RT(IPRT,1)-TT(IPRT)
        IPOS=IPOS+1
        PRTTR(IPOS)=RT(IPRT,3)/SCALE
        IPOS=IPOS+1
  854 CONTINUE
 
      IPOS=1
      DO 855 I=1,NPRTST
        IPRT=NRL(IPRTST(I,2),IPRTST(I,1))
        PRTST(IPOS)=RS(IPRT,1)
        IPOS=IPOS+1
        PRTST(IPOS)=RS(IPRT,3)/SCALE
        IPOS=IPOS+1
  855 CONTINUE

C	ADDED 5JAN05 BY NGUYENDV
	CALL BRPRDIS (NRL,RS,NDOF,ITE)


      DO 873 I=1,NPRTTR*2
        AMXTR(I,1)=PRTTR(I)
        AMXTR(I,2)=PRTTR(I)
  873 CONTINUE

      DO 874 I=1,NPRTST*2
        AMXST(I,1)=PRTST(I)
        AMXST(I,2)=PRTST(I)
  874 CONTINUE


      TIME=0.0D0

C	PRINT TRAIN RESPONSES:
C	----------------------
      IF(NPRTTR.GT.0) THEN
        WRITE(17,8410) TIME,(PRTTR(I),I=1,NPRTTR*2)
      ENDIF
 
C	PRINT STRUCTURE RESPONSES:
C	-------------------------- 
      IF(NPRTST.GT.0) THEN
        WRITE(27,8410) TIME,(PRTST(I),I=1,NPRTST*2)
      ENDIF

C	WRITE AXLE LOAD (FORCE VECTOR APPLIED TO STRUCTURE AT WHEEL POSITION)
C	---------------
      WRITE(37,8410) TIME,(FSS(IDO),IDO=1,10)


      IF(JTE.GT.NMAX) THEN
        WRITE(ITO,8476) TIME,NMAX
        STOP
      ENDIF

C	RESTORE ORIGINAL STIFFNESS MATRIX TO AKTR WHICH CONTAINS THE STIFFNESS
C	MATRIX DECOMPOSED IN THE SUROUTINE DECOMP
      DO 125 I=1,NWKTR
        AKTR(I)=AKOTR(I)
  125 CONTINUE
      DO 135 I=1,NWK
        AK(I)=AKO(I)
  135 CONTINUE

CMKIM 2001. 7. 13
C	 BEFORE DECOMP AMTR=ORIGINAL MASS MATRIX OF TRAIN
C               AM=ORIGINAL MASS MATRIX OF STRUCTURE
C	 AFTER DECOMP AMTR=DECOMPOSED MASS MATRIX OF TRAIN
C              AM=DECOMPOSED MASS MATRIX OF STRUCTURE
      ISH=0
      CALL DECOMP(AMTR,NDTR,NEQTR,ISH,IOUT)
      CALL DECOMP(AM,ND,NEQ,ISH,IOUT)


C	CALCULATE EFFECTIVE STIFFNESS MATRIX OF TRAIN
CMKIM 2001. 7. 13
C	BEFORE EFFSTIF AKTR=ORIGINAL STIFFNESS MATRIX
C	AFTER EFFSTIF AKTR=DECOMPOSED EFFECTIVE STIFFNESS MATRIX
      CALL EFFSTIF(AMOTR,ACTR,AKTR,NDTR,DELT,ALPHA,BETA,NEQTR,NWKTR)
CMKIM CALL EFFSTIF(AMTR,ACTR,AKTR,NDTR,DELT,ALPHA,BETA,NEQTR,NWKTR)

C	CALCULATE EFFECTIVE STIFFNESS MATRIX OF SYSTEM
CMKIM 2001. 7. 13
C	BEFORE EFFSTIF AKTR=ORIGINAL STIFFNESS MATRIX
C	AFTER EFFSTIF AKTR=DECOMPOSED EFFECTIVE STIFFNESS MATRIX
      CALL EFFSTIF(AMO,AC,AK,ND,DELT,ALPHA,BETA,NEQ,NWK)
CMKIM CALL EFFSTIF(AM,AC,AK,ND,DELT,ALPHA,BETA,NEQ,NWK)


C ......................................................................
C .	FOLLOWING STEP                                                     .
C ......................................................................

      DO 140 ITE=1,NSOLT
c       WRITE(*,3000) ITE,DFLOAT(ITE)/NSOLT*100.

C	CALCULATE (ITE+1)TH WHEEL POSITION 
        DO 175 J=1,NWHEEL
          WHPOSINC(J)=WHPOS(J)+ITE*DELT*VEL
  175   CONTINUE

C	IDENTIFY ELEMENT NUMBER CORRESPONDING TO WHEEL POSITION AT (ITE+1)TH STEP
        CALL IDWHEEL(NELW,NEID,PELW,WHPOSINC,IDWHPOS,XI,NWHEEL)

C ......................................................................
C .	ITERATION PROCESS OF FOLLOWING STEP                                .
C ......................................................................

        DO 150 JTE=1,NMAX
c         WRITE(*,2000) JTE

C	CALCULATE INTERACTION FORCE APPLIED TO TRAIN AT (ITE+1)TH STEP
          CALL CALFT(IDWHPOS,PROPH,RWP,WHPOSINC,PROPC,PROPB,PROPU,FT,
     &      FTS,ITRAIN,NWHEEL,TLENGTH,SCALE,NEQTR,NCARB,NBOGIE)     

C	ANALYZE TRAIN SYSTEM USING NEWMARK BETA METHOD
CMKIM 2001. 7. 13
C	AMOTR : ORIGINAL MASS MATRIX OF TRAIN
C	ACTR : ORIGINAL DAMPING MATRIX OF TRAIN
C	AKTR : DECOMPOSED EFFECTIVE STIFFNESS MATRIX OF TRAIN
C	AMTR : DECOMPOSED MASS MATRIX OF TRAIN
C	AKOTR : ORIGINAL STIFFNESS MATRIX
CN13OCT05   CALL NMSOL(AMOTR,ACTR,AKTR,RT,RTN,FT,NDTR,DELT,ALPHA,BETA,
CN13OCT05      &      NEQTR,NWKTR)
		CALL NMSOL(AMOTR,ACTR,AKTR,RT,RTN,FT,NDTR,DELT,ALPHA,BETA,
     1           NEQTR,NWKTR,NWKTR)

CN13OCT05   CALL CALACC(FS,RSN,AM,AC,AKO,SS,ND,NEQ,NWK)
	    CALL CALACC(FS,RSN,AM,AC,AKO,SS,ND,NEQ,NWK,NWK)

CMKIM     CALL NMSOL(AMTR,ACTR,AKTR,RT,RTN,FT,NDTR,DELT,ALPHA,BETA,
CMKIM&      NEQTR,NWKTR)

C	CALCULATE FORCE APPLIED TO STRUCTURE     
          CALL CALFS(FSS,PROPH,RTN,FTS,FS,IDWHPOS,NEID,COOD,XI,NRL,
     &      NWHEEL,NEQTR,NUID,NDOF,NBOGIE,NEQ,NNBE)

C	IN CASE OF TRAIN RUNNING ON BRIDGE, CALCULATE TORSIONAL MOMENT DUE TO ECCENTRICITY
          IF(IPATH.EQ.1) THEN
            CALL CALTFS(FS,FSS,IDWHPOS,NEID,XI,NRL,NWHEEL,NUID,NDOF,NEQ,
     &        NNBE,DL0,PI0)
          ENDIF

C	ANALYZE STRUCTURE USING NEWMARK BETA METHOD
CMKIM 2001. 7. 13
C	AMO : ORIGINAL MASS MATRIX OF STRUCTURE
C	AC : ORIGINAL DAMPING MATRIX OF STRUCTURE
C	AK : DECOMPOSED EFFECTIVE STIFFNESS MATRIX OF STRUCTURE
C	AM : DECOMPOSED MASS MATRIX OF STRUCTURE
C	AKO : ORIGINAL STIFFNESS MATRIX
CN13OCT05   CALL NMSOL(AMO,AC,AK,RS,RSN,FS,ND,DELT,ALPHA,BETA,NEQ,NWK)
		CALL NMSOL(AMO,AC,AK,RS,RSN,FS,ND,DELT,ALPHA,BETA,NEQ,NWK,NWK)

CN13OCT05   CALL CALACC(FS,RSN,AM,AC,AKO,SS,ND,NEQ,NWK)
	    CALL CALACC(FS,RSN,AM,AC,AKO,SS,ND,NEQ,NWK,NWK)
CMKIM     CALL NMSOL(AM,AC,AK,RS,RSN,FS,ND,DELT,ALPHA,BETA,NEQ,NWK)

          DO 200 K=1,2
            DO 200 L=1,NWHEEL
              ORWP(L,K)=RWP(L,K)
  200     CONTINUE          

          CALL CALRWP(IDWHPOS,NEID,COOD,XI,NRL,RSN,RWP,NWHEEL,NUID,NNBE,
     &      NDOF,NEQ)

          DO 250 K=1,2
            DO 250 L=1,NWHEEL
              ORWP(L,K)=RWP(L,K)-ORWP(L,K)
  250     CONTINUE

          TOL=0.0D0
          DO 300 K=1,NWHEEL
            TOL=TOL+ORWP(K,1)**2
  300     CONTINUE
          TOL=DSQRT(TOL)
          IF(TOL.GT.TOLER) GOTO 150
CMKIN 2000. 4. 17. 
C	COMMENT FOLLOWING ROUTINE BECAUSE ACCELERATION OF STRUCTURE IS NOT 
C	USED TO CALCULATE CALFT
C         TOL=0.0D0
C         DO 350 K=1,NWHEEL
C           TOL=TOL+ORWP(K,2)**2
C 350     CONTINUE
C         TOL=DSQRT(TOL)
C         IF(TOL.GT.TOLER) GOTO 150
          GOTO 141
  150   CONTINUE
  
  141   DO 157 K=1,3
          DO 157 L=1,NEQTR
            RT(L,K)=RTN(L,K)
  157   CONTINUE
        DO 167 K=1,3
          DO 167 L=1,NEQ
            RS(L,K)=RSN(L,K)
  167   CONTINUE

        IPOS=1
        DO 857 K=1,NPRTTR
          IPRT=IPRTTR(K)
          PRTTR(IPOS)=RT(IPRT,1)-TT(IPRT)
          IPOS=IPOS+1
          PRTTR(IPOS)=RT(IPRT,3)/SCALE
          IPOS=IPOS+1
  857   CONTINUE
 
        IPOS=1
        DO 858 K=1,NPRTST
          IPRT=NRL(IPRTST(K,2),IPRTST(K,1))
          PRTST(IPOS)=RS(IPRT,1)
          IPOS=IPOS+1
          PRTST(IPOS)=RS(IPRT,3)/SCALE
          IPOS=IPOS+1
  858   CONTINUE

C	ADDED 5JAN05 BY NGUYENDV
	CALL BRPRDIS(NRL,RS,NDOF,ITE)

        TIME=ITE*DELT

C	WRITE TRAIN OUTPUT OF SELECTED DOFs
        IF(NPRTTR.GT.0) THEN
          WRITE(17,8410) TIME,(PRTTR(K),K=1,NPRTTR*2)
        ENDIF
 
C	WRITE STRUCTURE OUTPUT OF SELECTED NODES
        IF(NPRTST.GT.0) THEN
          WRITE(27,8410) TIME,(PRTST(K),K=1,NPRTST*2)
        ENDIF


        DO 877 K=1,NPRTTR*2
          IF(PRTTR(K).GT.AMXTR(K,1)) AMXTR(K,1)=PRTTR(K)
          IF(PRTTR(K).LT.AMXTR(K,2)) AMXTR(K,2)=PRTTR(K)
  877   CONTINUE

        DO 878 K=1,NPRTST*2
          IF(PRTST(K).GT.AMXST(K,1)) AMXST(K,1)=PRTST(K)
          IF(PRTST(K).LT.AMXST(K,2)) AMXST(K,2)=PRTST(K)
  878   CONTINUE


C	WRITE AXLE LOAD
        WRITE(37,8410) TIME,(FSS(IDO),IDO=1,10)


CN        IF(JTE.GT.NMAX) THEN
CN          WRITE(*,8476) TIME,NMAX
CN          STOP
CN        ENDIF

  140 CONTINUE

C	WRITE MAXIMUM VALUES OF TRAIN & STRUCTURE OUTPUT 
      DO 740 I=1,2
        WRITE(47,8420) (AMXTR(J,I),J=1,NPRTTR*2)
        WRITE(57,8420) (AMXST(J,I),J=1,NPRTST*2)
  740 CONTINUE
 
      WRITE(47,8420) (MAX(ABS(AMXTR(J,1)),ABS(AMXTR(J,2))),J=1,NPRTTR*2)
      WRITE(57,8420) (MAX(ABS(AMXST(J,1)),ABS(AMXST(J,2))),J=1,NPRTST*2)
 8420 FORMAT(100E15.7)


      RETURN
 1000 FORMAT(1X,'CURRENT TIME STEP =        0     0.00%')
 2000 FORMAT(1X,'CURRENT ITERATION NUMBER = ',I8)
 3000 FORMAT(1X,'CURRENT TIME STEP = ',I8,3X,F6.2,'%')
 8410 FORMAT(F10.5,100E15.7)
 8476 FORMAT(//,
     &1X,'DO NOT CONVERGE AT THIS TIME = ',F10.4,5X,'DURING NMAX = ',I5/
     &1X,'PLEASE INCRESE NMAX')
      END
C
C	=======================================================================
      SUBROUTINE TRNSTAC(NEID,COOD,WHPOS,WHPOSINC,IDWHPOS,XI,
     &  PROPH,PROPC,PROPB,PROPU,FT,FS,FSS,RT,RTN,RS,RSN,AKTR,ACTR,
CMKIM 2001. 7. 13.
     &  AMTR,AMOTR,AKOTR,AK,AC,AM,AMO,AKO,NRL,NDTR,ND,ITRAIN,
     &  NWHEEL,NUID,
CMKIM&  AMTR,AKOTR,AK,AC,AM,AKO,NRL,NDTR,ND,ITRAIN,NWHEEL,NUID,
     &  TLENGTH,SCALE,NCARB,NBOGIE,NWKTR,NEQTR,NWK,NEQ,NDOF,NNBE,
     &  VEL,DELT,EXTDIS,IPRTTR,IPRTST,PRTTR,PRTST,
     &  NPRTTR,NPRTST,NT,TT,DL0,PI0,IPATH)

      IMPLICIT REAL*8(A-H,O-Z)
      COMMON /IOUNIT/IN,IOUT,NSTIF
      COMMON /MAXDM/AMXTR(100,2),AMXST(100,2)
      DIMENSION NEID(2,NELW),COOD(NT),
     &  WHPOS(NWHEEL),WHPOSINC(NWHEEL),IDWHPOS(NWHEEL),XI(NWHEEL),
cmkim 2001. 7. 20.
     &  proph(nwheel,2),propc(ncarb,4),propb(nbogie,3),propu(nwheel),
cmkim&  PROPH(NWHEEL,2),PROPC(NCARB,3),PROPB(NBOGIE,3),PROPU(NWHEEL),
     &  FT(NEQTR),FS(NEQ),FSS(NWHEEL),RT(NEQTR,3),
     &  RTN(NEQTR,3),RS(NEQ,3),RSN(NEQ,3),AKTR(NWKTR),ACTR(NWKTR),
CMKIM 2001. 7. 13.
     &  AMTR(NWKTR),AMOTR(NWKTR),AKOTR(NWKTR),AK(NWK),AC(NWK),AM(NWK),
     &  AMO(NWK),AKO(NWK),
CMKIM&  AMTR(NWKTR),AKOTR(NWKTR),AK(NWK),AC(NWK),AM(NWK),AKO(NWK),
     &  NRL(NDOF,NT),NDTR(NEQTR+1),ND(NEQ+1),
     &  ITRAIN(3),IPRTTR(NPRTTR),IPRTST(NPRTST,2),PRTTR(NPRTTR*2),
     &  PRTST(NPRTST*2),TT(NEQTR)
     

C INPUT
C NEID(2,NELW) : NODE NUMBERS CORRESPONDING TO ELEMENT PATH WHERE WHEELS RUN
C COOD(NT) : NODAL COORDINATE
C WHPOS(NWHEEL) : WHEEL POSITION AT CURRENT TIME STEP
C WHPOSINC(NWHEEL) : POSITION AT NEXT TIME STEP
C IDWHPOS(NWHEEL) : ID NUMBER OF ELEMENT CORRESPONDING TO WHEEL POSITION
C XI(NWHEEL): NATURAL COORDINATE OF WHEEL POSITION
C PROPH(NWHEEL,2) : PROPERTIES OF HERTZIAN SPRING & DAMPER[AKHI, ACHI]
cmkim 2001. 7. 20.
c propc(ncarb,4) : properties of car body(mass, inertia, alci, ahci)
c                  ahci is a length from front to mass center
cmkim PROPC(NCARB,3) : PROPERTIES OF CAR BODY[MASS, INERTIA, ALCI]
C PROPB(NBOGIE,3) : PROPERTIES OF BOGIE[MASS, INERTIA, ALBI]
C PROPU(NWHEEL) : PROPERTIES OF WHEEL[MASS]
C FT(NEQTR) : FORCE VECTOR APPLIED TO TRAIN
C FS(NEQ) : EQUIVALENT NODAL FORCE VECTOR OF FSS APPLIED TO STRUCTURE
C FSS(NWHEEL) : FORCE VECTOR APPLIED TO STRUCTURE AT WHEEL POSITION
C RT(NEQTR,3) : (I)TH RESPONSE OF TRAIN[DIS, VEL, ACCE]
C RTN(NEQTR,3) : (I+1)TH RESPONSE OF TRAIN
C RS(NEQ,3) : (I)TH RESPONSE OF STRUCTURE[DIS, VEL, ACCE] 
C RSN(NEQ,3) : (I+1)TH RESPONSE OF STRUCTURE
C AKTR(NWKTR) : STIFFNESS MATRIX OF TRAIN
C ACTR(NWKTR) : DAMPING MATRIX OF TRAIN
C AMTR(NWKTR) : MASS MATRIX OF TRAIN
C AMOTR(NWKTR) : ORIGINAL MASS MATRIX OF TRAIN
C AKOTR(NWKTR) : ORIGINAL STIFFNESS MATRIX 
C AK(NWK) : STIFFNESS MATRIX OF STRUCTURE
C AC(NWK) : DAMPING MATRIX OF STRUCTURE
C AM(NWK) : MASS MATRIX OF STRUCTURE
C AMO(NWK) : ORIGINAL MASS MATRIX OF STRUCTURE
C AKO(NWK) : ORIGINAL STIFFNESS MATRIX OF STRUCTURE
C NRL(NDOF,NT) : EQUATION NUMBER OF STRUCTURE
C NDTR(NEQTR+1) : VECTOR CONTAINING ADDRESS OF DIAGONAL ELEMENTS OF TRAIN
C ND(NEQ+1) : VECTOR CONTAINING ADDRESS OF DIAGONAL ELEMENTS OF STRUCTURE


C ITRAIN(3) : TRAIN COMPOSITION
C   ITRAIN(1) : NUMBER OF FRONT POWER CARS
C   ITRAIN(2) : NUMBER OF INTERMEDIATE & PASSENGER CARS
C   ITRAIN(3) : NUMBER OF REAR POWER CARS

C NWHEEL : NUMBER OF WHEELS
C NUID : NUMBER OF ELEMENTS OF TRAIN PATH IN GENERAL, NUID=NEBEBR OR =NEBERA
C TLENGTH : TOTAL LENGTH OF PATH WHERE WHEEL RUNS
C SCALE : GRAVITY ACCELERATION
C NCARB : NUMBER OF CAR BODIES
C NBOGIE : NUMBER OF BOGIES
C NWKTR : NUMBER OF ELEMENTS OF STIFFNESS MATRIX OF TRAIN
C NEQTR : NUMBER OF EQUATIONS OF TRAIN
C NWK : NUMBER OF ELEMENTS OF STIFFNESS MATRIX OF STRUCTURE
C NEQ : NUMBER OF EQUATIONS OF STRUCTURE
C NDOF : NUMBER OF DEGREES OF FREEDOM OF NODE
C NNBE : NUMBER OF NODES MAKING A BEAM ELEMENT(=2)

C VEL : VELOCITY(M/SEC) OF TRAIN
C DELT : DELTA T(TIME INCREMENT)
C EXTDIS : EXTRA DISTANCE


C IPRTTR(NPRTTR) : DEGREES OF FREEDOM OF TRAIN TO PRINT
C IPRTST(NPRTST,2) : NODES NUMBER OF STRUCTURE[NODE #, DOF #]
C PRTTR(NPRTTR*2) : TEMPORARY STORAGE TO PRINT TRAIN RESPONSES
C PRTST(NPRTST*2) : TEMPORARY STORAGE TO PRINT STRUCTURE RESPONSES
C NPRTTR : NUMBER OF DEGREES OF FREEDOM TO PRINT OF TRAIN
C NPRTST : NUMBER OF NODES TO PRINT OF STRUCTURE

C NT : NUMBER OF TOTAL NODES


C INDEX
C TT(NEQTR) : DISPLACEMENT OF TRAIN AT ZERO STEP
C NSOLT : NUMBER OF TOTAL SOLUTION TIMES


      SOLT=(DABS(WHPOS(NWHEEL))+TLENGTH+EXTDIS)/VEL
      NSOLT=IDNINT(SOLT/DELT)

      DO 450 I=1,NWKTR
        AKOTR(I)=AKTR(I)
  450 CONTINUE
      DO 500 I=1,NWK
        AKO(I)=AK(I)
  500 CONTINUE

      ISH=0
      CALL DECOMP(AKTR,NDTR,NEQTR,ISH,IOUT)
      CALL DECOMP(AK,ND,NEQ,ISH,IOUT)

      DO 142 I=1,3
        DO 142 J=1,NEQ
          RSN(J,I)=0.0D0
  142 CONTINUE

      DO 143 I=1,3
        DO 143 J=1,NEQTR
          RTN(J,I)=0.0D0
  143 CONTINUE

      DO 873 I=1,NPRTTR*2
        AMXTR(I,1)=0.0
        AMXTR(I,2)=0.0
  873 CONTINUE

      DO 874 I=1,NPRTST*2
        AMXST(I,1)=0.0
        AMXST(I,2)=0.0
  874 CONTINUE


C ......................................................................
C . ITERATION PROCESS
C ......................................................................

      DO 140 ITE=0,NSOLT
        WRITE(*,3000) ITE,DFLOAT(ITE)/NSOLT*100.

C CALCULATE (ITE+1)TH WHEEL POSITION 
        DO 175 J=1,NWHEEL
          WHPOSINC(J)=WHPOS(J)+ITE*DELT*VEL
  175   CONTINUE

C IDENTIFY ELEMENT NUMBER CORRESPONDING TO WHEEL POSITION AT (ITE+1)TH STEP
        CALL IDWHEEL(NELW,NEID,PELW,WHPOSINC,IDWHPOS,XI,NWHEEL)

C CALCULATE INTERACTION FORCE APPLIED TO TRAIN AT (ITE+1)TH STEP
        CALL SCALFT(PROPC,PROPB,PROPU,FT,ITRAIN,SCALE,NEQTR,
     &  NCARB,NBOGIE)     

C ANALYZE TRAIN SYSTEM
        CALL REDBAK(AKTR,FT,NDTR,NEQTR)
        
        DO 153 J=1,NEQTR
          RTN(J,1)=FT(J)
  153   CONTINUE
    
        IF(ITE.EQ.0) THEN
          DO 171 J=1,NEQTR
            TT(J)=RTN(J,1)
  171     CONTINUE
        ENDIF

C CALCULATE FORCE APPLIED TO STRUCTURE     
        CALL SCALFS(FSS,PROPH,RTN,FS,IDWHPOS,NEID,COOD,XI,NRL,
     &  NWHEEL,NEQTR,NUID,NDOF,NBOGIE,NEQ,NNBE)


C IN CASE OF TRAIN RUNNING ON BRIDGE, CALCULATE TORSIONAL MOMENT DUE TO ECCENTRICITY
        IF(IPATH.EQ.1) THEN
          CALL CALTFS(FS,FSS,IDWHPOS,NEID,XI,NRL,NWHEEL,NUID,NDOF,NEQ,
     &      NNBE,DL0,PI0)
        ENDIF

C ANALYZE STRUCTURE
        CALL REDBAK(AK,FS,ND,NEQ)

        DO 154 J=1,NEQ
          RSN(J,1)=FS(J)
  154   CONTINUE
  
        DO 157 L=1,NEQTR
          RT(L,1)=RTN(L,1)
  157   CONTINUE
        DO 167 L=1,NEQ
          RS(L,1)=RSN(L,1)
  167   CONTINUE

        IPOS=1
        DO 857 K=1,NPRTTR
          IPRT=IPRTTR(K)
          PRTTR(IPOS)=RT(IPRT,1)-TT(IPRT)
          IPOS=IPOS+1
          PRTTR(IPOS)=RT(IPRT,3)/SCALE
          IPOS=IPOS+1
  857   CONTINUE
 
        IPOS=1
        DO 858 K=1,NPRTST
          IPRT=NRL(IPRTST(K,2),IPRTST(K,1))
          PRTST(IPOS)=RS(IPRT,1)
          IPOS=IPOS+1
          PRTST(IPOS)=RS(IPRT,3)/SCALE
          IPOS=IPOS+1
  858   CONTINUE

        TIME=ITE*DELT
        IF(NPRTTR.GT.0) THEN
          WRITE(17,8410) TIME,(PRTTR(K),K=1,NPRTTR*2)
        ENDIF
 
        IF(NPRTST.GT.0) THEN
          WRITE(27,8410) TIME,(PRTST(K),K=1,NPRTST*2)
        ENDIF

        DO 877 K=1,NPRTTR*2
          IF(PRTTR(K).GT.AMXTR(K,1)) AMXTR(K,1)=PRTTR(K)
          IF(PRTTR(K).LT.AMXTR(K,2)) AMXTR(K,2)=PRTTR(K)
  877   CONTINUE

        DO 878 K=1,NPRTST*2
          IF(PRTST(K).GT.AMXST(K,1)) AMXST(K,1)=PRTST(K)
          IF(PRTST(K).LT.AMXST(K,2)) AMXST(K,2)=PRTST(K)
  878   CONTINUE

C WRITE AXLE LOAD
        WRITE(37,8410) TIME,FSS(1), FSS(3), FSS(10)

  140 CONTINUE

      DO 740 I=1,2
        WRITE(47,8420) (AMXTR(J,I),J=1,NPRTTR*2)
        WRITE(57,8420) (AMXST(J,I),J=1,NPRTST*2)
  740 CONTINUE
 
      WRITE(47,8420) (MAX(ABS(AMXTR(J,1)),ABS(AMXTR(J,2))),J=1,NPRTTR*2)
      WRITE(57,8420) (MAX(ABS(AMXST(J,1)),ABS(AMXST(J,2))),J=1,NPRTST*2)
 8420 FORMAT(100E15.7)
  
      RETURN
 3000 FORMAT(1X,'CURRENT TIME STEP = ',I8,3X,F6.2,'%')
 8410 FORMAT(F10.5,100E15.7)
      END
C
C	=======================================================================
      SUBROUTINE WINKSTIF(AKE,ACE,I,COOD,LNWK,MPWK,PRWK,NEWK,NPWK)
      IMPLICIT REAL*8(A-H,O-Z)
      IMPLICIT INTEGER*4 (I-N)
C	-----------------------------------------------------------
C	PROGRAM TO FORM WINKLER ELEMENT MATRIX (STIFFNESS, DAMPING)
C	-----------------------------------------------------------
C	INPUT
C	COOD(NT)        = NODAL COORDINATE
C	LNWK(NEWK,NNWK) = WINKLER ELEMENT CONNECTIVITY
C	MPWK(NEWK)      = MATERIAL PROPERTY SET NUMBER OF WINKLER ELEMENT
C	PRWK(NPWK,2)    = MATERIAL PROPERTY OF WINKLER ELEMENT
C	NEWK            = NUMBER OF WINKLER ELEMENTS
C	NPWK            = NUMBER OF PROPERTY CARDS OF WINKLER ELEMENT

C	OUTPUT
C	AKE(8,8)        = WINKLER ELEMENT STIFFNESS MATRIX
C	ACE(8,8)        = WINKLER ELEMENT DAMPING MATRIX

C	INDEX
C	NT              = NUMBER OF TOTAL NODES
C	NNWK            = NUMBER OF NODES TO MODEL AN WINKLER ELEMENT(=4)
C	-----------------------------------------------------------------------
C      COMMON /IOUNIT/IN,IOUT,NSTIF
      COMMON /DMCO/ IDMA,IANA,IDSO,NNBR,NNRA,NT,NEBEBR,NPBEBR,NLRB,
     +			  NEWKTK,NPWKTK,NEBERA,NPBERA,NDOF,NNBE,NNWK
C
      DIMENSION COOD(*),LNWK(NEWK,*),MPWK(*),PRWK(NPWK,*)
      DIMENSION AKE(12,12),ACE(12,12)

C9Dec      DIMENSION COOD(NT),LNWK(NEWK,NNWK),MPWK(*),PRWK(NPWK,*)
C	-----------------------------------------------------------------------
      DO 10 ITE=1,12
        DO 10 JTE=1,12
          AKE(JTE,ITE)=0.0D0
          ACE(JTE,ITE)=0.0D0
   10 CONTINUE

      J=MPWK(I)

      AE=PRWK(J,1)   ! SPRING COEFFICIENT PER UNIT LENGTH
      XI=PRWK(J,2)   ! DAMPING COEFFICIENT PER UNIT LENGTH

      AL=DABS(COOD(LNWK(I,1))-COOD(LNWK(I,2)))
      AM=DABS(COOD(LNWK(I,3))-COOD(LNWK(I,4)))
      IF(AL.NE.AM) THEN
        WRITE(*,1000) I
        STOP
      ENDIF

C	WINKLER STIFFNESS ELEMENT:
C	--------------------------
      AKE(1,1)=156.*AE
      AKE(1,2)=0.0D0
      AKE(1,3)=22.*AE*AL
      AKE(1,4)=54.*AE
      AKE(1,5)=0.0D0
      AKE(1,6)=-13.*AE*AL
      AKE(2,2)=0.0D0
      AKE(2,3)=0.0D0
      AKE(2,4)=0.0D0
      AKE(2,5)=0.0D0
      AKE(2,6)=0.0D0
      AKE(3,3)=4.*AE*AL**2
      AKE(3,4)=13.*AE*AL
      AKE(3,5)=0.0D0
      AKE(3,6)=-3.*AE*AL**2
      AKE(4,4)=156.*AE
      AKE(4,5)=0.0D0
      AKE(4,6)=-22.*AE*AL
      AKE(5,5)=0.0D0
      AKE(5,6)=0.0D0
      AKE(6,6)=4.*AE*AL**2

      DO 30 JTE=1,6
        DO 30 ITE=JTE,6
          AKE(JTE,ITE)=AL/420.*AKE(JTE,ITE)
   30 CONTINUE

      DO 20 ITE=1,5
        DO 20 JTE=ITE+1,6
          AKE(JTE,ITE)=AKE(ITE,JTE)
   20 CONTINUE
  
      DO 40 ITE=1,6
        DO 40 JTE=1,6
          AKE(JTE+6,ITE)=-AKE(JTE,ITE)
          AKE(JTE,ITE+6)=-AKE(JTE,ITE)
          AKE(JTE+6,ITE+6)=AKE(JTE,ITE)
   40 CONTINUE

C	WINKLER DAMPING MATRIX:
C	-----------------------
      ACE(1,1)=156.*XI
      ACE(1,2)=0.0D0
      ACE(1,3)=22.*XI*AL
      ACE(1,4)=54.*XI
      ACE(1,5)=0.0D0
      ACE(1,6)=-13.*XI*AL
      ACE(2,2)=0.0D0
      ACE(2,3)=0.0D0
      ACE(2,4)=0.0D0
      ACE(2,5)=0.0D0
      ACE(2,6)=0.0D0
      ACE(3,3)=4.*XI*AL**2
      ACE(3,4)=13.*XI*AL
      ACE(3,5)=0.0D0
      ACE(3,6)=-3.*XI*AL**2
      ACE(4,4)=156.*XI
      ACE(4,5)=0.0D0
      ACE(4,6)=-22.*XI*AL
      ACE(5,5)=0.0D0
      ACE(5,6)=0.0D0
      ACE(6,6)=4.*XI*AL**2

      DO 60 JTE=1,6
        DO 60 ITE=JTE,6
          ACE(JTE,ITE)=AL/420.*ACE(JTE,ITE)
   60 CONTINUE

      DO 50 ITE=1,5
        DO 50 JTE=ITE+1,6
          ACE(JTE,ITE)=ACE(ITE,JTE)
   50 CONTINUE

      DO 70 ITE=1,6
        DO 70 JTE=1,6
          ACE(JTE+6,ITE)=-ACE(JTE,ITE)
          ACE(JTE,ITE+6)=-ACE(JTE,ITE)
          ACE(JTE+6,ITE+6)=ACE(JTE,ITE)
   70 CONTINUE

      RETURN
 1000 FORMAT(//,
     &1X'UPPER & LOWER LENGTHS OF WINKLER ELEMENT SHOULD BE THE SAME',/
     &1X,'ELEMENT NUMBER = ',I5)
      END
C
C	=======================================================================