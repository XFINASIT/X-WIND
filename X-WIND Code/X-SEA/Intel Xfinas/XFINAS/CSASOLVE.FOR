C	=======================================================================
C	=== CONSTRUCTION ANALYSIS =============== SONGSAK NOV2007 =============
C	=======================================================================
      SUBROUTINE CONSOLVE
	IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER*4 (I-N)

      COMMON /CONSTINT/ MTOTI(10),NCONI(5000),ICONDT(1)
      COMMON /CONSTREL/ MTOTR(10),NCONR(5000),RCONDT(1)


	ALLOCATABLE STDT(:),FLOAD(:)


C	FILE FOR PRINTING  NOT=ISO
	CALL INTFILL('%IOL',NOT,1,3,0)
	CALL INTFILL('%IOL',ITO,1,2,0)  !SCREEN

C-----CALL CONVERGENCE TOLERANCES-----
	CALL RELFILL('%TOL',TOLS,1,1,0)
	CALL RELFILL('%TOL',TOLF,1,2,0)
	CALL RELFILL('%TOL',TOLI,1,3,0)
	CALL RELFILL('%TOL',TOLC,1,4,0)
	CALL RELFILL('%TOL',TOLL,1,5,0)
	CALL RELFILL('%TOL',TOLM,1,6,0)
	CALL RELFILL('%TOL',TOLD,1,7,0)
	CALL RELFILL('%TOL',TOLR,1,8,0)
	CALL RELFILL('%TOL',TOLN,1,9,0)
	CALL RELFILL('%TOL',FNIT,1,10,0)
	NIT= INT(FNIT)  !MAX ITERATION

C	READ COMMAND
C	CALL FREBUF
C	CALL FREECH

C-----INTERPRET COMMAND LINE-----
      IPRN = 0
      IPRF = 0
	ICPT = 0 

      CALL FREINT ('P',IPRN,1)  !OUTPUT PRINT FLAG

      CALL FREREL ('D',DDAY,1)  !DAY AT END OF SOLUTION
	CALL RELFILL('%EAY',DDAY,1,1,1) !STORE DAY HERE


C	SOLUTION CONTROL
      KANTIM = 0
	NSTP   = 0
      KANLDC = 0
      NLDS   = 1
      CALL FREINT('T',KANTIM,1) !TIME STEP SOLUTION MODE
      CALL FREINT('S',  NSTP,1) !NUMBER OF TIME STEP
      CALL FREINT('C',KANLDC,1) !NONLINEAR SOLUTION STRATEGY... 0 = INITIAL STIFFNESS  1 = MODIFIED NEWTON  2 = FULL NEWTON
      CALL FREINT('L',  NLDS,1) !NUMBER OF LOAD/DISPLACEMENT STEPS

	CALL FREINT('N',   NIT,1) !MAX ITERATION
	CALL FREREL('O',  TOLD,1) !DISP TOLEREANCE 


	NSTP1 = NSTP + 1
	ALLOCATE(STDT(NSTP1),FLOAD(NLDS))



C	READ LOAD FACTOR
      IF(NLDS.LT.2) THEN
      FLOAD(1) = 1.D0
	GO TO 5           !IF SINGLE LOAD STEP...JUMP HERE
      ENDIF
      CALL FREBUF
	CALL FREREL('F',FLOAD(1),NLDS)  !LOAD FACTOR FOR EACH LOAD STEP
5	CONTINUE


C-----SET UP SOLUTION TIMES-----
10	CALL SOLTIM (STDT,NSTP,NOT)


C	ANALYSIS DAY
      CALL DEFNREL('-SOV',KSOV,1,2)  !ARRAY FOR SOLVING  --- TODAY + LOAD FACTOR 
  	
C
C-----NUMBER EQUATIONS----- ALSO CALLING NSF,NSN
C

	CALL LOCATN ('$LID',KLID,NSF,NSN,1)      !EQUATION NUMBER FOR EACH NODE (FULLY FREE STRUCTURE NO SUPPORT RESTRAINT HERE)
	CALL LOCATN ('$MBC',KMBC,NSF,NSN,1)      !BOUNDARY CONDITION
	CALL LOCATN ('$NXF',KNXF,NUM,NSN,1)      !EXISTING NODE
	CALL LOCATN ('$SEQ',KSEQ,NUM,NSN,1)      !NODE SEQUENCE
	NSFN   = NSF*NSN

      CALL DEFNINT('-EQN',KEQN,NSF,NSN)      
	CALL INTZERO('-EQN')      
      CALL DEFNINT('-EQR',KEQR,NSF,NSN)      
	CALL INTZERO('-EQR')   


      CALL EQNMBR (ICONDT(KEQN),ICONDT(KEQR),ICONDT(KMBC),ICONDT(KNXF),
	1			 ICONDT(KSEQ),NSF,NSN,NEQ,NEQR,NOT)

C	MAPPING OF EQUATION & REACTION NUMBER    
      CALL DEFNINT('-EMQ',KEMQ,NSF,NSN)      
	CALL INTZERO('-EMQ')    
      CALL DEFNINT('-EMR',KEMR,NSF,NSN)      
	CALL INTZERO('-EMR')  
      CALL EQNMAP (ICONDT(KEQN),ICONDT(KEQR),ICONDT(KEMQ),ICONDT(KEMR),
	1			 ICONDT(KSEQ),NSF,NSN)

C
C-----SET STIFFNESS MATRIX POINTERS AND UPDATE COLUMN HEIGHT-----
C
	NEQ1 = NEQ+1
      CALL DEFNINT('-LMA',KLMA,1,NEQ1)    
	CALL INTZERO('-LMA')
      CALL STFADR (ICONDT(KEQN),ICONDT(KEQR),ICONDT(KEMQ),ICONDT(KEMR),
	1			 ICONDT(KLMA),NEQ,NEQ1,NSF,NSN,NWK,NOT)

      CALL CLRPARD
C	INITIALIZE THE ARRAY FOR BLOCK SOLVER
	CALL CSABLOK (ICONDT(KLMA),NEQ)

C-----DEFINE WORKING ARRAY-----

C	EXTERNAL JOINT LOAD
	CALL LOCATN ('$XLD',KXLD,NSF,NSN,2) 

C	TOTAL JOINT DISPLACEMENT
	CALL LOCATN ('$XDS',KXDS,NSF,NSN,2) 


C	INCREMENTAL NODAL JOINT LOAD
      CALL LOCATN ('$XLI',KXLI,NSF,NSN,2) 

C	INCREMENTAL NODAL DISPLACEMENT
      CALL LOCATN ('$XDI',KXDI,NSF,NSN,2) 
 

C	UNBALANCE JOINT LOAD
	CALL DEFNREL ('-UBI',KUBI,1  ,NEQ)   
	CALL RELZERO ('-UBI') 


C	TOTAL JOINT REACTION
      CALL DEFNREL ('-RAC',KRAC,NSF,NSN)     
	CALL RELZERO ('-RAC') 

C	ELEMENT EXTERNAL + TEMP LOAD
	CALL DEFNREL ('-ELL',KELL,NSF,NSN)  
	CALL RELZERO ('-ELL') 

C	ELEMENT RESISTING LOAD
	CALL DEFNREL ('-EIS',KEIS,NSF,NSN)  
	CALL RELZERO ('-EIS') 


C	STIFFNESS MATRIX
	CALL MINTFIL('BLOK',NBLOCK,1,1 ,0)
	CALL MINTFIL('BLOK',MSTOR ,1,2 ,0)

	WRITE(*,'(/X,A33,I10)') 'NUMBER OF DOF . . . . . . . . . .',NEQ
	WRITE(*,'( X,A33,I10)') 'SIZE OF STIFFNESS MATRIX. . . . .',NWK
	WRITE(*,'(/X,A33,I10)') 'NUMBER OF IN-CORE STORAGE BLOCK .',NBLOCK
	WRITE(*,'( X,A33,I10/)') 'SIZE OF IN-CORE STORAGE BLOCK . .',MSTOR

      CALL DEFNREL ('-GSF',KGSF,1  ,MSTOR)  
	CALL RELZERO ('-GSF') 
	
	CALL DEFNREL ('-DIG',KDIG,1  ,NEQ)   !DIAGONAL TERMS 
	CALL RELZERO ('-DIG') 


C	INCREMENTAL NODAL LOAD DUE TO NONMECHANICAL STRAINS
      CALL DEFNREL ('-NML',KNML,NSF,NSN )  
	CALL RELZERO ('-NML')  


C	SETTLEMENT LOAD
	CALL DEFNREL ('-STL',KSTL,NSF,NSN)  
	CALL RELZERO ('-STL') 


C	INICREMENTAL DISPLACEMENT
	CALL DEFNREL ('-UXI',KUXI,1  ,NEQ)   
	CALL RELZERO ('-UXI') 


C	---------------------
C	TOTAL JOINT LOAD
	CALL LOCATN ('-LDD',KTLDD,NSF,NSN,2)
	CALL LOCATN ('-LTV',KTLTV,NSF,NSN,2)
	CALL LOCATN ('-LST',KTLST,NSF,NSN,2)
	CALL LOCATN ('-LTM',KTLTM,NSF,NSN,2)
	CALL LOCATN ('-LCT',KTLCT,NSF,NSN,2)
	CALL LOCATN ('-LTP',KTLTP,NSF,NSN,2)
	CALL LOCATN ('-LTS',KTLTS,NSF,NSN,2)
	CALL LOCATN ('-LCP',KTLCP,NSF,NSN,2)
	CALL LOCATN ('-LCS',KTLCS,NSF,NSN,2)
C	INCREMENTAL JOINT LOAD
	CALL LOCATN ('#LDD',KILDD,NSF,NSN,2)
	CALL LOCATN ('#LTV',KILTV,NSF,NSN,2)
	CALL LOCATN ('#LST',KILST,NSF,NSN,2)
	CALL LOCATN ('#LTM',KILTM,NSF,NSN,2)
	CALL LOCATN ('#LCT',KILCT,NSF,NSN,2)
	CALL LOCATN ('#LTP',KILTP,NSF,NSN,2)
	CALL LOCATN ('#LTS',KILTS,NSF,NSN,2)
	CALL LOCATN ('#LCP',KILCP,NSF,NSN,2)
	CALL LOCATN ('#LCS',KILCS,NSF,NSN,2)
C	TOTAL JOINT DISPLACEMENT
	CALL LOCATN ('+XDD',KTTDD,NSF,NSN,2)
	CALL LOCATN ('+XTV',KTTTV,NSF,NSN,2)
	CALL LOCATN ('+XST',KTTST,NSF,NSN,2)
	CALL LOCATN ('+XTM',KTTTM,NSF,NSN,2)
	CALL LOCATN ('+XCT',KTTCT,NSF,NSN,2)
	CALL LOCATN ('+XTP',KTTTP,NSF,NSN,2)
	CALL LOCATN ('+XTS',KTTTS,NSF,NSN,2)
	CALL LOCATN ('+XCP',KTTCP,NSF,NSN,2)
	CALL LOCATN ('+XCS',KTTCS,NSF,NSN,2)


      CALL DEFNREL ('@RDD',KRTDD,NSF,NSN)     
	CALL RELZERO ('@RDD') 
      CALL DEFNREL ('@RTV',KRTTV,NSF,NSN)     
	CALL RELZERO ('@RTV') 
      CALL DEFNREL ('@RST',KRTST,NSF,NSN)     
	CALL RELZERO ('@RST') 
      CALL DEFNREL ('@RTM',KRTTM,NSF,NSN)     
	CALL RELZERO ('@RTM') 
      CALL DEFNREL ('@RCT',KRTCT,NSF,NSN)     
	CALL RELZERO ('@RCT') 
      CALL DEFNREL ('@RTP',KRTTP,NSF,NSN)     
	CALL RELZERO ('@RTP') 
      CALL DEFNREL ('@RTS',KRTTS,NSF,NSN)     
	CALL RELZERO ('@RTS') 
      CALL DEFNREL ('@RCP',KRTCP,NSF,NSN)     
	CALL RELZERO ('@RCP') 
      CALL DEFNREL ('@RCS',KRTCS,NSF,NSN)     
	CALL RELZERO ('@RCS') 
      CALL DEFNREL ('@RNL',KRTNL,NSF,NSN)     
	CALL RELZERO ('@RNL') 
C	---------------------

C
C-----SOLVE IN NSTP TIME STEPS-----
C

C	%SOL 1
C	 0 = NO UPDATE STRESS & STIFFNESS & MATERIAL STATE
C	 1 = UPDATE STRESS & STIFFNESS & MATERIAL STATE
C	 2 = INTERNAL FORCE & STIFFNESS ONLY  NO UPDATE

C	%SOL 2
C	 0 = NO UPDATE DATA
C	 1 = UPDATE DATA AT START OF TIME STEP
C	 2 = UPDATE DATA AT END OF TIME STEP
C	 3 = UPDATE DATA FOREACH ITERATION STEP

C	%SOL 3
C	 0 = NO-ASSEMBLE OF RESISTING LOAD
C	 1 = ASSEMBLE OF NON-MECHANICAL INTERNAL LOAD
C	 2 = ASSEMBLE OF MECHANICAL INTERNAL LOAD
C	 3 = ASSEMBLE OF NON-MECHANICAL & MECHANICAL INTERNAL LOAD
C	 4 = ASSEMBLE MECHANICAL INTERNAL LOAD BUT NO UPDATE AND NO BACK UP OF ELEMENT FORCE 

C	%SOL 4
C	 0 = NO-ASSEMBLE OF STIFFNESS
C	 1 = ASSEMBLE OF STIFFNESS 

C	%SOL 5
C	 0 = NO-ASSEMBLE OF SETTLEMENT LOAD
C	 1 = ASSEMBLE OF SETTLEMENT LOAD

C	%SOL 6
C	 0 = NO-ASSEMBLE OF ELEMENT LOAD
C	 1 = ASSEMBLE OF DEAD LOAD
C	 2 = ASSEMBLE OF EXTERNAL FORCE
C	 3 = ASSEMBLE TEMPERATURE LOAD
C	 4 = EXTERNAL + TEMP. LOAD
   
C	-------------------------------------
C	LOOP OVER TIME STEP
C	-------------------------------------
      DO 5000 ISTP=1,NSTP1


	DNORMO = 0.0D0

	LSTEP = 0
	IF(ISTP.EQ.1) LSTEP = 1
	IF(NSTP1.NE.1.AND.ISTP.EQ.NSTP1) LSTEP = 2
	IF(NSTP1.EQ.1) LSTEP = 3
	CALL INTFILL('$AYS',LSTEP,1,2,1)  !STORE STEP NUMBER FIRST OR LAST STEP NOW --LOAD COMBINATION



C	GET DAY AT THIS TIME STEP (TODAY)
	CALL GETDAY(STDT,ISTP,TODAY)
	CALL RELFILL('-SOV',TODAY,1,1,1) !STORE TODAY

	CALL DAYPRIN(ISTP,TODAY,NOT) !PRINT DAY


	CALL INTZERO('%SOL')
C	UPDATE THE TIME DEPENDENT PARAMETER AND MATERIAL AT THE BIGINING OF TIME STEP
      CALL INTFILL('%SOL',1,1,2,1)
C	ASSEMBLY THE ELEMENT INTERNAL FORCE FROM INCREMENTAL NON-MECHANICAL LOAD
	CALL RELZERO ('-NML')  
      CALL INTFILL('%SOL',1,1,3,1)
C	FOR NEWLY ANALYSIS WE NEED THE INITIAL STIFFNESS
	CALL INTFILL('%SNI',LSNI,1,1,0)
	IF(LSNI.EQ.0) THEN
      CALL INTFILL('%SOL',2,1,1,1)  !STIFFNESS ONLY
	CALL INTFILL('%SNI',1,1,1,1)
	ENDIF
	CALL GRLCON
	CALL TEDCON
	CALL LNKLOOP
	CALL TRVLOOP
	CALL SPIGCON


	FACTOR = 1.0D0
	CALL LODUBL(ICONDT(KEQN),RCONDT(KNML),RCONDT(KUBI),NSF,NSN,FACTOR)  !ADD NON-MECHANICAL FORCE TO UNBALANCE FORCE VECTOR


	FACTOR = 1.0D0
	CALL LOCADD('-LCS','-NML',FACTOR,2)	 !ADD TO TOTAL NON-MECHANICAL LOAD (CREEP&SHRINKAGE)	


	MSTEP = 1
	IF(ISTP.EQ.1) MSTEP = NLDS   !ONLY FIRST TIME STEP FOR EQUILIBRIUM ITERATION FOR EXTERNAL LOAD
C	-------------------------------------
C	LOOP OVER LOAD STEP
C	-------------------------------------
	DO 4000 ILDS=1,MSTEP

	IF(ISTP.GT.1) GOTO 2500  !FOR FIRST TIME STEP (EQUILIBRIUM OF MECHANICAL FORCE) 
C	GET LOAD FACTOR FOR THIS LOAD STEP
	CALL LODFAC(FLOAD,ILDS,FACLOD)
	CALL RELFILL('-SOV',FACLOD,1,2,1) !STORE LOAD FACTOR

	

	CALL INTZERO('%SOL')
C	ASSEMBLE SETTLEMENT LOAD						INCREMENTAL
	CALL RELZERO ('-STL')  
      CALL INTFILL('%SOL',1,1,5,1)
	CALL GRLCON
	CALL TEDCON
	CALL LNKLOOP
	CALL TRVLOOP
	CALL SPIGCON


C	ACCUMULATE THE TOTAL + INCREMENTAL EXTERNAL JOINT LOAD
C	CALL LODADD(RCONDT(KXLD),RCONDT(KXLI),NSFN,FACLOD)  !ADD INCREMENTAL JOINT   LOAD TO TOTAL LOAD VECTOR 
	CALL LOCADD('$XLD','$XLI',FACLOD,2)
	
C	UNBALANCE DEAD LEAD
	CALL LOCADD('-LDD','#LDD',FACLOD,2)

C	UNBALANCE CONSTRUCTION LEAD
	CALL LOCADD('-LCT','#LCT',FACLOD,2)

C	UNBALANCE TRAVELER LEAD
	CALL LOCADD('-LTV','#LTV',FACLOD,2)

C	TEMPERATURE LOAD
	CALL LODUBL(ICONDT(KEQN),RCONDT(KELL),RCONDT(KUBI),NSF,NSN,FACLOD)   !ADD TEMP. LOAD TO UNBALANCE FORCE VECTOR (NON MECHANICAL)
	CALL LOCADD('-LTM','-ELL',FACTOD,2)	

C	ACCUMULATE TOTAL JOINT DISPLACEMENT DUE TO SETTLEMENT
	CALL LODADD(RCONDT(KXDS),RCONDT(KXDI),NSFN,FACLOD)   !ADD INCREMENTAL SETTLEM LOAD TO TOTAL DISP VECTOR 

C	CALL LODADD(RCONDT(KTTST),RCONDT(KXDI),NSFN,FACLOD)  !ADD INCREMENTAL SETTLEM LOAD TO TOTAL DISP FROM SETTLEMENT
	CALL LOCADD('+XST','$XDI',FACLOD,2)

	FACSET = -1.0D0*FACLOD
	CALL LODUBL(ICONDT(KEQN),RCONDT(KSTL),RCONDT(KUBI),NSF,NSN,FACSET)   !ADD SETTLEMENT LOAD TO UNBALANCE FORCE VECTOR (THIS ONE LIKE a  NON MECHANICAL)

	CALL LOCADD('-LST','-STL',FACSET,2)



2500	CONTINUE

C	INITIALIZE INCREMENTAL DISP.
	CALL RELZERO ('-UXI') 

	ICONV = 0
	CALL INTFILL('%COV',ICONV,1,10,1)  !INITILAIZE TOTAL CONVERGENCE FLAG
C	-------------------------------------
C	ITERATION LOOP
C	-------------------------------------
      DO 3000 IIT=1,NIT


	CALL INTZERO('%SOL')
C	UPDATE DATA FOREACH ITERATION
      CALL INTFILL('%SOL',3,1,2,1)
C	INTERNAL FORCE FROM MECHANICAL & NON-MECHANICAL STRAIN
	CALL RELZERO ('-NML')  !INITIALIZE ITERATIVE NON-MCHA LOAD
	CALL RELZERO ('-EIS')  !INITIALIZE ELEMENT RESISTING LOAD
      CALL INTFILL('%SOL',3,1,3,1)

C	ASSEMBLY THE ELEMENT STIFFNESS
	CALL RELZERO ('-GSF')  !INITIALIZE STIFFNESS
C	REWIND ELEMENT RECORD PREPARE TO STORE ELEMENT STIFFNESS
	CALL MINTFIL('BLOK',0,1,3 ,1)	   !INITIALIZE NUMBER OF LINE TO WRITE FOR STIFFNESS ASSEMBLY
	CALL MCALFIL(KEREC,'ETIF')
	REWIND(KEREC)	

      CALL INTFILL('%SOL',1,1,4,1)
C	PERFORM ELEMENT COMMAND
	CALL GRLCON
	CALL TEDCON
	CALL LNKLOOP
	CALL TRVLOOP
	CALL SPIGCON

C	ASSEMBLE THE STIFFNESS FROM ELEMENT RECORDS
	CALL ASSEMB(ICONDT(KLMA),NEQ,'STIF',KSC)

	FACTOR = 1.0D0
	CALL LODUBL(ICONDT(KEQN),RCONDT(KNML),RCONDT(KUBI),NSF,NSN,FACTOR)  !ADD ITERATIVE NON-MECHANICAL FORCE TO UNBALANCE FORCE VECTOR

	FACTOR = 1.0D0
	CALL LOCADD('-LCS','-NML',FACTOR,2)	 !ADD TO TOTAL NON-MECHANICAL LOAD (CREEP&SHRINKAGE)

	FACTOR =  1.0D0
	CALL LODUBL(ICONDT(KEQN),RCONDT(KXLD),RCONDT(KUBI),NSF,NSN,FACTOR)  !ADD TOTAL EXTERNAL FORCE TO UNBALANCE FORCE VECTOR

	FACTOR = -1.0D0
	CALL LODUBL(ICONDT(KEQN),RCONDT(KEIS),RCONDT(KUBI),NSF,NSN,FACTOR)  !ADD ELEMENT RESISTING LOAD TO UNBALANCE FORCE VECTOR

C      CKAK = 0.0D0
C      DO II =1,NEQ
C      CKAK = CKAK + RCONDT(KUBI+II-1) !RCONDT(KUBI+II-1)
C      ENDDO
C      WRITE(*,*) CKAK
C      PAUSE
      
C	SOLVE FOR INC DISP.
	STOL  = 1.0E-8
	INDPD = 2  !FOR POSITIVE DEFINITE STIFFNESS
	CALL XCOLSOL(ICONDT(KLMA),RCONDT(KGSF),RCONDT(KDIG),RCONDT(KUBI),
	1			 NEQ,1,INDPD,STOL,'STIF','TEMP')    !FACTORIZE
	CALL XCOLSOL(ICONDT(KLMA),RCONDT(KGSF),RCONDT(KDIG),RCONDT(KUBI),
	1			 NEQ,2,INDPD,STOL,'TEMP','TEMP')    !BACK SUBSTITUTE

C	ACCUMULATE TOTAL JOINT DISPLACEMENT
	CALL DISACU(ICONDT(KEQN),RCONDT(KXDS),RCONDT(KUBI),NSF,NSN)


	FACTOR = 1.0D0
	CALL LOCADD('-UXI','-UBI',FACTOR,2)	 !ADD ITERATE DISP. INTO INCR DISP.


C	GET DISPLACMENT NORM & CHECK CONVERGENCE
	DNORM = DINORM(RCONDT(KXDS),NSFN)
	DCONV = DNORM
	IF(DNORMO.NE.0.0D0) DCONV = ABS((DNORMO-DNORM)/DNORMO*100.0D0)
	DNORMO = DNORM

	IF(DCONV.LT.TOLD.AND.IIT.GT.1) THEN  !CONVERGENCE ACHIEVED
	ICONV = 1
	CALL INTFILL('%COV',ICONV,1,10,1)
	ENDIF


	CALL INTZERO('%SOL')
C	UPDATE STRESS AND MATERIAL STATE
      CALL INTFILL('%SOL',1,1,1,1)
      CALL INTFILL('%SOL',2,1,3,1)
	CALL RELZERO ('-EIS')  !INITIALIZE ELEMENT RESISTING LOAD
C	PERFORM ELEMENT COMMAND
	CALL GRLCON
	CALL TEDCON
	CALL LNKLOOP
	CALL TRVLOOP
	CALL SPIGCON

C	LAST LOAD COMPONENT (TOTAL)
	CALL GRLSTS



	WRITE(ITO,8000) TODAY,ILDS,IIT,DCONV
      WRITE(10,8000) TODAY,ILDS,IIT,DCONV


	CALL RELZERO ('-UBI')  !INITIALIZE UNBALANCE LOAD VEC
 

	CALL INTFILL('%COV',ICONV,1,10,0)
	IF(ICONV.GT.0) GOTO 3500


C	-------------------------------------
3000	CONTINUE	
C	-------------------------------------

3500	CONTINUE


C	LOAD COMPONENT CALCULATION AT THE END OF ITERATION
	CALL CSACOMP


	CALL INTZERO('%SOL')
C	UPDATE DATA FOREACH ITERATION FOR LAST ITERTION STEP
      CALL INTFILL('%SOL',3,1,2,1)
C	PERFORM ELEMENT COMMAND
	CALL GRLCON
	CALL TEDCON
	CALL LNKLOOP
	CALL TRVLOOP
	CALL SPIGCON



C	-------------------------------------
4000	CONTINUE
C	-------------------------------------


	CALL INTZERO('%SOL')
C	UPDATE DATA AT END OF TIME STEP
      CALL INTFILL('%SOL',2,1,2,1)
C	PERFORM ELEMENT COMMAND
	CALL GRLCON
	CALL TEDCON
	CALL LNKLOOP
	CALL TRVLOOP
	CALL SPIGCON


C	-------------------------------
C	GET TOTAL REACTION 
	CALL INTZERO('%SOL')
C	ELEMENT MECHANICAL RESISTING FORCE 
	CALL RELZERO('-EIS')  
      CALL INTFILL('%SOL',2,1,1,1)
      CALL INTFILL('%SOL',2,1,3,1)
C	PERFORM ELEMENT COMMAND
	CALL GRLCON
	CALL TEDCON
	CALL LNKLOOP
	CALL TRVLOOP
	CALL SPIGCON

	CALL RELZERO ('-RAC') 
	FACTOR = -1.0D0
	CALL LODRAC(ICONDT(KEQR),RCONDT(KRAC),RCONDT(KXLD),NSF,NSN,FACTOR)  !ADD TOTAL EXTERNAL FORCE TO REACTION
	FACTOR =  1.0D0
	CALL LODRAC(ICONDT(KEQR),RCONDT(KRAC),RCONDT(KEIS),NSF,NSN,FACTOR)  !ADD ELEMENT RESISTING LOAD TO REACTION
	FACTOR =  1.0D0
	CALL TRNRAC(RCONDT(KRAC),NSF,NSN,FACTOR)  !TRANSFORM TO GLOBAL SUPPORT
C	-------------------------------

C	-------------------------------
C	GET DEAD LOAD REACTION 
	CALL LOCATN ('-ODD',KOLDD,NR,NC,2)    !TOTAL OLD LOAD 
	CALL RELZERO ('@RDD') 
	FACTOR = -1.0D0
	CALL LODRAC(ICONDT(KEQR),RCONDT(KRTDD),RCONDT(KTLDD),NSF,NSN,FACTOR)  !ADD TOTAL EXTERNAL FORCE TO REACTION
	FACTOR =  1.0D0
	CALL LODRAC(ICONDT(KEQR),RCONDT(KRTDD),RCONDT(KOLDD),NSF,NSN,FACTOR)  !ADD ELEMENT RESISTING LOAD TO REACTION
	FACTOR =  1.0D0
	CALL TRNRAC(RCONDT(KRTDD),NSF,NSN,FACTOR)  !TRANSFORM TO GLOBAL SUPPORT
C	-------------------------------
C	-------------------------------
C	GET TRAVELER LOAD REACTION 
	CALL LOCATN ('-OTV',KOLTV,NR,NC,2)    !TOTAL OLD LOAD 
	CALL RELZERO ('@RTV') 
	FACTOR = -1.0D0
	CALL LODRAC(ICONDT(KEQR),RCONDT(KRTTV),RCONDT(KTLTV),NSF,NSN,FACTOR)  !ADD TOTAL EXTERNAL FORCE TO REACTION
	FACTOR =  1.0D0
	CALL LODRAC(ICONDT(KEQR),RCONDT(KRTTV),RCONDT(KOLTV),NSF,NSN,FACTOR)  !ADD ELEMENT RESISTING LOAD TO REACTION
	FACTOR =  1.0D0
	CALL TRNRAC(RCONDT(KRTTV),NSF,NSN,FACTOR)  !TRANSFORM TO GLOBAL SUPPORT
C	-------------------------------
C	-------------------------------
C	GET SETTLEMENT LOAD REACTION 
	CALL LOCATN ('-OST',KOLST,NR,NC,2)    !TOTAL OLD LOAD 
	CALL RELZERO ('@RST') 
	FACTOR = -1.0D0
	CALL LODRAC(ICONDT(KEQR),RCONDT(KRTST),RCONDT(KTLST),NSF,NSN,FACTOR)  !ADD TOTAL EXTERNAL FORCE TO REACTION
	FACTOR =  1.0D0
	CALL LODRAC(ICONDT(KEQR),RCONDT(KRTST),RCONDT(KOLST),NSF,NSN,FACTOR)  !ADD ELEMENT RESISTING LOAD TO REACTION
	FACTOR =  1.0D0
	CALL TRNRAC(RCONDT(KRTST),NSF,NSN,FACTOR)  !TRANSFORM TO GLOBAL SUPPORT
C	-------------------------------
C	-------------------------------
C	GET TEMPERATURE LOAD REACTION 
	CALL LOCATN ('-OTM',KOLTM,NR,NC,2)    !TOTAL OLD LOAD 
	CALL RELZERO ('@RTM') 
	FACTOR = -1.0D0
	CALL LODRAC(ICONDT(KEQR),RCONDT(KRTTM),RCONDT(KTLTM),NSF,NSN,FACTOR)  !ADD TOTAL EXTERNAL FORCE TO REACTION
	FACTOR =  1.0D0
	CALL LODRAC(ICONDT(KEQR),RCONDT(KRTTM),RCONDT(KOLTM),NSF,NSN,FACTOR)  !ADD ELEMENT RESISTING LOAD TO REACTION
	FACTOR =  1.0D0
	CALL TRNRAC(RCONDT(KRTTM),NSF,NSN,FACTOR)  !TRANSFORM TO GLOBAL SUPPORT
C	-------------------------------
C	-------------------------------
C	GET CONSTRUCTION LOAD REACTION 
	CALL LOCATN ('-OCT',KOLCT,NR,NC,2)    !TOTAL OLD LOAD 
	CALL RELZERO ('@RCT') 
	FACTOR = -1.0D0
	CALL LODRAC(ICONDT(KEQR),RCONDT(KRTCT),RCONDT(KTLCT),NSF,NSN,FACTOR)  !ADD TOTAL EXTERNAL FORCE TO REACTION
	FACTOR =  1.0D0
	CALL LODRAC(ICONDT(KEQR),RCONDT(KRTCT),RCONDT(KOLCT),NSF,NSN,FACTOR)  !ADD ELEMENT RESISTING LOAD TO REACTION
	FACTOR =  1.0D0
	CALL TRNRAC(RCONDT(KRTCT),NSF,NSN,FACTOR)  !TRANSFORM TO GLOBAL SUPPORT
C	-------------------------------
C	-------------------------------
C	GET TENDON PRIMARY LOAD REACTION 
C	CALL LOCATN ('-OTP',KOLTP,NR,NC,2)    !TOTAL OLD LOAD 
C	CALL RELZERO ('@RTP') 
C	FACTOR = -1.0D0
C	CALL LODRAC(ICONDT(KEQR),RCONDT(KRTTP),RCONDT(KTLTP),NSF,NSN,FACTOR)  !ADD TOTAL EXTERNAL FORCE TO REACTION
C	FACTOR =  1.0D0
C	CALL LODRAC(ICONDT(KEQR),RCONDT(KRTTP),RCONDT(KOLTP),NSF,NSN,FACTOR)  !ADD ELEMENT RESISTING LOAD TO REACTION
C	FACTOR =  1.0D0
C	CALL TRNRAC(RCONDT(KRTTP),NSF,NSN,FACTOR)  !TRANSFORM TO GLOBAL SUPPORT
C	-------------------------------
C	-------------------------------
C	GET TENDON SECONDARY LOAD REACTION 
	CALL LOCATN ('-OTP',KOLTP,NR,NC,2)    !TOTAL OLD LOAD PRIMARY
	CALL LOCATN ('-OTS',KOLTS,NR,NC,2)    !TOTAL OLD LOAD SECONDARY
	CALL RELZERO ('@RTS') 
C	FACTOR = -1.0D0
C	CALL LODRAC(ICONDT(KEQR),RCONDT(KRTTS),RCONDT(KTLTS),NSF,NSN,FACTOR)  !ADD TOTAL EXTERNAL FORCE TO REACTION
	FACTOR =  1.0D0
	CALL LODRAC(ICONDT(KEQR),RCONDT(KRTTS),RCONDT(KOLTS),NSF,NSN,FACTOR)  !ADD ELEMENT RESISTING LOAD TO REACTION
	FACTOR =  1.0D0
	CALL LODRAC(ICONDT(KEQR),RCONDT(KRTTS),RCONDT(KOLTP),NSF,NSN,FACTOR)  !SUBTRACT REACTION FROM TENDON PRIMARY
	FACTOR =  1.0D0
	CALL TRNRAC(RCONDT(KRTTS),NSF,NSN,FACTOR)  !TRANSFORM TO GLOBAL SUPPORT
C	-------------------------------
C	-------------------------------
C	GET CREEP PRIMARY LOAD REACTION 
C	CALL LOCATN ('-OCP',KOLCP,NR,NC,2)    !TOTAL OLD LOAD 
C	CALL RELZERO ('@RCP') 
C	FACTOR = -1.0D0
C	CALL LODRAC(ICONDT(KEQR),RCONDT(KRTCP),RCONDT(KTLCP),NSF,NSN,FACTOR)  !ADD TOTAL EXTERNAL FORCE TO REACTION
C	FACTOR =  1.0D0
C	CALL LODRAC(ICONDT(KEQR),RCONDT(KRTCP),RCONDT(KOLCP),NSF,NSN,FACTOR)  !ADD ELEMENT RESISTING LOAD TO REACTION
C	FACTOR =  1.0D0
C	CALL TRNRAC(RCONDT(KRTCP),NSF,NSN,FACTOR)  !TRANSFORM TO GLOBAL SUPPORT
C	-------------------------------
C	-------------------------------
C	GET CREEP SECONDARY LOAD REACTION 
	CALL LOCATN ('-OCS',KOLCS,NR,NC,2)    !TOTAL OLD LOAD 
	CALL RELZERO ('@RCS') 
	FACTOR = -1.0D0
	CALL LODRAC(ICONDT(KEQR),RCONDT(KRTCS),RCONDT(KTLCS),NSF,NSN,FACTOR)  !ADD TOTAL EXTERNAL FORCE TO REACTION
	FACTOR =  1.0D0
	CALL LODRAC(ICONDT(KEQR),RCONDT(KRTCS),RCONDT(KOLCS),NSF,NSN,FACTOR)  !ADD ELEMENT RESISTING LOAD TO REACTION
	FACTOR =  1.0D0
	CALL TRNRAC(RCONDT(KRTCS),NSF,NSN,FACTOR)  !TRANSFORM TO GLOBAL SUPPORT
C	-------------------------------
C	-------------------------------
C	GET NONLINEAR EFFECT REACTION
	CALL RELZERO ('@RNL') 
	FACTOR =  1.0D0
	CALL LODRAC(ICONDT(KEQR),RCONDT(KRTNL),RCONDT(KRAC ),NSF,NSN,FACTOR)  !GET REACTION TOTAL
	FACTOR = -1.0D0
	CALL LODRAC(ICONDT(KEQR),RCONDT(KRTNL),RCONDT(KRTDD),NSF,NSN,FACTOR)  !SUB REACTION DEAD
	FACTOR = -1.0D0
	CALL LODRAC(ICONDT(KEQR),RCONDT(KRTNL),RCONDT(KRTTV),NSF,NSN,FACTOR)  !SUB REACTION TRAVELER
	FACTOR = -1.0D0
	CALL LODRAC(ICONDT(KEQR),RCONDT(KRTNL),RCONDT(KRTST),NSF,NSN,FACTOR)  !SUB REACTION SETTLEMENT
	FACTOR = -1.0D0
	CALL LODRAC(ICONDT(KEQR),RCONDT(KRTNL),RCONDT(KRTTM),NSF,NSN,FACTOR)  !SUB REACTION TEMPERATURE
	FACTOR = -1.0D0
	CALL LODRAC(ICONDT(KEQR),RCONDT(KRTNL),RCONDT(KRTCT),NSF,NSN,FACTOR)  !SUB REACTION CONSTRUCTION
	FACTOR = -1.0D0
	CALL LODRAC(ICONDT(KEQR),RCONDT(KRTNL),RCONDT(KRTTS),NSF,NSN,FACTOR)  !SUB REACTION TENDON SECONDARY
	FACTOR = -1.0D0
	CALL LODRAC(ICONDT(KEQR),RCONDT(KRTNL),RCONDT(KRTCS),NSF,NSN,FACTOR)  !SUB REACTION CREEP SECNDARY

	FACTOR =  1.0D0
	CALL LODRAC(ICONDT(KEQR),RCONDT(KRTCT),RCONDT(KRTNL),NSF,NSN,FACTOR)  !ADD NONLINEAR REACTON INTO CONSTRUCTION REACTION	
	FACTOR =  1.0D0
	CALL TRNRAC(RCONDT(KRTCT),NSF,NSN,FACTOR)  !TRANSFORM CONSTRUCTION REACTION INTO GLOBAL SUPPORT
C	-------------------------------

	

C	UPDATE PREVIOUS DAY
	CALL RELFILL('%EAY',TODAY,1,2,1)   

	KPRINT = 0
	IF(KPRINT.EQ.1) THEN
	CALL JOLPRIN(ICONDT(KNXF),RCONDT(KXLD),NSF,NSN,NOT,'-XLD')
	CALL JOLPRIN(ICONDT(KNXF),RCONDT(KEIS),NSF,NSN,NOT,'-EIS')
	CALL JOLPRIN(ICONDT(KNXF),RCONDT(KXDS),NSF,NSN,NOT,'-XDS')
	CALL JOLPRIN(ICONDT(KNXF),RCONDT(KRAC),NSF,NSN,NOT,'-RAC')

	CALL JOLPRIN(ICONDT(KNXF),RCONDT(KTTDD),NSF,NSN,NOT,'-TDD')
	CALL JOLPRIN(ICONDT(KNXF),RCONDT(KTTTV),NSF,NSN,NOT,'-TTV')
	CALL JOLPRIN(ICONDT(KNXF),RCONDT(KTTST),NSF,NSN,NOT,'-TST')
	CALL JOLPRIN(ICONDT(KNXF),RCONDT(KTTCT),NSF,NSN,NOT,'-TCT')
	CALL JOLPRIN(ICONDT(KNXF),RCONDT(KTTTS),NSF,NSN,NOT,'-TTS')
	CALL JOLPRIN(ICONDT(KNXF),RCONDT(KTTCS),NSF,NSN,NOT,'-TCS')

	CALL GRLPRN
	ENDIF

	CALL TEDOUT

C	LOAD COMBINATION PRINTING
	CALL CSALODC 


	CALL RELFILL('$XDS',DISPT,2,1,0)  !2,32
C	CALL RELFILL('$XDS',DISPT2,2,43,0)  !2,32

C	WRITE(*,*) 'KAK'
C	CALL RELFILL('-RAC',DISPT,6,1,0)
	WRITE(110,*)  TODAY,DISPT !,DISPT2



C	-------------------------------------
5000	CONTINUE
C	-------------------------------------


	DEALLOCATE(STDT,FLOAD)


	CALL INTFILL('%SNI',0,1,1,1) !STIFFNES UPDATE FLAG (HAVE TO RESET HERE BECAUSE THERE MAY HAVE THE NEW INSTALLATION IN NEXT ANALYSIS)

	CALL DELTREL('-SOV') 
	CALL DELTINT('-EQN')   
	CALL DELTINT('-EQR') 
	CALL DELTINT('-EMQ')   
	CALL DELTINT('-EMR') 
	CALL DELTINT('-LMA')  
	CALL DELTREL('-EIS')
	CALL DELTREL('-UBI') 
	CALL DELTREL('-RAC') 
	CALL DELTREL('-NML') 
	CALL DELTREL('-ELL') 
	CALL DELTREL('-STL') 
	CALL DELTREL('-GSF') 
	CALL DELTREL('-DIG') 
	CALL DELTREL('-UXI') 


C	REACTION
	CALL DELTREL('@RDD')  
	CALL DELTREL('@RTV')   
	CALL DELTREL('@RST')  
	CALL DELTREL('@RTM')  
	CALL DELTREL('@RCT')  
	CALL DELTREL('@RTP')  
	CALL DELTREL('@RTS')  
	CALL DELTREL('@RCP')  
	CALL DELTREL('@RCS') 
	CALL DELTREL('@RNL') 
C	-------------------------------------
C	-------------------------------------
8000	FORMAT(X,'ANALYSIS DAY =',E12.4,
	1	   X,'LD STP No.',I4,
	2	   X,'ITR No.',I4,
	3	   X,'CUR NORM ',E12.4)

	RETURN

      END

C	=======================================================================
C	=== CONSTRUCTION ANALYSIS =============== SONGSAK NOV2007 =============
C	=======================================================================


      SUBROUTINE SOLTIM (STDT,NSTP,NOT)
C
C------------------------------------------
C     SET UP LOG-LINEAR SOLUTION TIMES    -
C------------------------------------------
C
      IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER*4 (I-N)

      DIMENSION ENDAY(2),STDT(1)

	CALL RELFILL('%EAY',ENDAY(1),1,1,0)
	CALL RELFILL('%EAY',ENDAY(2),1,2,0)

      ENDAY(1) = DMAX1(ENDAY(1),ENDAY(2))

C
      WRITE(NOT,2001) ENDAY(2),ENDAY(1)

C
C-----SET UP SOLUTION TIMES-----
C
      STDT(1) = ENDAY(2)     !FIRST DAY IS FOR EQUILIBRIUM ITERATION FIRST
      IF(NSTP.EQ.0) RETURN
C
      FSTP = NSTP
	TDLS = 0.0D0
      TDLF = 0.0D0
      IF(ENDAY(2).GE.1.0D0) TDLS = DLOG10(ENDAY(2))
      IF(ENDAY(1).GE.1.0D0) TDLF = DLOG10(ENDAY(1))
C      TDLS = ENDAY(2)
C      TDLF = ENDAY(1)
      TDLI = (TDLF - TDLS) / FSTP
C
      DO 10 NS=1,NSTP
      TDLS = TDLS + TDLI
      IDAY = 10.0**TDLS !DEXP(TDLS)
C      IDAY = TDLS
   10 STDT(NS+1) = IDAY
      STDT(NSTP+1) = ENDAY(1)
C


      RETURN
 2001 FORMAT (//2X,'DAY AT START OF SOLUTION  =',1PE10.2,
     1         /2X,'DAY AT END   OF SOLUTION  =',1PE10.2/)
      END

C	=======================================================================
C	=== CONSTRUCTION ANALYSIS =============== SONGSAK NOV2007 =============
C	=======================================================================
      SUBROUTINE GETDAY (STDT,ISTP,TODAY)
      IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER*4 (I-N)
C	------------------------------------------
C     CALLING ANALYSIS DAY
C	------------------------------------------

      DIMENSION STDT(1)

	TODAY = STDT(ISTP)

      RETURN
      END


C	=======================================================================
C	=== CONSTRUCTION ANALYSIS =============== SONGSAK NOV2007 =============
C	=======================================================================
      SUBROUTINE LODFAC(FLOAD,ILDS,FACLOD)
      IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER*4 (I-N)
C	------------------------------------------
C     CALLING ANALYSIS DAY
C	------------------------------------------

      DIMENSION FLOAD(1)

	FACLOD = FLOAD(ILDS)

      RETURN
      END


C	=======================================================================
C	=== CONSTRUCTION ANALYSIS =============== SONGSAK NOV2007 =============
C	=======================================================================

      SUBROUTINE EQNMBR (IEQN,IEQR,IMBC,INXF,ISEQ,
	1				   NSF,NSN,NEQ,NEQR,NOT)
	IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER*4 (I-N)

C	----------------------------------------------
C     NUMBER EQUATIONS AT EACH ACTIVE NODE    -
C	----------------------------------------------
      DIMENSION IMBC(NSF,NSN),INXF(1),ISEQ(1)
	DIMENSION IEQN(NSF,NSN),IEQR(NSF,NSN)
	DIMENSION IDOF(9)

      DIMENSION IATV(NSF,NSN)
      
C	----------------------------------------
C     Active DOF (Occupied by active element)

C     SET ALL DOF TO BE NON-OCCUPIED ---> WAITING FOR ACTIVE ELEMENT TO OCCUPIED THEM
      IATV(1:NSF,1:NSN) = 1
      
C	DUE TO ELEMENT GROUP
	CALL ELMEATV(IATV)

C	DUE TO TENDON
	CALL TDNEATV(IATV)

C	DUE TO LINK
	CALL LNKEATV(IATV)

C	DUE TO TRAVELER
	CALL TRVEATV(IATV)
C	----------------------------------------

c      DO I = 1,NSN
c      WRITE(*,1111) I,IATV(1:NSF,I)
c      ENDDO
c      PAUSE
c1111  FORMAT(I5,2X,9I3)      
      
	
C	----------------------------------------
C	CALLING IDOF
C	----------------------------------------
	DO I = 1,9
	CALL INTFILL('%DOF',IDOF(I),1,I,0)
	ENDDO

      NEQ  = 0
	NEQR = 0
      DO 30 NN=1,NSN
      N = ISEQ(NN)
	IF(INXF(N).LE.0) IEQR(1:NSF,N) = -1
      IF(INXF(N).LE.0) GO TO 30
      DO 20 I=1,NSF
      IF(IMBC(I,N).GT.0.OR.IATV(I,N).GT.0) THEN !FOR RESTRAINT DOF
	NEQR = NEQR + 1
      IEQR(I,N) = NEQR
	GO TO 20
      ENDIF
	NEQ = NEQ + 1
      IEQN(I,N) = NEQ
   20 CONTINUE
   30 CONTINUE
C
	WRITE(NOT,2000) NEQ
      WRITE(NOT,2001) IDOF(1:NSF)
	WRITE(NOT,2002)
      DO 40 N=1,NSN
      IF(INXF(N).LE.0) GO TO 40
      WRITE(NOT,2003) N,(IMBC(I,N),I=1,NSF)
   40 CONTINUE
	WRITE(NOT,2004)
      DO 50 N=1,NSN
      IF(INXF(N).LE.0) GO TO 50
      WRITE(NOT,2005) N,(IEQN(I,N),I=1,NSF)
   50 CONTINUE

	CALL INTFILL('%NUB',NEQ ,1,6,1)  !STORE HERE NEQ
	CALL INTFILL('%NUB',NEQR,1,7,1)  !STORE HERE NEQR
      
	RETURN

 2000 FORMAT(//,' NODE RESTRAINTS AND EQUATION NUMBERS NEQ =',I15/)
 2001	FORMAT(   '      WITH DOF =',10I3/)
 2002	FORMAT(/  '  NODE NO.',23X,'-RESTRAINT-'/)
 2003 FORMAT(1X,I5,6X,9I9)
 2004	FORMAT(/  '  NODE NO.',23X,'-EQUATIONS-'/)
 2005 FORMAT(1X,I5,6X,9I9)

      END


C	=======================================================================
C	=== CONSTRUCTION ANALYSIS =============== SONGSAK NOV2007 =============
C	=======================================================================
      SUBROUTINE EQNMAP (IEQN,IEQR,IEMQ,IEMR,ISEQ,
	1				   NSF,NSN)
	IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER*4 (I-N)

C	----------------------------------------------
C     NUMBER EQUATIONS AT EACH ACTIVE NODE    -
C	----------------------------------------------
      DIMENSION IEMQ(1),IEMR(1),ISEQ(1)
	DIMENSION IEQN(NSF,NSN),IEQR(NSF,NSN)


	J = 0
      DO 30 NN=1,NSN
      N = ISEQ(NN)

      DO 20 I=1,NSF

	J = J+1
	IF(IEQN(I,N).GT.0) THEN
	IEMQ(J) = IEQN(I,N)
	ENDIF

	IF(IEQR(I,N).GT.0) THEN
	IEMR(J) = IEQR(I,N)
	ENDIF

   20 CONTINUE
   30 CONTINUE

	RETURN

      END


C	=======================================================================
C	=== CONSTRUCTION ANALYSIS =============== SONGSAK NOV2007 =============
C	=======================================================================

      SUBROUTINE STFADR (IEQN,IEQR,IEMQ,IEMR,MAXA,
	1				   NEQ,NEQ1,NSF,NSN,NWK,NOT)
	IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER*4 (I-N)
C	----------------------------------------
C     FIND STIFFNESS MATRIX POINTERS MAXA    -
C	----------------------------------------

      DIMENSION MHT(NEQ),MAXA(1)
	DIMENSION IEQN(NSF,NSN),IEQR(NSF,NSN)
      DIMENSION IEMQ(1),IEMR(1)

C-----FIND COLUMN HEIGHTS-----
	MHT(1:NEQ) = 0

C	DUE TO ELEMENT GROUP
	CALL ELMEQNR(MHT,IEMQ,IEMR)

C	DUE TO TENDON
	CALL TDNEQNR(MHT,IEMQ,IEMR)

C	DUE TO LINK
	CALL LNKEQNR(MHT,IEMQ,IEMR)

C	DUE TO TRAVELER
	CALL TRVEQNR(MHT,IEMQ,IEMR)

C	-----------------------------------------
C	FIND DIAGONAL ELEMENT ADDRESSES MAXA-----
C	-----------------------------------------
      MAXA(1) = 1
      MK      = 0                              !MAXIMUM COLHEI
      DO 250  IEQ=1,NEQ
      IF (MHT(IEQ).GT.MK) MK = MHT(IEQ)
 250  MAXA(IEQ+1) = MAXA(IEQ) + MHT(IEQ) + 1
      MK  = MK+1
      NWK = MAXA(NEQ1) - MAXA(1)               !SIZE OF STIFFNESS
      BM  = FLOAT(NWK)/FLOAT(NEQ)              !MEAN BANDWIDTH


	CALL INTFILL('%NUB',NWK,1,8,1)  !STORE HERE NWK
C	-----------------------------------------

C	-----------------------------------------
C	OUTPUT-----
C	-----------------------------------------
	WRITE(NOT,1900) NWK
      WRITE(NOT,2000)
      I2 = 1
      DO 75 J=1,NEQ
      I1 = I2 + 1
      I2 = I1 + 11
      IF(I2.GT.NEQ) I2 = NEQ
      WRITE(NOT,2001) (I,I=I1,I2)
      WRITE(NOT,2002) (MAXA(I),I=I1,I2)
      IF(I2.EQ.NEQ) GO TO 80
   75 CONTINUE
C
   80 WRITE(NOT,2003)
C	-----------------------------------------

      RETURN
C
 1900 FORMAT (/,' SIZE OF STIFFNESS MATRIX (UPPER TRIANGULAR)',I15/)
 2000 FORMAT (//,' EQUATION DIAGONAL ELEMENT ADDRESSES',/,1X,35('-'))
 2001 FORMAT (/,'  EQUATION',12I9)
 2002 FORMAT (  '   ADDRESS',12I9)
 2003 FORMAT (' ')
      END


C	=======================================================================
C	=== CONSTRUCTION ANALYSIS =============== SONGSAK NOV2007 =============
C	=======================================================================
      SUBROUTINE LODADD (A,B,N,F)
	IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER*4 (I-N)

	DIMENSION A(1),B(1)


	DO I = 1,N
	A(I) = A(I) + F*B(I)
	ENDDO


	RETURN
      END


C	=======================================================================
C	=== CONSTRUCTION ANALYSIS =============== SONGSAK NOV2007 =============
C	=======================================================================
      SUBROUTINE LODUBL2 (IEQN,FXLD,FEIS,FUBI,NSF,NSN)
	IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER*4 (I-N)
C	ASSEMBLE RESISTING LOAD
	DIMENSION IEQN(NSF,NSN)
	DIMENSION FXLD(NSF,NSN),FEIS(NSF,NSN)
	DIMENSION FUBI(1)       !UNBALANCE FORCE VECTOR


	DO ISN = 1,NSN
	DO ISF = 1,NSF
	IEQ = IEQN(ISF,ISN)
	IF(IEQ.GT.0) FUBI(IEQ) = FXLD(ISF,ISN) - FEIS(ISF,ISN) 
	ENDDO
	ENDDO


	RETURN
      END


C	=======================================================================
C	=== CONSTRUCTION ANALYSIS =============== SONGSAK NOV2007 =============
C	=======================================================================
      SUBROUTINE LODUBL (IEQN,FX,FU,NSF,NSN,FAC)
	IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER*4 (I-N)
C	ASSEMBLE RESISTING LOAD
	DIMENSION IEQN(NSF,NSN)
	DIMENSION FX(NSF,NSN)
	DIMENSION FU(1),FM(NSF)       !UNBALANCE FORCE VECTOR



	DO ISN = 1,NSN
	FM(1:NSF) = FX(1:NSF,ISN) 
	CALL FORCLAX(ISN,FM,NSF,0)  !TRANSFORMATION TO LOCAL SUPPORT  BT*C
	DO ISF = 1,NSF
	IEQ = IEQN(ISF,ISN)
	IF(IEQ.GT.0) FU(IEQ) = FU(IEQ) + FM(ISF)*FAC
	ENDDO
	ENDDO



	RETURN
      END

C	=======================================================================
C	=== CONSTRUCTION ANALYSIS =============== SONGSAK NOV2007 =============
C	=======================================================================
      SUBROUTINE DIFLOD (IEQN,FO,FI,NSF,NSN)
	IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER*4 (I-N)
C	INCREMENTAL LOAD CORESPONDING TO EQUATION NUMBER
	DIMENSION IEQN(NSF,NSN)
	DIMENSION FN(NSF,NSN)
	DIMENSION FO(NSF,NSN)
	DIMENSION FI(1),FD(NSF),FM(NSF)    


	DO ISN = 1,NSN

	FD(1:NSF) = 0.0D0
	DO ISF = 1,NSF
	IEQ = IEQN(ISF,ISN)
	IF(IEQ.GT.0) FD(ISF) = FD(ISF) + FI(IEQ) 
	ENDDO
	CALL FORCLAX(ISN,FD,NSF,1)  !TRANSFORMATION TO GLOBAL SUPPORT  B*C	


	FM(1:NSF) = FO(1:NSF,ISN)
	CALL FORCLAX(ISN,FM,NSF,0)  !TRANSFORMATION TO LOCAL SUPPORT  BT*C
	DO ISF = 1,NSF
	IEQ = IEQN(ISF,ISN)
	IF(IEQ.GT.0) FI(IEQ) = FI(IEQ) - FM(ISF)
	FO(ISF,ISN) = FD(ISF) 
	ENDDO


	ENDDO



	RETURN
      END


C	=======================================================================
C	=== CONSTRUCTION ANALYSIS =============== SONGSAK NOV2007 =============
C	=======================================================================
      SUBROUTINE LODMOV (A,B,N,F)
	IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER*4 (I-N)
C	ASSEMBLE RESISTING LOAD
	DIMENSION A(1),B(1)

	DO I = 1,N
	B(I) = A(I)*F
	ENDDO


	RETURN
      END


C	=======================================================================
C	=== CONSTRUCTION ANALYSIS =============== SONGSAK NOV2007 =============
C	=======================================================================
      SUBROUTINE LODRAC (IEQR,FRAC,FXLD,NSF,NSN,FAC)
	IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER*4 (I-N)
C	ASSEMBLE REACTION
	DIMENSION IEQR(NSF,NSN)
	DIMENSION FRAC(NSF,NSN),FXLD(NSF,NSN),FM(NSF)

	DO ISN = 1,NSN
	FM(1:NSF) = FXLD(1:NSF,ISN)
	CALL FORCLAX(ISN,FM,NSF,0)  !TRANSFORMATION TO LOCAL SUPPORT  BT*C	
	DO ISF = 1,NSF
	IER = IEQR(ISF,ISN)

	IF(IER.GT.0) FRAC(ISF,ISN) = FRAC(ISF,ISN) + FAC*FM(ISF)         !GET REACTION HERE

	ENDDO
	ENDDO


	RETURN
      END


C	=======================================================================
C	=== CONSTRUCTION ANALYSIS =============== SONGSAK NOV2007 =============
C	=======================================================================
      SUBROUTINE TRNRAC (FRAC,NSF,NSN,FAC)
	IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER*4 (I-N)
C	TRANSFORM REACTION TO GLOBAL
	DIMENSION FRAC(NSF,NSN),FM(NSF)


	DO ISN = 1,NSN
	FM(1:NSF) = FRAC(1:NSF,ISN)
	CALL FORCLAX(ISN,FM,NSF,1)  !TRANSFORMATION TO GLOBAL SUPPORT  B*C	
	FRAC(1:NSF,ISN) = FAC*FM(1:NSF)         !REPLACE REACTION BY GLOBAL REACTION HERE
	ENDDO



	RETURN
      END


C	=======================================================================
C	=== CONSTRUCTION ANALYSIS =============== SONGSAK NOV2007 =============
C	=======================================================================
      SUBROUTINE DISACU (IEQN,DT,DI,NSF,NSN)
	IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER*4 (I-N)
C	ACCUMULATE DISPLACEMENT 
	DIMENSION IEQN(NSF,NSN)
	DIMENSION DT(NSF,NSN)
	DIMENSION DI(1),DD(NSF)       !INCREMENTAL ITERATIVE DISPLACEMENT VECTOR


	DO ISN = 1,NSN
	DD(1:NSF) = 0.0D0
	DO ISF = 1,NSF
	IEQ = IEQN(ISF,ISN)
	IF(IEQ.GT.0) DD(ISF) = DD(ISF) + DI(IEQ) 
	ENDDO
	CALL FORCLAX(ISN,DD,NSF,1)  !TRANSFORMATION TO GLOBAL SUPPORT  B*C	
	DO ISF = 1,NSF
	DT(ISF,ISN) = DT(ISF,ISN) + DD(ISF) 
	ENDDO
	ENDDO


	RETURN
      END


C	=======================================================================
C	=== CONSTRUCTION ANALYSIS =============== SONGSAK NOV2007 =============
C	=======================================================================
      FUNCTION DINORM (A,N)
	IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER*4 (I-N)
C	VECTOR NORM
	DIMENSION A(1)       

	DINORM = 0.0D0
	DO I = 1,N
	DINORM = DINORM + A(I)*A(I)
	ENDDO


	RETURN
      END


C	=======================================================================
C	=== CONSTRUCTION ANALYSIS =============== SONGSAK NOV2007 =============
C	=======================================================================
      SUBROUTINE XCOLSOL_OLD (MAXA,A,D,V,NEQ,IND,INDPD,STOL)
	IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER*4 (I-N)
C	SUNIL 06/02/01 COMPLETELY MODIFIED
C     ----------------------------------------------------------------
C     SOLVE FINITE ELEMENT STATIC EQUILIBRIUM EQUATIONS USING IN CORE
C	SOLVER BASED ON COMPACTED STORAGE AND COLUMN REDUCTION SCHEME
C	-------------------------------------------------------------
C     INPUT VARIABLES IN ARGUMENT LIST
C	--------------------------------
C     MAXA(NEQ1)    = ADDRESSES OF DIAGONAL ELEMENTS IN A
C     A(ISTOR)      = STIFFNESS BLOCK TO BE REDUCED
C     B(ISTOR)      = COUPLING BLOCK
C     D(NEQ)        = DIAGONAL ELEMENTS OF GLOBAL STIFFNESS
C     V(NEQ)        = RIGHT-HAND-SIDE LOAD VECTOR
C     IND=1         = FLAG FOR FACTORISATION OF STIFFNESS MATRIX OR
C     IND=2         = REDUCTION AND BACK-SUBSTITUTION OF LOAD VECTOR
C     INDPD         = FLAG FOR FACTORISATION OF NON-POSITIVE DEFINITE A
C	---------------------------------
C     OUTPUT VARIABLES IN ARGUMENT LIST
C	---------------------------------
C     A(ISTOR)      = L AND FACTORS OF STIFFNESS BLOCK
C     D(NEQ)        = D FACTORS OF GLOBAL STIFFNESS MATRIX
C     V(NEQ)        = VECTOR OF GENERALIZED DISPLACEMENTS
C	-------------------------------------------
C     VARIABLES IN COMMON BLOCK /SOLU/ AND /INOU/
C	-------------------------------------------
C     NEQ           = NUMBER OF EQUATIONS (NEQ1=NEQ+1)
C     NBLOCK        = NUMBER OF STIFFNESS BLOCKS
C     ISTOR         = MAXIMUM LENGTH OF ANY ONE BLOCK
C     DETK          = DETERMINANT OF GLOBAL STIFFNESS MATRIX
C     NKFAC         = UNIT NUMBER OF RANDOM ACCESS FILE STORING
C                     FACTORIZED STIFFNESS BLOCKS
C     LSIGN         = STABILITY INDICATER (+1=STABEL, -1=INSTABEL)
C	---------------
C     LOCAL VARIABLES
C	---------------
C     NCOLUM        = NUMBER OF COLUMNS FOR THIS BLOCK
C     IBLO,JBLO     = LOOP COUNTER FOR REDUCTION/COUPLING BLOCK
C     ICOL,JCOL     = LOOP COUNTER FOR REDUCTION/COUPLING COLUMN
C     KBLO,KCOL     = BLOCK/COLUMN COUNTER
C     JBF,JBL       = FIRST,LAST COUPLED BLOCK
C     JCF,JCL       = FIRST,LAST COUPLED COLUMN
C     KDIA,KLOW,KUPP= ADDRESSES OF DIAGONAL,FIRST AND LAST ELEMENT IN
C                     COLUMN TO BE REDUCED
C     KHEI,KMOD,LCOP= TOTAL,EFFECTIVE HEIGHT AND NUM.OF COUPLED ELEM.
C     KTOP          = TOP ELEMENT TO BE REDUCED
C     LDIA,LHEI     = DIAGONAL ELEMENT AND HEIGHT OF COUPLING COLUMN
C     IEQ           = EQUATION NUMBER
C     -----------------------------------------------------------------
C
	DIMENSION MAXA(1),A(1),B(1),D(1),V(1)
C
	NCOLUM = NEQ
      IF (IND-2) 400,800,800
C     --------------------------------------------------------
C     FACTORIZE STIFFNESS MATRIX A (A = L*D*L'T DECOMPOSISION)
C     --------------------------------------------------------
C
C     -----------------------------------------
C     REDUCE BLOCK, LOOP OVER NUMBER OF COLUMNS
C     -----------------------------------------
 400  DO 690  ICOL=1,NCOLUM
      KDIA = MAXA(ICOL)
      KLOW = KDIA+1
      KUPP = MAXA(ICOL+1)-1
      KCOL = ICOL
      KHEI = KUPP-KLOW
      KMOD = MIN0(KHEI,ICOL-1)
      IF (KMOD) 600,500,410
C     ---------------------------------------------
C     LOOP OVER NUMBER OF COUPLING COLUMNS JCF, JCL
C     ---------------------------------------------
 410  LCOP = 0
      JCF  = ICOL-KMOD
      JCL  = ICOL-1
      KTOP = KLOW+KMOD
      IF (ICOL-1.LT.KHEI) LCOP = KHEI-ICOL+1
      DO 490  JCOL=JCF,JCL
      LCOP = LCOP+1
      KTOP = KTOP-1
      LDIA = MAXA(JCOL)
      LHEI = MAXA(JCOL+1)-1-LDIA
      IF (LHEI) 490,490,430
 430  NL = MIN0(LCOP,LHEI)
      C = 0.0
      DO 450  IL=1,NL
 450  C = C + A(LDIA+IL)*A(KTOP+IL)
      A(KTOP) = A(KTOP) - C
 490  CONTINUE
C     -------------------------------------------
C     FINAL COLUMN TERMS LIJ = GIJ/DII  AND
C     DIAGONAL TERMS     DJJ = KJJ - SUM(IRJ*GRJ)
C     -------------------------------------------
 500  IEQ = KCOL
      SUM = 0.0
      DO 590  KA=KLOW,KUPP
      IEQ = IEQ-1
      C = A(KA)/D(IEQ)
      SUM = SUM + C*A(KA)
 590  A(KA) = C
      A(KDIA) = A(KDIA) - SUM
C     ----------------------------------------------------------
C     SET DIAGONAL TERMS IN D AND TEST WHETHER POSITIVE DEFINITE
C     ----------------------------------------------------------
 600  D(KCOL) = A(KDIA)
      PIV = A(KDIA)
      IF (PIV-STOL)       610,610,690
 610  IF (DABS(PIV)-STOL) 650,650,620
 620  IF (INDPD-1)        630,690,690
 630  CALL ERRORS (12,KCOL,PIV,' SOLUTION ')
 650  IF (INDPD-1)       630,630,660
 660  PIV = STOL
      IF (PIV.EQ.0.0) PIV = -1.0D-16
      D(KCOL) = PIV
      A(KDIA) = PIV
 690  CONTINUE
C     ------------------------------------------------
C     END OF LOOP
C     CALCULATE DETERMINANT OF STIFFNESS MATRIX (DETK)
C     ------------------------------------------------
	DETK=1.0
      POWER = 1.0/DFLOAT(NEQ)
      DO 720 IEQ=1,NEQ
C
      DETK=DETK*DABS(D(IEQ))**POWER
 720  IF (D(IEQ).LT. 0.0) DETK = -DETK

 795  RETURN

C     --------------------------------
C     FORWARD REDUCTION OF LOAD VECTOR
C     --------------------------------
C
C     ------------------------------------------------
C     LOOP OVER NUMBER OF COLUMNS, VI = RI-SUM(IRI*VR)
C     ------------------------------------------------
 800	DO 880  ICOL=1,NCOLUM
      KLOW = MAXA(ICOL)+1
      KUPP = MAXA(ICOL+1)-1
      IF (KUPP-KLOW) 880,830,830
 830  IEQ = ICOL
      KV = IEQ
      C = 0.0
      DO 850  KA=KLOW,KUPP
      KV = KV-1
 850  C = C + A(KA)*V(KV)
      V(IEQ) = V(IEQ) - C
 880  CONTINUE
C     -----------------------------
C     BACK SUBSTITUTION , V=[D]-1*V
C     -----------------------------
 890	DO 900  IEQ=1,NEQ
 900  V(IEQ) = V(IEQ)/D(IEQ)
C     ---------------------------
C     LOOP OVER NUMBER OF COLUMNS
C     ---------------------------
 910	KCOL = NCOLUM
      DO 980  ICOL=1,NCOLUM
      KLOW = MAXA(KCOL)+1
      KUPP = MAXA(KCOL+1)-1
      IF (KUPP-KLOW) 980,930,930
 930  IEQ = KCOL
      KV = IEQ
      DO 950  KA=KLOW,KUPP
      KV = KV-1
 950  V(KV) = V(KV) - A(KA)*V(IEQ)
 980  KCOL = KCOL-1
C

      RETURN
      END
C
C	=======================================================================
C	=== CONSTRUCTION ANALYSIS =============== SONGSAK NOV2007 =============
C	=======================================================================

      SUBROUTINE DAYPRIN(ISTP,TODAY,NOT)
	IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER*4 (I-N)

	WRITE(NOT,2002) ISTP,TODAY

 2002	FORMAT(//,10X,'TIME STEP NO.',X,I8,5X,'SOLUTION DAY =',X,E15.6/)

	RETURN

      END

C	=======================================================================
C	=== CONSTRUCTION ANALYSIS =============== SONGSAK NOV2007 =============
C	=======================================================================
      SUBROUTINE JOLPRIN(INXF,FRAC,NSF,NSN,NOT,NAME)
	IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER*4 (I-N)
      CHARACTER*4 NAME
	DIMENSION FRAC(NSF,NSN),INXF(1)

	INF = 0
	IF(NAME.EQ.'-NML') INF = 1
	IF(NAME.EQ.'-XLD') INF = 1
	IF(NAME.EQ.'-XDS') INF = 1
	IF(NAME.EQ.'-EIS') INF = 1
	IF(NAME.EQ.'-RAC') INF = 1

	IF(NAME.EQ.'-TDD') INF = 1
	IF(NAME.EQ.'-TTV') INF = 1
	IF(NAME.EQ.'-TST') INF = 1
	IF(NAME.EQ.'-TCT') INF = 1
	IF(NAME.EQ.'-TTS') INF = 1
	IF(NAME.EQ.'-TCS') INF = 1

	IF(NAME.EQ.'-RDD') INF = 1
	IF(NAME.EQ.'-RTC') INF = 1
	IF(NAME.EQ.'-RNL') INF = 1
	IF(INF.EQ.0) RETURN


	IF(NAME.EQ.'-NML') WRITE(NOT,2001)
	IF(NAME.EQ.'-XLD') WRITE(NOT,2002)
	IF(NAME.EQ.'-XDS') WRITE(NOT,2003)
	IF(NAME.EQ.'-EIS') WRITE(NOT,2004)
	IF(NAME.EQ.'-RAC') WRITE(NOT,2005)

	IF(NAME.EQ.'-TDD') WRITE(NOT,2006)
	IF(NAME.EQ.'-TTV') WRITE(NOT,2007)
	IF(NAME.EQ.'-TST') WRITE(NOT,2008)
	IF(NAME.EQ.'-TCT') WRITE(NOT,2009)
	IF(NAME.EQ.'-TTS') WRITE(NOT,2010)
	IF(NAME.EQ.'-TCS') WRITE(NOT,2011)

	IF(NAME.EQ.'-RDD') WRITE(NOT,2012)
	IF(NAME.EQ.'-RTC') WRITE(NOT,2013)
	IF(NAME.EQ.'-RNL') WRITE(NOT,2014)

      DO 40 N=1,NSN
      IF(INXF(N).LE.0) GO TO 40
      WRITE(NOT,3000) N,(FRAC(I,N),I=1,NSF)
   40 CONTINUE

      
	RETURN


 2001	FORMAT(/  '  NODE NO.',23X,'-NON-MECHANICAL FORCE-'/)
 2002	FORMAT(/  '  NODE NO.',23X,'-DRIVEN JOINT LOAD-'/)
 2003	FORMAT(/  '  NODE NO.',23X,'-JOINT DISPLACEMENT-'/)
 2004	FORMAT(/  '  NODE NO.',23X,'-RESISTING LOAD-'/)
 2005	FORMAT(/  '  NODE NO.',23X,'-JOINT REACTION-'/)


 2006	FORMAT(/  '  NODE NO.',15X,'-JOINT DISPLACEMENT DUE TO 
	1DEAD&EXTERNAL LOAD-'/)
 2007	FORMAT(/  '  NODE NO.',15X,'-JOINT DISPLACEMENT DUE TO 
	1TRAVELER-'/)
 2008	FORMAT(/  '  NODE NO.',15X,'-JOINT DISPLACEMENT DUE TO 
	1SETTLEMENT-'/)
 2009	FORMAT(/  '  NODE NO.',15X,'-JOINT DISPLACEMENT DUE TO 
	1CONSTRUCTION LOAD-'/)
 2010	FORMAT(/  '  NODE NO.',15X,'-JOINT DISPLACEMENT DUE TO 
	1TENDON LOAD-'/)
 2011	FORMAT(/  '  NODE NO.',15X,'-JOINT DISPLACEMENT DUE TO 
	1NON-MECHANICAL LOAD-'/)

	
 2012	FORMAT(/  '  NODE NO.',15X,'-JOINT REACTION DUE TO 
	1EXTERNAL & DEAD LOAD-'/)
 2013	FORMAT(/  '  NODE NO.',15X,'-JOINT REACTION DUE TO 
	1TENDON-'/)
 2014	FORMAT(/  '  NODE NO.',15X,'-JOINT REACTION DUE TO 
	1NON-MECHANICAL LOAD-'/)


 3000 FORMAT(1X,I5,6X,9E13.5)

      END


C	=======================================================================
C	=== CONSTRUCTION ANALYSIS =============== SONGSAK NOV2007 =============
C	=======================================================================
      SUBROUTINE ELMEQNR(MHT,IEMQ,IEMR)
	IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER*4 (I-N)

      DIMENSION MHT(1)
      DIMENSION IEMQ(1),IEMR(1),NPM(10),NPI(10)
	ALLOCATABLE IF2(:),IF3(:),LEQN(:)
	ALLOCATABLE IAX(:),AAX(:)


C	CALLING NEG
	CALL INTFILL('%NUB',NEG,1,5,0)

C	-----------------------------------------
C	LOOP OVER GROUP
C	-----------------------------------------
	DO 1600 IEG = 1,NEG

C	----------------------------------------
C	GROUP DATA
C	----------------------------------------
	CALL INTFILL('%GRP',NELE ,3 ,IEG,0) !
	CALL INTFILL('%GRP',NEF  ,7 ,IEG,0) !

C	GROUP FILE
	CALL INTFILL('%GRF',N2   ,2 ,IEG,0) !
	CALL INTFILL('%GRF',N3   ,3 ,IEG,0) !

	CALL INTFILL('%GRF',NDX2 ,12,IEG,0) !
	CALL INTFILL('%GRF',NDX3 ,13,IEG,0) !
	
	CALL INTFILL('%GRF',NFLI ,21,IEG,0) !
	CALL INTFILL('%GRF',NFLR ,22,IEG,0) !
	
	CALL INTFILL('%GRF',LASI ,23,IEG,0) !
	CALL INTFILL('%GRF',LASR ,24,IEG,0) !


	ALLOCATE(IF2(N2),IF3(N3),LEQN(NEF))
	ALLOCATE(IAX(LASI),AAX(LASR))
C	-----------------------------------------
C	LOOP OVER ELEMENT
C	-----------------------------------------
	DO 1500 IEL = 1,NELE

      READ(NFLI,REC=NELE+IEL,ERR=5) IXIST !READ EXISTING FLAG TO LAST RECORD OF ELEMENT INTEGER DATA (INCREASE THE SPEED PURPOSE)
      GOTO 6
5     IXIST = 0
6     IF(IXIST.LE.0) GOTO 1500

      READ(NFLI,REC=IEL) IAX
      READ(NFLR,REC=IEL) AAX

	NPM(1) = N3
	NPI(1) = N3
	CALL CALLINTG(IF3,IAX,NDX3,NPM,NPI,1,'READ')
	IXIST = IF3(4)  !TOTAL EXISTING FLAG 
	IF (IXIST.EQ. 0) GOTO 1500 !ELEMENT HAS NEVER EXISTED & CURRENTLY REMOVED

	NPM(1) = N2
	NPI(1) = N2
	CALL CALLINTG(IF2,IAX,NDX2,NPM,NPI,1,'READ')              !INTEGER DATA

C	-----------------------------------------
C	LOOP OVER ELEMENT DOF
C	-----------------------------------------
	LEQN(1:NEF) = 0
	DO 1000 IEF = 1,NEF
	NUQ = IEF + NEF                   !UPDATE EQUATION NUMBER
	NUR = IEF + NEF + NEF             !UPDATE REACTION NUMBER
	J = IF2(IEF)
	IF2(NUQ)  = 0
	IF2(NUR)  = 0
	IF(J.GT.0) THEN
	IF2(NUQ)  = IEMQ(J)
	IF2(NUR)  = IEMR(J)
	LEQN(IEF) = IEMQ(J)   !TO CALCULATE COLUMN HEIGHT
	ENDIF

C	-----------------------------------------
1000	CONTINUE
C	-----------------------------------------

	NPM(1) = N2
	NPI(1) = N2
	CALL CALLINTG(IF2,IAX,NDX2,NPM,NPI,1,'WRIT')              !INTEGER DATA

C     ------------------------------------
C     UPDATE COLUMN HEIGHTS [MHT]
C     ------------------------------------
      MEQ = 0
      DO 390  IEF=1,NEF
      IEQ = LEQN(IEF)
      IF (IEQ)     310,390,310
310   IF (MEQ.EQ.0) MEQ = IEQ
      IF (MEQ-IEQ) 320,390,390
320	MEQ = IEQ
390	CONTINUE

      DO 400  IEF=1,NEF
      IEQ = LEQN(IEF)
      IF (IEQ.EQ.0) GOTO 400
      KHT = MEQ-IEQ
      IF (KHT.GT.MHT(IEQ)) MHT(IEQ) = KHT
400	CONTINUE

      WRITE(NFLI,REC=IEL) IAX
      WRITE(NFLR,REC=IEL) AAX

C	-----------------------------------------
1500	CONTINUE
C	-----------------------------------------

	DEALLOCATE(IAX,AAX)
	DEALLOCATE(IF2,IF3,LEQN)
C	-----------------------------------------
1600	CONTINUE
C	-----------------------------------------



	RETURN
	END


C	=======================================================================
C	=== CONSTRUCTION ANALYSIS =============== SONGSAK NOV2007 =============
C	=======================================================================
	SUBROUTINE GETEQNR(LINK,NNM,NNF,NOD,LEQ)
      IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER*4 (I-N)
	DIMENSION NOD(1),LEQ(1),IDOF(9),IGPOS(9)


C	----------------------------------------
C	CALLING IDOF
C	----------------------------------------
	DO I = 1,9
	CALL INTFILL('%DOF',IDOF(I),1,I,0)
	ENDDO
C	----------------------------------------
C	----------------------------------------
C     UNPACK VARIABLE LINKF
C	----------------------------------------      
	IGPOS(1:NNF) = 0
      IGF = 0

      DO 190  INF=1,NNF
      IGPOS(INF) = LINK/10**(NNF-INF)
 150  IGF = IGF+1
	IF (IGF.GT.9) THEN
	IGPOS(INF) = 0
	GOTO 195
	ENDIF
      IF (IDOF(IGF)-IGPOS(INF)) 150,170,170
 170  LINK = LINK - 10**(NNF-INF)*IGPOS(INF)
 190  IGPOS(INF) = IGF

 195	CONTINUE
C	----------------------------------------

	LEQ(1:NNM*NNF) = 0
	DO INN = 1,NNM
	NIJ = NOD(INN)   !Node
	DO INF = 1,NNF
	IGF = IGPOS(INF)
	IF(IGF.NE.0) THEN            
	CALL INTFILL('$LID',LEQ(INF+NNF*(INN-1)),IGF,NIJ,0)    !ORI EQU NO
	ENDIF
	ENDDO
	ENDDO


	RETURN
	END


C	=====================================================================
C	=====================================================================
C	=====================================================================
      SUBROUTINE WRITEKAK
	IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER*4 (I-N)

      COMMON /CONSTINT/ MTOTI(10),NCONI(5000),ICONDT(1)
      COMMON /CONSTREL/ MTOTR(10),NCONR(5000),RCONDT(1)
      
      CALL LOCATN ('$XLI',KXLD,NSF,NSN,2)
      DO II =6,7
      WRITE(*,*) 'KAK2',RCONDT(KXLD+NSF*(II-1)+3-1:KXLD+NSF*(II-1)+6-1)
      ENDDO

      RETURN
      END
      
