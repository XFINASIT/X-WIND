C	=======================================================================
C	=== CONSTRUCTION ANALYSIS =============== SONGSAK NOV2007 =============
C	=======================================================================
      SUBROUTINE TEDCON
	IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER*4 (I-N)

	COMMON /TENDONC/ NEGT  !NUMBER OF TENDON GROUP


      CALL INTFILL('%SOL',LOPT1,1,1,0)
      CALL INTFILL('%SOL',LOPT2,1,2,0)
      CALL INTFILL('%SOL',LOPT3,1,3,0)
      CALL INTFILL('%SOL',LOPT4,1,4,0)
      CALL INTFILL('%SOL',LOPT5,1,5,0)
      CALL INTFILL('%SOL',LOPT6,1,6,0)

      DO IEGT = 1,NEGT
C	----------------------------------------
C	TENDON 
C	----------------------------------------
C	STRESS AND RIGIDITY & MATERIAL STATE
	IF(LOPT1.NE.0.OR.LOPT2.NE.0) THEN
	CALL TEDUPD(IEGT)
	ENDIF

C	ELEMENT FORCE AND STIFFNESS
	IF(LOPT3.NE.0.OR.LOPT4.NE.0.OR.LOPT5.NE.0) THEN
	CALL TEDEFF(IEGT)
	ENDIF
C	----------------------------------------
C	----------------------------------------
      ENDDO

	RETURN
	END


C	=======================================================================
C	=== CONSTRUCTION ANALYSIS =============== SONGSAK NOV2007 =============
C	=======================================================================
	SUBROUTINE INPTENF
	IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER*4 (I-N)
	CHARACTER*200 TNAME
	
      COMMON /LOCA/ LID,LDS,LEL,LDC,LXY,LCH,LNU,LMP,LGP,LMS,LGS,
     1              LCO,LEX,LLM,LES,LEC,LED,LEI,LEE,LMA,LLF,LLV,
     2              LRE,LDI,LDL,LDT,LDK,LER,LEV,LTT,LWV,LAR,LBR,
     3              LVE,LDD,LRT,LBU,LBC,LVL,LAL,LEF,LDU,LPR,LLO,
	4              LRV,LRT1,LRET,LRET1,LDM,LDPT,LVL1,LMV,LXI,LCM,LCC,
	5			    LCN,LDIM,LFRE,LSFC,LLOF

      COMMON /ELEM/ NAME(2),ITYPE,ISTYP,NLOPT,MTMOD,NSINC,ITOLEY,
     1              NELE,NMPS,NGPS,NMP,NGP,NNM,NEX,NCO,NNF,NWG,NEFC,
     2              NPT,NWA,NWS,KEG,MEL,NNO,NEF,NELTOT,NMV,MTYP,ISECT
      	      
C	COMMON BLOCK FOR TEND SONGSAK APR2009 
	COMMON /TENDON/ NTEND,LTDN
	
	COMMON /TENDONC/ NEGT  !NUMBER OF TENDON GROUP
	
	COMMON /EFLINK/ NFLINK(30,30)
		
      COMMON A(9000000),IA(9000000)
      
C	TENDON
      DIMENSION IDOF(9),IGPOS(9)
	DIMENSION NPM(10),NPI(10)
	DIMENSION COORI(3,2),OFFI(3,2)
	DIMENSION COORN1(3),COORN2(3),NODE1(27),NODE2(27),TOFFS1(3),TOFFS2(3),HF1(27),HF2(27)
	
	ALLOCATABLE TNAME(:),TAREA(:),MATTEN(:)
	
	ALLOCATABLE IF1(:),IF2(:),AF3(:),AF4(:),AF5(:),AF6(:),AF7(:)
	ALLOCATABLE IAX(:),AAX(:),LTPROP(:,:),EDIST(:),BBX(:),LEST(:)
	

	CALL INTFILL('%IOL',ITI,1,1,0)  !DATIN.DAT FILE
	CALL INTFILL('%IOL',NOT,1,3,0)  !OUTPUT.OUT
	
	CALL INTFILL('%NUB',NEG,1,5,0)  !COLLING NEG
		
	ALLOCATE(LEST(2*NEG))	
	DO I = 1,2*NEG
	LEST(I) = IA(LEL+I-1)
	ENDDO
C	----------------------------------------
C	CALLING IDOF
C	----------------------------------------
	DO I = 1,9
	  CALL INTFILL('%DOF',IDOF(I),1,I,0)
	ENDDO
C	----------------------------------------


C     ----------------------------------------------
	NEGT = 0 !TENDON GROUP NUMBER
C     ----------------------------------------------
	DO IEG = 1,NEG
	KEG = IEG
	NELEMI = 10 + IEG
      NELEMA = 30 + IEG
      REWIND NELEMI
      REWIND NELEMA
C      READ (NELEMI) (IA(NLNU),NLNU=LNU,LNU + LEST(IEG)-1)
C      READ (NELEMA) ( A(NLNU),NLNU=LMP,LMP + LEST(IEG+NEG)-1)
      READ (NELEMI) IA(LNU:LNU + LEST(IEG    )-1)
      READ (NELEMA)  A(LMP:LMP + LEST(IEG+NEG)-1)     
      CALL MOVLEV (2)
      IF(ITYPE.EQ.17) NEGT = NEGT + 1 !TENDON GROUP NUMBER
      ENDDO
C     ----------------------------------------------
C     ----------------------------------------------

C     NUMBER OF TENDON FOR CONSTRUCTION
	NTENDC = 0
	CALL FREBUF
      CALL FREINT('N',NTENDC,1)
      
      ALLOCATE(TNAME(NTENDC),TAREA(NTENDC),MATTEN(NTENDC))
C	READ & STORE TENDON NAME
      DO ITENDC = 1,NTENDC
	  READ(ITI,'(A200)') TNAME(ITENDC)
	  CALL FREBUF
        CALL FREREL('A', TAREA(ITENDC),1)  !AREA
        CALL FREINT('M',MATTEN(ITENDC),1)  !MAT No.
      ENDDO
	
	
C     ----------------------------------------------
	IEGT = 0 !TENDON GROUP NUMBER
C     ----------------------------------------------
	DO 9000 IEG = 1,NEG
	KEG = IEG
	NELEMI = 10 + IEG
      NELEMA = 30 + IEG
      REWIND NELEMI
      REWIND NELEMA
C      READ (NELEMI) (IA(NLNU),NLNU=LNU,LNU + LEST(IEG)-1)
C      READ (NELEMA) ( A(NLNU),NLNU=LMP,LMP + LEST(IEG+NEG)-1)
      READ (NELEMI) IA(LNU:LNU + LEST(IEG    )-1)
      READ (NELEMA)  A(LMP:LMP + LEST(IEG+NEG)-1)     
      CALL MOVLEV (2)

      IF(ITYPE.NE.17) GOTO 9000 !TENDON ITYPE 
C     -------------------------      
      IEGT = IEGT + 1 !TENDON GROUP NUMBER
            	
      ALLOCATE(LTPROP(10,NTEND))
      CALL MOVEI(IA(LTDN),LTPROP,10*NTEND)
      
      MNOD = 0
      MSEG = 0
      DO ITEND = 1,NTEND
	  NNOD = LTPROP(1 ,ITEND)	!Number of tendon node
	  NSEG = LTPROP(2 ,ITEND)	!Number of tendon segment
	  IFIL = LTPROP(3 ,ITEND)	!file number
	  MTREC= LTPROP(4 ,ITEND)	!last record number (just before this tendon)
	  ITDYP= LTPROP(5 ,ITEND)	!ITDYP = TENDON OPTION (0=ON NODE, OTHERWISE=ON ELEM SEPECIFY BY ITDYP)
	  IMAT = LTPROP(6 ,ITEND)	!MAT No.
	  IGEO = LTPROP(7 ,ITEND)	!GEO No.
	  IFILJ= LTPROP(8 ,ITEND)	!file number (store force after jacking)
	  
	  IF(NNOD.GT.MNOD) MNOD = NNOD 
	  IF(NSEG.GT.MSEG) MSEG = NSEG 
	ENDDO
	
C	OPEN FILE FOR STORE GROUP DATA  
	NFIL = 3600 !!!!****** 
	NFLL = 2
	NFLI = 1 + NFLL*(IEGT-1) + NFIL
	NFLR = 2 + NFLL*(IEGT-1) + NFIL

	NNMT  = NNM !NUMBER OF NODE PER SEGMENT
	NNFT  = NNF !MAX NUMBER OF NODAL DOF
	NEFT  = NEF

	N1 = NNMT                 ! I N1,NMSN,ITEND CONNECTIVITY
	N2 = NEFT*3               ! I N2,NMSN,ITEND ORIGINAL EQUA  CURRENT EQUA   REACTION EQUA
	N3 = 20                   ! R N3,ITEND      TENDON DATA
	N4 = 20+NNMT              ! R N4,NMSN,ITEND TENDON SEGMENT DATA                             
	N5 = 30                   ! R N5,ITEND      WORKING ARRAY FOR WHOLE TENDON
	N6 = 20+10+NEFT           ! R N6,NMSN,ITEND WORKING ARRAY FOR EACH SEGMENT  (20 FOR WORKING + 1 RIGIDITY + 1 MEC STRESS + 1 NON-MECHA + B-MATRIX)  20 + 10 + NEFT
	N7 = NEFT                 ! R N7,NMSN,ITEND ERECTED DISP

C     FILE FOR INTEGER DATA PER ONE ELEMENT
      NDX1 = 1
      NDX2 = NDX1 + N1*MSEG
      LASI = NDX2 + N2*MSEG
      
C     FILE FOR REAL DATA PER ONE ELEMENT
      NDX3 = 1
      NDX4 = NDX3 + N3
      NDX5 = NDX4 + N4*MSEG
      NDX6 = NDX5 + N5
      NDX7 = NDX6 + N6*MSEG
      LASR = NDX7 + N7*MSEG

	ALLOCATE(IF1(N1),IF2(N2),AF3(N3),AF4(N4),AF5(N5),AF6(N6),AF7(N7))
	ALLOCATE(EDIST(NEFT),BBX(NEFT))

      IF(IEGT.EQ.1) THEN
        CALL DEFNINT('TGRP',KTED,10,NEGT) 
        CALL DEFNINT('TGRF',KTED,30,NEGT) 
      ENDIF

C	GROUP DATA
	CALL INTFILL('TGRP',NTEND,1 ,IEGT,1) !
	CALL INTFILL('TGRP',MSEG ,2 ,IEGT,1) !MAX NUM OF TENDON SEGMENT
	CALL INTFILL('TGRP',NEFT ,3 ,IEGT,1) !
	CALL INTFILL('TGRP',NNMT ,4 ,IEGT,1) !
	CALL INTFILL('TGRP',NNFT ,5 ,IEGT,1) !
	CALL INTFILL('TGRP',LINK ,6 ,IEGT,1) !
	CALL INTFILL('TGRP',ITDYP,7 ,IEGT,1) !ITDYP = TENDON OPTION (0=ON NODE, OTHERWISE=ON ELEM SEPECIFY BY ITDYP)
C	GROUP FILE
	CALL INTFILL('TGRF',N1   ,1 ,IEGT,1) !
	CALL INTFILL('TGRF',N2   ,2 ,IEGT,1) !
	CALL INTFILL('TGRF',N3   ,3 ,IEGT,1) !
	CALL INTFILL('TGRF',N4   ,4 ,IEGT,1) !
	CALL INTFILL('TGRF',N5   ,5 ,IEGT,1) !
	CALL INTFILL('TGRF',N6   ,6 ,IEGT,1) !
	CALL INTFILL('TGRF',N7   ,7 ,IEGT,1) !

	CALL INTFILL('TGRF',NDX1 ,11,IEGT,1) !
	CALL INTFILL('TGRF',NDX2 ,12,IEGT,1) !
	CALL INTFILL('TGRF',NDX3 ,13,IEGT,1) !
	CALL INTFILL('TGRF',NDX4 ,14,IEGT,1) !
	CALL INTFILL('TGRF',NDX5 ,15,IEGT,1) !
	CALL INTFILL('TGRF',NDX6 ,16,IEGT,1) !
	CALL INTFILL('TGRF',NDX7 ,17,IEGT,1) !
	
	CALL INTFILL('TGRF',NFLI ,21,IEGT,1) !
	CALL INTFILL('TGRF',NFLR ,22,IEGT,1) !
	
	CALL INTFILL('TGRF',LASI ,23,IEGT,1) !
	CALL INTFILL('TGRF',LASR ,24,IEGT,1) !

	CALL DIROPEN(NFLI,2*LASI)  
	CALL DIROPEN(NFLR,2*LASR)
	
	ALLOCATE(IAX(LASI),AAX(LASR))
C	----------------------------------------

      DO 5000 ITEND = 1,NTEND
      
        IAX(1:LASI) = 0
        AAX(1:LASR) = 0.0D0
      
C	READ & STORE TENDON NAME
        KTENDC = 0
        DO ITENDC = 1,NTENDC
	      CALL CHECKTDNAME(TNAME(ITENDC),ITEND,IEGT,ITFOUND)
	      IF(ITFOUND.EQ.1) THEN
	          KTENDC = ITENDC
	          GOTO 300
	      ENDIF    
	  ENDDO
	  GOTO 5000
      
300	CONTINUE
        AR =  TAREA(KTENDC)
        MT = MATTEN(KTENDC)
			
	  NNOD = LTPROP(1 ,ITEND)	!Number of tendon node
	  NSEG = LTPROP(2 ,ITEND)	!Number of tendon segment
	  IFIL = LTPROP(3 ,ITEND)	!file number
	  MTREC= LTPROP(4 ,ITEND)	!last record number (just before this tendon)
	  ITOPT= LTPROP(5 ,ITEND)	!ITOPT = TENDON OPTION (0=ON NODE, 1=ON ELEM)
	  IMAT = LTPROP(6 ,ITEND)	!MAT No.
	  IGEO = LTPROP(7 ,ITEND)	!GEO No.
	  IFILJ= LTPROP(8 ,ITEND)	!file number (store force after jacking)

C       UNPACK VARIABLE IGPOS
        LINK = NFLINK(ITYPE,ISTYP)
	  CALL EDOFLPOS(IDOF,LINK,NNFT,IGPOS)
	
C	----------------------------------------
	
      SELECTCASE(ITDYP)
      CASE(0)	
      WRITE(NOT,100) ITEND,NSEG
	WRITE(NOT,110) 
      CASE(5)	
      WRITE(NOT,101) ITEND,NSEG
	WRITE(NOT,130)
      CASE(9)	
      WRITE(NOT,102) ITEND,NSEG
	WRITE(NOT,130)
      CASE(10)	
      WRITE(NOT,103) ITEND,NSEG
	WRITE(NOT,130)
	ENDSELECT
	
C	-----------------------------
      DO 4000 ISEG = 1,NSEG
C	-----------------------------
	ISEGR = NNOD + ISEG
      SELECTCASE(ITDYP)
      CASE(0)
      READ(IFIL,REC=MTREC+ISEGR) SELN,ANGF,ANGB,
     1                           NNS1,XT1,YT1,ZT1,OFFX1,OFFY1,OFFZ1,
     2                           NNS2,XT2,YT2,ZT2,OFFX2,OFFY2,OFFZ2
	WRITE(NOT,120) SELN,ANGF,ANGB,
     1               NNS1,XT1,YT1,ZT1,OFFX1,OFFY1,OFFZ1,
     2               NNS2,XT2,YT2,ZT2,OFFX2,OFFY2,OFFZ2
     
     
      IF1(1:N1) = 0
	IF1(1:2) = [NNS1,NNS2]         !CONNECTIVITY
	NPM(1:2) = [N1,MSEG]
	NPI(1:2) = [N1,ISEG]
	CALL CALLINTG(IF1,IAX,NDX1,NPM,NPI,2,'WRIT')  !BACKUP SEGMENT DATA

	IF2(1:N2) = 0
	DO INN = 1,NNMT
	  NIJ = IF1(INN) !Node
	  DO INF = 1,NNFT
	      IGF = IGPOS(INF)
	      IF(IGF.NE.0) THEN            
	          CALL INTFILL('$LID',IF2(INF+NNFT*(INN-1)),IGF,NIJ,0)    !ORI EQU NO. + UPD EQU NO. + UPD RES EQU NO. -------UPD = UPDATED N2 = 3*NEF
	      ENDIF
	  ENDDO
	ENDDO
	NPM(1:2) = [N2,MSEG]
	NPI(1:2) = [N2,ISEG]
	CALL CALLINTG(IF2,IAX,NDX2,NPM,NPI,2,'WRIT')  !BACKUP SEGMENT DATA

	AF4(1:N4) = 0.0D0
	AF4(1 :3 ) = [XT1,YT1,ZT1]            !Coordinate i
	AF4(4 :6 ) = [XT2,YT2,ZT2]            !Coordinate j
	AF4(7 :9 ) = [OFFX1,OFFY1,OFFZ1]      !Offset i
	AF4(10:12) = [OFFX2,OFFY2,OFFZ2]      !Offset j
	AF4(13) = SELN                        !Segment Length
	AF4(14) = ANGF                        !Segment Angle Forward
	AF4(15) = ANGB                        !Segment Angle Backward
	NPM(1:2) = [N4,MSEG]
	NPI(1:2) = [N4,ISEG]
	CALL CALLREAL(AF4,AAX,NDX4,NPM,NPI,2,'WRIT')  !BACKUP SEGMENT DATA

	AF6(1:N6) = 0.0D0
C     B-MATRIX
      N6_B = 20 + 10 + 1 !POINTER FOR B-MATRIX
        COORI(1:3,1) = AF4(1:3) ; COORI(1:3,2) = AF4(4 :6 )
         OFFI(1:3,1) = AF4(7:9) ;  OFFI(1:3,2) = AF4(10:12)
        EDIST(1:NEFT) = 0.0D0 
        CALL TDNBMAT(COORI,OFFI,EDIST,BBX,SELN,'LIN')
      AF6(N6_B:N6_B+NEFT-1) = BBX(1:NEFT) !UPDATE B-MATRIX
	NPM(1:2) = [N6,MSEG]
	NPI(1:2) = [N6,ISEG]
	CALL CALLREAL(AF6,AAX,NDX6,NPM,NPI,2,'WRIT')  !BACKUP SEGMENT DATA
      
	AF7(1:N7) = 0.0D0
	NPM(1:2) = [N7,MSEG]
	NPI(1:2) = [N7,ISEG]
	CALL CALLREAL(AF7,AAX,NDX7,NPM,NPI,2,'WRIT')  !BACKUP SEGMENT DATA
		     
      CASE(5,9,10) !SOLID
      READ(IFIL,REC=MTREC+ISEGR) SELN,ANGF,ANGB,
     1                      IEG1,IEL1,ITYPE1,ISTYP1,NNM1,COORN1(1:3),XT1,YT1,ZT1,NODE1(1:NNM1),TOFFS1(1:3),HF1(1:NNM1),
     2                      IEG2,IEL2,ITYPE2,ISTYP2,NNM2,COORN2(1:3),XT2,YT2,ZT2,NODE2(1:NNM2),TOFFS2(1:3),HF2(1:NNM2)
           
	WRITE(NOT,140) SELN,ANGF,ANGB,
	1               XT1,YT1,ZT1,TOFFS1(1:3),
     2               XT2,YT2,ZT2,TOFFS2(1:3)
     
      IF1(1:N1) = 0
	IF1(1     :NNM1     ) = NODE1(1:NNM1)         !CONNECTIVITY
	IF1(1+NNM1:NNM2+NNM1) = NODE2(1:NNM2)         !CONNECTIVITY
	NPM(1:2) = [N1,MSEG]
	NPI(1:2) = [N1,ISEG]
	CALL CALLINTG(IF1,IAX,NDX1,NPM,NPI,2,'WRIT')  !BACKUP SEGMENT DATA

	IF2(1:N2) = 0
	DO INN = 1,NNMT
	  NIJ = IF1(INN) !Node
	  DO INF = 1,NNFT
	      IGF = IGPOS(INF)
	      IF(IGF.NE.0) THEN            
	          CALL INTFILL('$LID',IF2(INF+NNFT*(INN-1)),IGF,NIJ,0)    !ORI EQU NO. + UPD EQU NO. + UPD RES EQU NO. -------UPD = UPDATED N2 = 3*NEF
	      ENDIF
	  ENDDO
	ENDDO
	NPM(1:2) = [N2,MSEG]
	NPI(1:2) = [N2,ISEG]
	CALL CALLINTG(IF2,IAX,NDX2,NPM,NPI,2,'WRIT')  !BACKUP SEGMENT DATA

	AF4(1:N4) = 0.0D0
	AF4(1 :3 ) = [XT1,YT1,ZT1]            !Coordinate i
	AF4(4 :6 ) = [XT2,YT2,ZT2]            !Coordinate j
	AF4(7 :9 ) = TOFFS1(1:3)              !Offset of tendon node i
	AF4(10:12) = TOFFS2(1:3)              !Offset of tendon node j
	AF4(13) = SELN                        !Segment Length
	AF4(14) = ANGF                        !Segment Angle Forward
	AF4(15) = ANGB                        !Segment Angle Backward
      N4_H = 20 + 1 !POINTER FOR H-MATRIX
      AF4(N4_H     :N4_H+NNM1-1     ) = HF1(1:NNM1) !STORE H-MATRIX
      AF4(N4_H+NNM1:N4_H+NNM2-1+NNM1) = HF2(1:NNM2) !STORE H-MATRIX
	NPM(1:2) = [N4,MSEG]
	NPI(1:2) = [N4,ISEG]
	CALL CALLREAL(AF4,AAX,NDX4,NPM,NPI,2,'WRIT')  !BACKUP SEGMENT DATA

	AF6(1:N6) = 0.0D0
C     B-MATRIX
      N6_B = 20 + 10 + 1 !POINTER FOR B-MATRIX
        COORI(1:3,1) = AF4(1:3) ; COORI(1:3,2) = AF4(4 :6 )
         OFFI(1:3,1) = AF4(7:9) ;  OFFI(1:3,2) = AF4(10:12)
        EDIST(1:NEFT) = 0.0D0 
        CALL TDNBMATE(COORI,OFFI,HF1,HF2,NNMT,NNFT,NEFT,EDIST,BBX,SELN,'LIN')
      AF6(N6_B:N6_B+NEFT-1) = BBX(1:NEFT) !UPDATE B-MATRIX
	NPM(1:2) = [N6,MSEG]
	NPI(1:2) = [N6,ISEG]
	CALL CALLREAL(AF6,AAX,NDX6,NPM,NPI,2,'WRIT')  !BACKUP SEGMENT DATA
      
	AF7(1:N7) = 0.0D0
	NPM(1:2) = [N7,MSEG]
	NPI(1:2) = [N7,ISEG]
	CALL CALLREAL(AF7,AAX,NDX7,NPM,NPI,2,'WRIT')  !BACKUP SEGMENT DATA
	     
      ENDSELECT
C	-----------------------------
4000  CONTINUE
C	-----------------------------


	AF3(1:N3) = 0.0D0
	AF3(1) = AR            !AREA
	AF3(2) = FLOAT(MT)     !MAT No.
	AF3(3) = FLOAT(NNOD)   !Number of tendon points
	AF3(4) = FLOAT(NSEG)   !Number of tendon segment
	NPM(1) = N3
	NPI(1) = N3
	CALL CALLREAL(AF3,AAX,NDX3,NPM,NPI,1,'WRIT')  !BACKUP TENDON DATA

	AF5(1:N5) = 0.0D0
	NPM(1) = N5
	NPI(1) = N5
	CALL CALLREAL(AF5,AAX,NDX5,NPM,NPI,1,'WRIT')  !BACKUP TENDON DATA
	

      WRITE(NFLI,REC=ITEND) IAX
      WRITE(NFLR,REC=ITEND) AAX
      

C     ----------------------------------------------
5000  CONTINUE
C     ----------------------------------------------
	
	DEALLOCATE(IAX,AAX)
	DEALLOCATE(IF1,IF2,AF3,AF4,AF5,AF6,AF7,LTPROP)
	DEALLOCATE(EDIST,BBX)
	
C     ----------------------------------------------
9000  CONTINUE
C     ----------------------------------------------

	
	DEALLOCATE(TNAME,TAREA,MATTEN)
	DEALLOCATE(LEST)	

100	FORMAT(/5X,'Nodal TENDON No.',I5,2X,'NUMBER OF TENDON SEGMENT =',I5/)
101	FORMAT(/5X,'Frame TENDON No.',I5,2X,'NUMBER OF TENDON SEGMENT =',I5/)
102	FORMAT(/5X,'Shell TENDON No.',I5,2X,'NUMBER OF TENDON SEGMENT =',I5/)
103	FORMAT(/5X,'Solid TENDON No.',I5,2X,'NUMBER OF TENDON SEGMENT =',I5/)

110	FORMAT( 25X,'LENGTH',13X,'ANGLE F.',10X,'ANGLE B.',5X,'NODE-i',19X,'COORDINATE-i',35X,'OFFSET-i',
     1                                                  14X,'NODE-j',19X,'COORDINATE-j',35X,'OFFSET-j'/)
120	FORMAT( 20X,E14.5,5X,E14.5,5X,E14.5,5X,I4,3X,3E14.5,3X,3E14.5,5X,I4,3X,3E14.5,3X,3E14.5)
130	FORMAT( 25X,'LENGTH',13X,'ANGLE F.',10X,'ANGLE B.',26X,'COORDINATE-i',35X,'OFFSET-i',
     1                                                   40X,'COORDINATE-j',35X,'OFFSET-j'/)
140	FORMAT( 20X,E14.5,5X,E14.5,5X,E14.5,5X,3X,3E14.5,3X,3E14.5,5X,3X,3E14.5,3X,3E14.5)

	RETURN
	END


C	=======================================================================
C	=== CONSTRUCTION ANALYSIS =============== SONGSAK NOV2007 =============
C	=======================================================================
      SUBROUTINE TDNLOS(IEGT,ITEND,IAX,AAX)
      IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER*4 (I-N)

C	-----------------------------------------------
C     COMPUTE INITIAL FORCES IN TENDON SEGMENTS     -
C	-----------------------------------------------

      LOGICAL SDON
      DIMENSION FJAK(2),FDIL(2),NPM(10),NPI(10),IAX(1),AAX(1)
	ALLOCATABLE FFPS(:,:),STFC(:),STF(:),STFR(:),FOCJ(:)
	ALLOCATABLE TEN(:),ANG(:,:)
	ALLOCATABLE AF3(:),AF4(:),AF6(:)

	CALL INTFILL('%IOL',NOT,1,3,0)  !OUTPUT.OUT


C	----------------------------------------
C	GROUP DATA
C	----------------------------------------
	CALL INTFILL('TGRP',NTEND,1 ,IEGT,0) !
	CALL INTFILL('TGRP',MSEG ,2 ,IEGT,0) !MAX NUM OF TENDON SEGMENT
	CALL INTFILL('TGRP',NEFT ,3 ,IEGT,0) !
	CALL INTFILL('TGRP',NNMT ,4 ,IEGT,0) !
	CALL INTFILL('TGRP',NNFT ,5 ,IEGT,0) !
	CALL INTFILL('TGRP',LINK ,6 ,IEGT,0) !
	CALL INTFILL('TGRP',ITDYP,7 ,IEGT,0) !ITDYP = TENDON OPTION (0=ON NODE, OTHERWISE=ON ELEM SEPECIFY BY ITDYP)	
C	GROUP FILE	
	CALL INTFILL('TGRF',N3   ,3 ,IEGT,0) !
	CALL INTFILL('TGRF',N4   ,4 ,IEGT,0) !
	CALL INTFILL('TGRF',N6   ,6 ,IEGT,0) !

	CALL INTFILL('TGRF',NDX3 ,13,IEGT,0) !
	CALL INTFILL('TGRF',NDX4 ,14,IEGT,0) !
	CALL INTFILL('TGRF',NDX6 ,16,IEGT,0) !

C	----------------------------------------
	ALLOCATE(AF3(N3),AF4(N4),AF6(N6))


	NPM(1) = N3
	NPI(1) = N3
	CALL CALLREAL(AF3,AAX,NDX3,NPM,NPI,1,'READ')
	AREA = AF3(1)		    !AREA
	MATN = INT(AF3(2))	!MAT No.
	NNOD = INT(AF3(3))	!Number of tendon points
	NSEG = INT(AF3(4))	!Number of tendon segment
	
      KPOS    = INT(AF3(8))			   !POST OR PRE
      FJAK(1) = AF3(9)				   !JACKING 1
      FJAK(2) = AF3(10)				   !JACKING 2
      FDIL(1) = AF3(11)				   !SLIP 1
      FDIL(2) = AF3(12)				   !SLIP 2

C     -------------------------------------------------------------
C     CALLING MATERIAL PROP.
C     -------------------------------------------------------------
	CALL LOCATN ('%CPP',KCPP,MAX3,NMSL,2)  !STRESS-STRAIN-YOUNG
	CALL RELFILL('%CPS',CFTR,5,MATN,0)     !FRICTION
	CALL RELFILL('%CPS',WFTR,6,MATN,0)     !WOBBLE
	CALL RELFILL('%CPS',SNPT,7,MATN,0)     !STRESS-STRAIN POINTS
	NSPT = INT(SNPT)
	ALLOCATE(FFPS(3,NSPT))
	MAX  = MAX3/3
	DO ISPT = 1,NSPT
	NUM = ISPT
	CALL RELFILL('%CPP',FFPS(1,ISPT),NUM,MATN,0)  !STRESS
	NUM = ISPT + MAX
	CALL RELFILL('%CPP',FFPS(2,ISPT),NUM,MATN,0)  !STRAIN
	NUM = ISPT + MAX + MAX
	CALL RELFILL('%CPP',FFPS(3,ISPT),NUM,MATN,0)  !YOUNG
	ENDDO
	YUNG = FFPS(3,1)
C     -------------------------------------------------------------


	ALLOCATE(STFC(NSEG),STF(NSEG),TEN(NSEG),ANG(2,NSEG),STFR(NSEG))
	ALLOCATE(FOCJ(NSEG))
	IDUM = NSEG
	DO ISEG = 1,NSEG
	NPM(1:2) = [N4,MSEG]
	NPI(1:2) = [N4,ISEG]
	CALL CALLREAL(AF4,AAX,NDX4,NPM,NPI,2,'READ')   !CALLING TENDON NODE DATA
	TEN(ISEG)   = AF4(13)
	ANG(1,ISEG) = AF4(14)
	ANG(2,IDUM) = AF4(15)
	IDUM = IDUM - 1
	ENDDO

C	FOR PRETENSION -- NO FRICTION AND ANCHORAGE SLIP LOSS
	IF(KPOS.EQ.1) THEN
	FJAK(2) = FJAK(1)
	CFTR = 0.0D0
	WFTR = 0.0D0
	FDIL(1:2) = 0.0D0
	ENDIF

C
C-----STRESS EACH END OF THE TENDON AS REQUIRED-----
C
25	CALL RZERO (STFC,NSEG)    !INITIALIZE SEGMENT FORCE
	CALL RZERO (STF ,NSEG)    !INITIALIZE SEGMENT FORCE
C

      IDIR = 0
      DO IEND=1,2
	MSG1 = IABS(IDIR-1)
	FLST = FJAK(IEND)
	TANG = 0.0D+0
	TLEN = 0.0D+0
	TLST = 0.0D+0
	DO MS=1,NSEG
	KSEG = IABS(IDIR-MS)
	TANG = TANG + ANG(IEND,KSEG)
	TLEN = TLEN + TEN(KSEG)
	FNXT = FJAK(IEND) * DEXP(-CFTR*TANG - WFTR*TLEN)
	FAVG = (FLST + FNXT) / 2.0D+0                        !AVERAGE SEGMENT FORCE

	IF(IEND.EQ.1) STFR(KSEG) = FAVG
	IF(IEND.EQ.2) THEN
	IF(FAVG.GT.STFR(KSEG))  STFR(KSEG) = FAVG
	ENDIF

	IF(IEND.EQ.1) FOCJ(KSEG) = FJAK(IEND)
	IF(IEND.EQ.2) THEN
	IF(FJAK(IEND).GT.FOCJ(KSEG))  FOCJ(KSEG) = FJAK(IEND)
	ENDIF

	TLST = TLEN
	FLST = FNXT
	ENDDO
	IDIR = NSEG + 1
	ENDDO


C
	NEND = 0

      IDIR = 0
      DO 60 IEND=1,2

	CALL RZERO (STFC,NSEG) !!!

		MSG1 = IABS(IDIR-1)
		IF(FJAK(IEND).LE.STFC(MSG1)) GOTO 60
C
C		-----INITIALIZE FOR FRICTION AND ANCHOR SLIP LOSSES-----
C
		AREQ = FDIL(IEND) * YUNG * AREA / 2.0D+0          !AREA REQUIRED (HALF)
		APRV = 0.0D+0
		TANG = 0.0D+0
		TLEN = 0.0D+0
		TLST = 0.0D+0
		SDON = .FALSE.
		IF(AREQ.LE.0.0D+0) SDON = .TRUE.

C
C		-----FIND FORCES IN EACH TENDON SEGMENT-----
C
		FLST = FJAK(IEND)
		DO 45 MS=1,NSEG

			KSEG = IABS(IDIR-MS)
C
C			-----FRICTION LOSSES-----
C
			TANG = TANG + ANG(IEND,KSEG)
			TLEN = TLEN + TEN(KSEG)
			FNXT = FJAK(IEND) * DEXP(-CFTR*TANG - WFTR*TLEN)
			FAVG = (FLST + FNXT) / 2.0D+0                        !AVERAGE SEGMENT FORCE

C
			IF (FAVG.LT.STFC(KSEG)) GOTO 55
			STFC(KSEG) = FAVG
C
C			-----DRAW-IN LOSSES-----
C
			IF (SDON) GOTO 35
			ATRP = (FLST-FNXT) * (TLST+TLEN) / 2.0D+0            !TRAPIZOIDAL AREA (HALF)
			APRV = APRV + ATRP                                   !ACCUMULATE TRAPIZOIDAL AREA (HALF)
			IF (APRV.LT.AREQ) GOTO 35
C
C			-----STATIONARY POINT FOUND-----
C
			SDON = .TRUE.
			AREQ = AREQ - APRV + ATRP                                  !FRACMENT OF REQUIRED AREA (HALF) DA
			SLOP = TEN(KSEG) / (FLST - FNXT)                           !DL/DF
			OFST = (TLST - DSQRT(TLST*TLST + 2.0D+0*SLOP*AREQ)) / SLOP !SOLVE EQUATION 0.5*DF*(2*TLST+SLOP*DF) = DA (SOLVE FOR NEGATIVE DF)
			FSTA = FLST + OFST                                         !AJUST F = F-DF
C
C			-----ADJUST PRIOR SEGMENTS FOR DRAW-IN LOSSES-----
C
			FST2 = FSTA + FSTA
			DO 30 ME=1,MS
				MSAG = IABS(IDIR-ME)
				IF(STFC(MSAG).LE.FSTA) GOTO 30
				SKAK = DMAX1((FST2-STFC(MSAG)),0.0D0)  !ADJUST DUE TO TRIANGULAR SHAPE  ! S - 2(S-F)
				IF(SKAK.LT.STFR(MSAG)) STFR(MSAG)= SKAK !!!
30			CONTINUE

C
C			-----UPDATE TOTALS-----
C
35			TLST = TLEN
			FLST = FNXT
C

45		CONTINUE
C
C		-----STATIONARY POINT AT FAR END OF TENDON-----
C
		IF(SDON) GOTO 55

		NEND = NEND + 1
		SDON = .TRUE.
		AREQ = AREQ - APRV
		OFST = 2.0D0*AREQ / TLEN
		FSTA = STFC(KSEG) - OFST
C
		FST2 = FSTA + FSTA
		DO 50 MSAG=1,NSEG
			SKAK = DMAX1((FST2-STFC(MSAG)),0.0D0) 
			IF(SKAK.LT.STFR(MSAG)) STFR(MSAG)= SKAK !!!
50		CONTINUE

		IF(NEND.EQ.2) THEN
			DO MSAG=1,NSEG
				SKAK = DMIN1(STF(MSAG),STFC(MSAG))
				IF(SKAK.LT.STFR(MSAG)) STFR(MSAG)= SKAK !!!
			ENDDO			
		ENDIF
		STF(1:NSEG) = STFC(1:NSEG)

C
C-----THIS END STRESSING COMPLETE - CHECK FOR DRAW-IN COMPLETE-----
C
55		IF(SDON) GOTO 60
		FDIL(1) = 0.0D+0
		FDIL(2) = 0.0D+0
		WRITE(NOT,2001)
		GOTO 25
C
60	IDIR = NSEG + 1


C
C-----BUILD TENDON SEGMENT RECORDS-----
C

	WRITE(NOT,2000) 
      DO 70 ISEG=1,NSEG

	NPM(1:2) = [N6,MSEG]
	NPI(1:2) = [N6,ISEG]
	CALL CALLREAL(AF6,AAX,NDX6,NPM,NPI,2,'READ')  !CALLING SEGMENT WORKING ARRAY

      FORC = STFR(ISEG)                             !CURRENT MECHANICAL FORCE
      FORN = 0.0                                    !CURRENT NON MECHANICAL FORCE
      FINI = FOCJ(ISEG)				                !INITIAL FORCE
	SIGA = FORC / AREA                            !CURRENT MECHANICAL STRESS

C
C-----DETERMINE MATERIAL STATE AFTER INSTALLATION-----
C
      DO 65 ISPT = 1,NSPT
		IF(SIGA.GT.FFPS(1,ISPT)) GOTO 65
		GOTO 66
65	CONTINUE
66	MCODEP = ISPT                       !MATERIAL CODE
      EMODP  = FFPS(3,ISPT)               !CURRENT YOUNG
      TEPSP  = (SIGA - FFPS(1,ISPT)) / EMODP + FFPS(2,ISPT) !TOTAL STRAIN
      TEPSMP = TEPSP                                        !TOTAL MECHANICAL STRAIN
	TEPSNP = 0.0D0                                        !TOTAL NON-MECHANICAL STRAIN

	AF6(1) = FORC
	AF6(2) = FORN
	AF6(3) = FINI
	AF6(4) = FLOAT(MCODEP)
	AF6(5) = EMODP
	AF6(6) = TEPSP      !JACKING STRAIN
	AF6(7) = TEPSMP
	AF6(8) = TEPSNP

	N6_R = 20 + 1       !POINTER OF RIGIDITY
	AF6(N6_R) = EMODP
	N6_S = 20 + 2       !POINTER OF MECHANICAL STRESS
	AF6(N6_S) = FORC


	NPM(1:2) = [N6,MSEG]
	NPI(1:2) = [N6,ISEG]
	CALL CALLREAL(AF6,AAX,NDX6,NPM,NPI,2,'WRIT')  !BACKUP SEGMENT WORKING ARRAY

C
C-----PRINT INITIAL TENDON DATA AFTER INSTALLATION-----
C
      IF(KPOS.EQ.0) THEN
	WRITE(NOT,2002) IEGT,ITEND,ISEG,MCODEP,FORC,SIGA,TEPSP
	ENDIF
      IF(KPOS.EQ.1) THEN
	WRITE(NOT,2003) IEGT,ITEND,ISEG,MCODEP,FORC,SIGA,TEPSP
	ENDIF
C

70	CONTINUE
C
	DEALLOCATE(AF3,AF4,AF6)
	DEALLOCATE(FFPS)
	DEALLOCATE(STFC,STF,TEN,ANG,STFR,FOCJ)


      RETURN

2000	FORMAT(//1x,'INITIAL TENDON DATA AFTER INSTALLATION',
     1       / 1x,38('-')//3x,'GRP     TDN     TENSIONING    SEG  MAT',
     2        /4x,'NO        TYPE        NO  CODE            ',
     3            'FORCE      STRESS      STRAIN'/)

2001	FORMAT(44X,'** WARNING: ERROR IN DRAW-IN LOSSES',/,
     1       44X,'   UNABLE TO COMPUTE DRAW-IN LOSSES',/,
     2       44X,'     FOR OVERLAPPING DRAW-IN ZONES.',/,
     3       44X,'   STRESS TENDON FROM ONE END ONLY',/,
     4       44X,'     OR ADJUST DRAW-IN DISTANCE.',/,
     5       44X,'   FOR THIS ANALYSIS THE EFFECTS OF',/,
     6       44X,'     ANCHOR DRAW-IN ARE *NEGLECTED*')
2002	FORMAT(1X,I5,'   POST-TENSIONED',3I5,8X,1P3E12.3)
2003	FORMAT(1X,I5,'    PRE-TENSIONED',3I5,8X,1P3E12.3)

      END


C	=======================================================================
C	=== CONSTRUCTION ANALYSIS =============== SONGSAK NOV2007 =============
C	=======================================================================

      SUBROUTINE TEDEFF(IEGT)
	IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER*4 (I-N)
C	ELEMENT FORCE AND STIFFNESS
	DIMENSION NPM(10),NPI(10)
	ALLOCATABLE IF1(:),IF2(:),AF3(:)
	ALLOCATABLE LMEQ(:),LREQ(:),RE(:),RL(:),SE(:),STLD(:),EXDI(:)
	ALLOCATABLE IAX(:),AAX(:)



      CALL LOCATN('-GSF',KGSF,NUM,NWK ,2) 
	CALL LOCATN('-LMA',KLMA,NUM,NEQ1,1)  


	CALL INTFILL('%NUB',NSN,1,1,0)
	CALL INTFILL('%NUB',NSF,1,2,0)
	CALL INTFILL('%NUB',NSC,1,4,0)


C	SOLUTION CONTROL ARRAY
      CALL INTFILL('%SOL',LOPT3,1,3,0)
      CALL INTFILL('%SOL',LOPT4,1,4,0)
      CALL INTFILL('%SOL',LOPT5,1,5,0)



C	----------------------------------------
C	GROUP DATA
C	----------------------------------------
	CALL INTFILL('TGRP',NTEND,1 ,IEGT,0) !
	CALL INTFILL('TGRP',MSEG ,2 ,IEGT,0) !MAX NUM OF TENDON SEGMENT
	CALL INTFILL('TGRP',NEFT ,3 ,IEGT,0) !
	CALL INTFILL('TGRP',NNMT ,4 ,IEGT,0) !
	CALL INTFILL('TGRP',NNFT ,5 ,IEGT,0) !
	CALL INTFILL('TGRP',LINK ,6 ,IEGT,0) !
	CALL INTFILL('TGRP',ITDYP,7 ,IEGT,0) !ITDYP = TENDON OPTION (0=ON NODE, OTHERWISE=ON ELEM SEPECIFY BY ITDYP)	
C	GROUP FILE	
	CALL INTFILL('TGRF',N1   ,1 ,IEGT,0) !
	CALL INTFILL('TGRF',N2   ,2 ,IEGT,0) !
	CALL INTFILL('TGRF',N3   ,3 ,IEGT,0) !

	CALL INTFILL('TGRF',NDX1 ,11,IEGT,0) !
	CALL INTFILL('TGRF',NDX2 ,12,IEGT,0) !
	CALL INTFILL('TGRF',NDX3 ,13,IEGT,0) !
	
	CALL INTFILL('TGRF',NFLI ,21,IEGT,0) !
	CALL INTFILL('TGRF',NFLR ,22,IEGT,0) !
	
	CALL INTFILL('TGRF',LASI ,23,IEGT,0) !
	CALL INTFILL('TGRF',LASR ,24,IEGT,0) !
C
	NEK = (NEFT*NEFT+NEFT)/2

	ALLOCATE(LMEQ(NEFT),LREQ(NEFT),RE(NEFT),RL(NEFT),SE(NEK))
	ALLOCATE(IF1(N1),IF2(N2),AF3(N3))
	ALLOCATE(STLD(NEFT),EXDI(NEFT))
	ALLOCATE(IAX(LASI),AAX(LASR))
C	------------------------------------
C	LOOP OVER ELEMENT
C	------------------------------------
	DO 5000 ITEND = 1,NTEND

      READ(NFLI,REC=NTEND+ITEND,ERR=5) IXIST !READ EXISTING FLAG TO LAST RECORD OF ELEMENT INTEGER DATA (INCREASE THE SPEED PURPOSE)
      GOTO 6
5     IXIST = 0
6     IF(IXIST.LE.0) GOTO 5000
      
      READ(NFLI,REC=ITEND) IAX
      READ(NFLR,REC=ITEND) AAX

	NPM(1) = N3
	NPI(1) = N3
	CALL CALLREAL(AF3,AAX,NDX3,NPM,NPI,1,'READ')
	NSEG  = INT(AF3(4))  !Number of tendon segment
C	------------------------------------
C	LOOP OVER SEGMENT
C	------------------------------------
	DO 4000 ISEG = 1,NSEG

	SE(1:NEK) = 0.0D0
	RE(1:NEFT) = 0.0D0
	RL(1:NEFT) = 0.0D0
	EXDI(1:NEFT) = 0.0D0
	STLD(1:NEFT) = 0.0D0

	NPM(1:2) = [N2,MSEG]
	NPI(1:2) = [N2,ISEG]
	CALL CALLINTG(IF2,IAX,NDX2,NPM,NPI,2,'READ')
	DO IEFT = 1,NEFT
	LREQ(IEFT) = IF2(IEFT)        !ORIGINAL EQUA
	LMEQ(IEFT) = IF2(IEFT+NEFT)   !IF2(NEF+1:NEF+NEF) = CURRENT EQAUATION
	ENDDO

C	LSTF  0 = NO COMPUTE OF STIFFNESS   1 = COMPUTE STIFFNESS
C	LFOC  0 = NO COMPUTE OF ELM FORCE   1 = COMPUTE ELM FORCE
	LSTF = 0
	IF(LOPT4.GT.0.OR.LOPT5.GT.0) LSTF = 1
C	------------------------------------
	IF(LOPT3.EQ.1) THEN
C	--------------------------
	LFOC = 1
	CALL TEDOPT3(IEGT,ISEG,ITEND,SE,RE,LSTF,LFOC,AAX)
	DO IEFT = 1,NEFT
	IEQ  = IF2(IEFT)   !IF2(1:NEF) = ORIGINAL EQAUATION
	CALL RELFILL('-NML',RE(IEFT),IEQ,1,2)    !STORE NON-MECHANICAL FORCE
	ENDDO
C	------------------------------------
	ENDIF
C	------------------------------------
	IF(LOPT3.EQ.2) THEN
C	--------------------------
	LFOC = 2
	CALL TEDOPT3(IEGT,ISEG,ITEND,SE,RE,LSTF,LFOC,AAX)
	DO IEFT = 1,NEFT
	IEQ  = IF2(IEFT)   !IF2(1:NEF) = ORIGINAL EQAUATION
	CALL RELFILL('-EIS',RE(IEFT),IEQ,1,2)    !STORE MECHANICAL FORCE
	ENDDO
C	------------------------------------
	ENDIF
C	------------------------------------
	IF(LOPT3.EQ.3) THEN
C	--------------------------
	LFOC = 1
	CALL TEDOPT3(IEGT,ISEG,ITEND,SE,RE,0   ,LFOC,AAX)  !NO STIFFNESS COMPUTATION HERE
	DO IEFT = 1,NEFT
	IEQ  = IF2(IEFT)   !IF2(1:NEF) = ORIGINAL EQAUATION
	CALL RELFILL('-NML',RE(IEFT),IEQ,1,2)    !STORE NON-MECHANICAL FORCE 
	ENDDO
C	--------------------------
	LFOC = 2
	RE(1:NEFT)   = 0.0D0
	CALL TEDOPT3(IEGT,ISEG,ITEND,SE,RE,LSTF,LFOC,AAX)
	DO IEFT = 1,NEFT
	IEQ  = IF2(IEFT)   !IF2(1:NEF) = ORIGINAL EQAUATION
	CALL RELFILL('-EIS',RE(IEFT),IEQ,1,2)    !STORE MECHANICAL FORCE
	ENDDO
C	------------------------------------
	ENDIF
C	------------------------------------
	IF(LOPT3.EQ.4) THEN
C	--------------------------
	LFOC = 2
	CALL TEDOPT3(IEGT,ISEG,ITEND,SE,RE,LSTF,LFOC,AAX)
	DO IEFT = 1,NEFT
	IEQ  = IF2(IEFT)   !IF2(1:NEF) = ORIGINAL EQAUATION
	CALL RELFILL('-EIS',RE(IEFT),IEQ,1,2)    !STORE MECHANICAL FORCE
	ENDDO
C	------------------------------------
	ENDIF
C	------------------------------------


	IF(LOPT3.EQ.0.AND.LSTF.GT.0) THEN
	LFOC = 0
	CALL TEDOPT3(IEGT,ISEG,ITEND,SE,RE,LSTF,LFOC,AAX)  !STIFFNESS COMPUTATION HERE IF LOPT3 EQ 0
	ENDIF

C	ASSEMBLE OF STIFFNESS
	IF(LOPT4.GT.0) THEN
	CALL STIFLAX(LREQ,SE,NEFT,NNMT)  !TRANSFORMATION DUE TO LOCAL SUPPORT
	CALL ASBSTF(SE,LMEQ,NEFT) 
	ENDIF

C	------------------------------------
C	FORCE FROM INCREMENTAL PRESCRIBED DISP.
	IF(LOPT5.GT.0) THEN
	DO IEFT = 1,NEFT
	IEQ  = IF2(IEFT)   !IF2(1:NEF) = ORIGINAL EQAUATION
	CALL RELFILL('$XDI',EXDI(IEFT),IEQ,1,0)  !GETTING HERE INCREMENTAL NODAL PRESCRIBED DISPLACEMENT
	ENDDO
	CALL MULTRI(SE,EXDI,STLD,NEFT)
	DO IEFT = 1,NEFT
	IEQ  = IF2(IEFT)   !IF2(1:NEF) = ORIGINAL EQAUATION
	CALL RELFILL('-STL',STLD(IEFT),IEQ,1,2)  !STORE FORCE FROM INCREMENTAL NODAL PRESCRIBED DISPLACEMENT
	ENDDO
	ENDIF
C	------------------------------------


C	------------------------------------
4000	CONTINUE
C	------------------------------------


C      WRITE(NFLI,REC=ITEND) IAX
C      WRITE(NFLR,REC=ITEND) AAX
C	------------------------------------
5000	CONTINUE
C	------------------------------------

	DEALLOCATE(IAX,AAX)
	DEALLOCATE(LMEQ,LREQ,RE,RL,SE)
	DEALLOCATE(IF1,IF2,AF3)
	DEALLOCATE(STLD,EXDI)


	RETURN
	END




C	=======================================================================
C	=== CONSTRUCTION ANALYSIS =============== SONGSAK NOV2007 =============
C	=======================================================================
      SUBROUTINE TEDUPD(IEGT)
	IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER*4 (I-N)
C	STRESS AND RIGIDITY & MATERIAL STATE
	DIMENSION NPM(10),NPI(10)
	ALLOCATABLE IF1(:),IF2(:),AF3(:),AF7(:)
	ALLOCATABLE EDIS(:),EDIST(:)
	ALLOCATABLE IAX(:),AAX(:)


	CALL INTFILL('%NUB',NSN,1,1,0)
	CALL INTFILL('%NUB',NSF,1,2,0)
	CALL INTFILL('%NUB',NSC,1,4,0)

      CALL INTFILL('%SOL',LOPT1,1,1,0)
      CALL INTFILL('%SOL',LOPT2,1,2,0)


C	----------------------------------------
C	GROUP DATA
C	----------------------------------------
	CALL INTFILL('TGRP',NTEND,1 ,IEGT,0) !
	CALL INTFILL('TGRP',MSEG ,2 ,IEGT,0) !MAX NUM OF TENDON SEGMENT
	CALL INTFILL('TGRP',NEFT ,3 ,IEGT,0) !
	CALL INTFILL('TGRP',NNMT ,4 ,IEGT,0) !
	CALL INTFILL('TGRP',NNFT ,5 ,IEGT,0) !
	CALL INTFILL('TGRP',LINK ,6 ,IEGT,0) !
	CALL INTFILL('TGRP',ITDYP,7 ,IEGT,0) !ITDYP = TENDON OPTION (0=ON NODE, OTHERWISE=ON ELEM SEPECIFY BY ITDYP)	
C	GROUP FILE	
	CALL INTFILL('TGRF',N1   ,1 ,IEGT,0) !
	CALL INTFILL('TGRF',N2   ,2 ,IEGT,0) !
	CALL INTFILL('TGRF',N3   ,3 ,IEGT,0) !
	CALL INTFILL('TGRF',N7   ,7 ,IEGT,0) !

	CALL INTFILL('TGRF',NDX1 ,11,IEGT,0) !
	CALL INTFILL('TGRF',NDX2 ,12,IEGT,0) !
	CALL INTFILL('TGRF',NDX3 ,13,IEGT,0) !
	CALL INTFILL('TGRF',NDX7 ,17,IEGT,0) !
	
	CALL INTFILL('TGRF',NFLI ,21,IEGT,0) !
	CALL INTFILL('TGRF',NFLR ,22,IEGT,0) !
	
	CALL INTFILL('TGRF',LASI ,23,IEGT,0) !
	CALL INTFILL('TGRF',LASR ,24,IEGT,0) !
	
	
	ALLOCATE(IF1(N1),IF2(N2),AF3(N3),AF7(N7))
	ALLOCATE(EDIS(NEFT),EDIST(NEFT))
	ALLOCATE(IAX(LASI),AAX(LASR))

C	------------------------------------
C	LOOP OVER ELEMENT
C	------------------------------------
	DO 5000 ITEND = 1,NTEND
	
      READ(NFLI,REC=NTEND+ITEND,ERR=5) IXIST !READ EXISTING FLAG TO LAST RECORD OF ELEMENT INTEGER DATA (INCREASE THE SPEED PURPOSE)
      GOTO 6
5     IXIST = 0
6     IF(IXIST.LE.0) GOTO 5000
      
      READ(NFLI,REC=ITEND) IAX
      READ(NFLR,REC=ITEND) AAX
      
	NPM(1) = N3
	NPI(1) = N3
	CALL CALLREAL(AF3,AAX,NDX3,NPM,NPI,1,'READ')
	NSEG  = INT(AF3(4))  !Number of tendon segment


C	------------------------------------
C	LOOP OVER SEGMENT
C	------------------------------------
	DO 4000 ISEG = 1,NSEG


C	------------------------------------
	IF(LOPT2.GT.0) THEN  !UPDATE NON-MECHANICAL BEFORE MECHANICAL
C	--------------------------
	CALL TEDUPD2(IEGT,ISEG,ITEND,AAX)
	ENDIF
C	------------------------------------

C	------------------------------------
	IF(LOPT1.GT.0) THEN

C	--------------------------
	IF(LOPT1.EQ.1) THEN	   !WHEN UPDATE STRESS
	CALL INTFILL('%COV',ICONV,1,10,0)                     !ITERATION CONVERGENCE FLAG
	NPM(1:2) = [N2,MSEG]
	NPI(1:2) = [N2,ISEG]
	CALL CALLINTG(IF2,IAX,NDX2,NPM,NPI,2,'READ')          !IF2(1:NEF) = ORIGINAL EQAUATION
	NPM(1) = N3
	NPI(1) = N3
	CALL CALLREAL(AF3,AAX,NDX3,NPM,NPI,1,'READ')          !CALLING TENDON DATA
	IXIST = INT(AF3(5)) !EXISTING FLAG
	KPOS  = INT(AF3(8)) !1=PRE   0=POST
	IF(IXIST.EQ.1.AND.KPOS.EQ.0) THEN                     !FOR POST TENSION
	NPM(1:2) = [N7,MSEG]
	NPI(1:2) = [N7,ISEG]
	CALL CALLREAL(AF7,AAX,NDX7,NPM,NPI,2,'READ')          !INITIAL ERECTION DISPLACEMENT 
	IF(ISEG.EQ.NSEG.AND.ICONV.GT.0) AF3(5) = FLOAT(2)	    !CHANGE IXIST TO 2 (MEAN THAT WE UPDATE THE EFFECT DURING JACKING ALREADY)  UPDATE WHEN CONVERGENCE ACHIEVE
	EDIS(1:NEFT) = 0.0D0
	DO IEFT = 1,NEFT
	IEQ = IF2(IEFT)
	CALL RELFILL('$XDS',EDIS(IEFT),IEQ,1,0)                !GETTING HERE NODAL DISPLACEMENT
	AF7(IEFT) = EDIS(IEFT)			                     !AF6(1:NEF) = INITAIL ERECTED DISP.
	ENDDO
	NPM(1:2) = [N7,MSEG]
	NPI(1:2) = [N7,ISEG]
	CALL CALLREAL(AF7,AAX,NDX7,NPM,NPI,2,'WRIT')          !UPDATE INITIAL DISPLACEMENT DUE TO JACKING
	NPM(1) = N3
	NPI(1) = N3
	CALL CALLREAL(AF3,AAX,NDX3,NPM,NPI,1,'WRIT')          !UPDATE TENDON DATA
	ENDIF
	ENDIF
C	--------------------------
C	EXTRACT NODAL DISPLACEMENT
	NPM(1:2) = [N2,MSEG]
	NPI(1:2) = [N2,ISEG]
	CALL CALLINTG(IF2,IAX,NDX2,NPM,NPI,2,'READ')          !IF2(1:NEF) = ORIGINAL EQAUATION
	NPM(1:2) = [N7,MSEG]
	NPI(1:2) = [N7,ISEG]
	CALL CALLREAL(AF7,AAX,NDX7,NPM,NPI,2,'READ')          !INITIAL ERECTION DISPLACEMENT
	 EDIS(1:NEFT) = 0.0D0
	EDIST(1:NEFT) = 0.0D0
	DO IEFT = 1,NEFT
	IEQ = IF2(IEFT)
	CALL RELFILL('$XDS',EDIST(IEFT),IEQ,1,0)                  !GETTING HERE NODAL DISPLACEMENT
	EDIS(IEFT) = EDIST(IEFT) - AF7(IEFT)                      !AF7(1:NEF) = INITAIL ERECTED DISP.
	ENDDO
C	--------------------------
	CALL TEDUPD1(IEGT,ISEG,ITEND,EDIS,EDIST,AAX)
	ENDIF
C	------------------------------------

C	------------------------------------
4000	CONTINUE
C	------------------------------------

      WRITE(NFLI,REC=ITEND) IAX
      WRITE(NFLR,REC=ITEND) AAX
C	------------------------------------
5000	CONTINUE
C	------------------------------------


	DEALLOCATE(IAX,AAX)
	DEALLOCATE(IF1,IF2,AF3,AF7)
	DEALLOCATE(EDIS,EDIST)


	RETURN
	END


C	=======================================================================
C	=== CONSTRUCTION ANALYSIS =============== SONGSAK NOV2007 =============
C	=======================================================================

	SUBROUTINE TEDUPD1(IEGT,ISEG,ITEND,EDIS,EDIST,AAX)
	IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER*4 (I-N)
C	LTMOPT(1)  WORKING ON MECHANICAL DATA
C	 0 = NO UPDATE STRESS & MATERIAL STATE
C	 1 = UPDATE STRESS & MATERIAL STATE
C	 2 = STIFFNESS ONLY


	DIMENSION EDIS(1),EDIST(1)

	DIMENSION COORI(3,2),OFFI(3,2),HF1(27),HF2(27)
	DIMENSION NPM(10),NPI(10),AAX(1)


	ALLOCATABLE AF3(:),AF4(:),AF6(:)
	ALLOCATABLE FFPS(:,:),BBX(:)
	
C	CALLING LOPT1
      CALL INTFILL('%SOL',LOPT1,1,1,0)
      
C	----------------------------------------
C	GROUP DATA
C	----------------------------------------
	CALL INTFILL('TGRP',NTEND,1 ,IEGT,0) !
	CALL INTFILL('TGRP',MSEG ,2 ,IEGT,0) !MAX NUM OF TENDON SEGMENT
	CALL INTFILL('TGRP',NEFT ,3 ,IEGT,0) !
	CALL INTFILL('TGRP',NNMT ,4 ,IEGT,0) !
	CALL INTFILL('TGRP',NNFT ,5 ,IEGT,0) !
	CALL INTFILL('TGRP',LINK ,6 ,IEGT,0) !
	CALL INTFILL('TGRP',ITDYP,7 ,IEGT,0) !ITDYP = TENDON OPTION (0=ON NODE, OTHERWISE=ON ELEM SEPECIFY BY ITDYP)	
C	GROUP FILE	
	CALL INTFILL('TGRF',N3   ,3 ,IEGT,0) !
	CALL INTFILL('TGRF',N4   ,4 ,IEGT,0) !
	CALL INTFILL('TGRF',N6   ,6 ,IEGT,0) !

	CALL INTFILL('TGRF',NDX3 ,13,IEGT,0) !
	CALL INTFILL('TGRF',NDX4 ,14,IEGT,0) !
	CALL INTFILL('TGRF',NDX6 ,16,IEGT,0) !

C	----------------------------------------
	ALLOCATE(AF3(N3),AF4(N4),AF6(N6),BBX(NEFT))

	NPM(1) = N3
	NPI(1) = N3
	CALL CALLREAL(AF3,AAX,NDX3,NPM,NPI,1,'READ')  !CALLING TENDON DATA
	AREA  = AF3(1)		!AREA
	MATN  = INT(AF3(2))	!MAT No.
	IXIST = INT(AF3(5))   !EXISTING FLAG
	
	IF (IXIST.EQ. 0) GOTO 300 ! NEVER EXISTED & CURRENTLY REMOVED


	NPM(1:2) = [N4,MSEG]
	NPI(1:2) = [N4,ISEG]
	CALL CALLREAL(AF4,AAX,NDX4,NPM,NPI,2,'READ')
	TELN	= AF4(13) !SEGMENT LENGTH

      COORI(1:3,1) = AF4(1:3) ; COORI(1:3,2) = AF4(4 :6 ) !CALL TENDON COORDIANTES
       OFFI(1:3,1) = AF4(7:9) ;  OFFI(1:3,2) = AF4(10:12) !CALL TENDON OFFSET
         
      N4_H = 20 + 1 !POINTER FOR H-MATRIX
      NNMT2 = NNMT/2
      HF1(1:NNMT2) = AF4(N4_H      :N4_H+NNMT2-1      ) !CALL H-MATRIX
      HF2(1:NNMT2) = AF4(N4_H+NNMT2:N4_H+NNMT2-1+NNMT2) !CALL H-MATRIX
      	
      	
	NPM(1:2) = [N6,MSEG]
	NPI(1:2) = [N6,ISEG]
	CALL CALLREAL(AF6,AAX,NDX6,NPM,NPI,2,'READ')
	FORC	= AF6(1)
	FORN	= AF6(2)
	FINI	= AF6(3)
	MCODEP= AF6(4)
	EMODP	= AF6(5)
	EP   	= AF6(6)  !JACKING STRAIN
	EMP	= AF6(7)  !TOTAL MECHA STRAIN
	ENP	= AF6(8)  !TOTAL NON-MECHA STRAIN
	RLXP	= AF6(9)  !TOTAL RELAXATION FORCE
	
	N6_R = 20 + 1       !POINTER OF RIGIDITY
	N6_S = 20 + 2       !POINTER OF MECHANICAL STRESS
	N6_N = 20 + 3       !POINTER OF NON-MECHANICAL STRESS
	N6_B = 20 + 10 + 1  !POINTER OF B-MATRIX
	
C     ------------------------------------------------------------
C	MATERIAL PROP
C     ------------------------------------------------------------
	CALL LOCATN ('%CPP',KCPP,MAX3,NMSL,2)  !STRESS-STRAIN-YOUNG
	CALL RELFILL('%CPS',CFTR,5,MATN,0)     !FRICTION
	CALL RELFILL('%CPS',WFTR,6,MATN,0)     !WOBBLE
	CALL RELFILL('%CPS',SNPT,7,MATN,0)     !STRESS-STRAIN POINTS
	NSPT = INT(SNPT)
	ALLOCATE(FFPS(3,NSPT))
	MAX  = MAX3/3
	DO ISPT = 1,NSPT
	NUM = ISPT
	CALL RELFILL('%CPP',FFPS(1,ISPT),NUM,MATN,0)  !STRESS
	NUM = ISPT + MAX
	CALL RELFILL('%CPP',FFPS(2,ISPT),NUM,MATN,0)  !STRAIN
	NUM = ISPT + MAX + MAX
	CALL RELFILL('%CPP',FFPS(3,ISPT),NUM,MATN,0)  !YOUNG
	ENDDO

C     ------------------------------------------------------------
C     B-MATRIX
C     ------------------------------------------------------------
      SELECTCASE(ITDYP)
      CASE(0) !NODAL TENDON
        CALL TDNBMAT(COORI,OFFI,EDIST,BBX,TELN,'LIN')
      CASE(5,9,10) !FRAME, SHELL, SOLID TENDON
        CALL TDNBMATE(COORI,OFFI,HF1,HF2,NNMT,NNFT,NEFT,EDIST,BBX,TELN,'LIN')      
      ENDSELECT
      AF6(N6_B:N6_B+NEFT-1) = BBX(1:NEFT) !UPDATE B-MATRIX

C     ------------------------------------------------------------
C     STRAIN TERMS 
C     ------------------------------------------------------------
	EC = EP                !JACKING STRAIN INITIAL
	DO I = 1,NEFT
	  EC = EC + BBX(I)*EDIS(I)
	ENDDO
	

	EMC = EC  - ENP  !TOTAL CURRENT MECHANICAL STRAIN
	DMC = EMC - EMP  !INCR  CURRENT MECHANICAL STRAIN
	EMP = EMC        !UPDATE  TOTAL MECHANICAL STRAIN
	
	IF(EMC.LE.0.0D0) THEN
	ISPT = 1
	SIGA = 0.0D0
	GOTO 66
	ENDIF

      DO 65 ISPT = 1,NSPT
		IF(EMC.GT.FFPS(2,ISPT)) GOTO 65
		GOTO 66
65	CONTINUE
66	MCODEP = ISPT                       !MATERIAL CODE

      EMODP  = FFPS(3,ISPT)               !CURRENT YOUNG
      SIGA   = EMODP *(EMC - FFPS(2,ISPT)) + FFPS(1,ISPT) !TOTAL STRESS
	FORC   = SIGA*AREA
	FORC   = FORC - RLXP                !ADJUST DUE TO RELAXATION
	IF(FORC.LT.0.0D0) FORC = 0.0D0


	IF(LOPT1.EQ.1)  THEN
	    AF6(1) = FORC	
	    AF6(2) = FORN	
	    AF6(3) = FINI	
	    AF6(4) = MCODEP	
	    AF6(5) = EMODP	
	    AF6(6) = EP   	!JACKING STRAIN
	    AF6(7) = EMP	    !TOTAL MECHA STRAIN
	    AF6(8) = ENP	    !TOTAL NON-MECHA STRAIN
	    AF6(9) = RLXP	    !TOTAL RELAXATION FORCE
    	
	    AF6(N6_S) = FORC
	    AF6(N6_R) = EMODP
	ENDIF

	IF(LOPT1.EQ.2)  THEN
	    AF6(N6_S) = FORC
	    AF6(N6_R) = EMODP
	ENDIF

	
	DEALLOCATE(FFPS)


	NPM(1:2) = [N6,MSEG]
	NPI(1:2) = [N6,ISEG]
	CALL CALLREAL(AF6,AAX,NDX6,NPM,NPI,2,'WRIT') !BACK UP HERE RIGIDITY AND MCHA STRESS

300	CONTINUE


	DEALLOCATE(AF3,AF4,AF6,BBX)


	RETURN

	END



C	=======================================================================
C	=== CONSTRUCTION ANALYSIS =============== SONGSAK NOV2007 =============
C	=======================================================================

	SUBROUTINE TEDUPD2(IEGT,ISEG,ITEND,AAX)
	IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER*4 (I-N)
C	LTMOPT(2)  WORKING ON NON-MECHANICAL DATA
C	 0 = NO UPDATE DATA
C	 1 = UPDATE DATA AT START OF TIME STEP (THIS SUBROUTINE)
C	 2 = UPDATE DATA AT END OF TIME STEP
C	 3 = UPDATE DATA FOREACH ITERATION STEP

	DIMENSION DATE(2)
	DIMENSION NPM(10),NPI(10)

	ALLOCATABLE AF3(:),AF4(:),AF6(:)
	

C	CALLING LOPT2
      CALL INTFILL('%SOL',LOPT2,1,2,0)

C	CALL TODAY
	CALL RELFILL('-SOV',TODAY,1,1,0) 
		
C	----------------------------------------
C	GROUP DATA
C	----------------------------------------
	CALL INTFILL('TGRP',NTEND,1 ,IEGT,0) !
	CALL INTFILL('TGRP',MSEG ,2 ,IEGT,0) !MAX NUM OF TENDON SEGMENT
	CALL INTFILL('TGRP',NEFT ,3 ,IEGT,0) !
	CALL INTFILL('TGRP',NNMT ,4 ,IEGT,0) !
	CALL INTFILL('TGRP',NNFT ,5 ,IEGT,0) !
	CALL INTFILL('TGRP',LINK ,6 ,IEGT,0) !
	CALL INTFILL('TGRP',ITDYP,7 ,IEGT,0) !ITDYP = TENDON OPTION (0=ON NODE, OTHERWISE=ON ELEM SEPECIFY BY ITDYP)	
C	GROUP FILE	
	CALL INTFILL('TGRF',N3   ,3 ,IEGT,0) !
	CALL INTFILL('TGRF',N4   ,4 ,IEGT,0) !
	CALL INTFILL('TGRF',N6   ,6 ,IEGT,0) !

	CALL INTFILL('TGRF',NDX3 ,13,IEGT,0) !
	CALL INTFILL('TGRF',NDX4 ,14,IEGT,0) !
	CALL INTFILL('TGRF',NDX6 ,16,IEGT,0) !
		
C	----------------------------------------
	ALLOCATE(AF3(N3),AF4(N4),AF6(N6))



	NPM(1) = N3
	NPI(1) = N3
	CALL CALLREAL(AF3,AAX,NDX3,NPM,NPI,1,'READ')  !CALLING TENDON DATA
	AREA  = AF3(1)		!AREA
	MATN  = INT(AF3(2))	!MAT No.
	NSEG  = INT(AF3(4))   !Number of tendon segment
	IXIST = INT(AF3(5))   !EXISTING FLAG
      DATE(1) = AF3(6)	    !CURRENT DAY
      DATE(2) = AF3(7)	    !TENSIONING DAY 

	IF (IXIST.EQ. 0) GOTO 300 ! NEVER EXISTED & CURRENTLY REMOVED
	
	NPM(1:2) = [N4,MSEG]
	NPI(1:2) = [N4,ISEG]
	CALL CALLREAL(AF4,AAX,NDX4,NPM,NPI,2,'READ')
	TELN	= AF4(13) !SEGMENT LENGTH

	NPM(1:2) = [N6,MSEG]
	NPI(1:2) = [N6,ISEG]
	CALL CALLREAL(AF6,AAX,NDX6,NPM,NPI,2,'READ')
	FORC	= AF6(1)
	FORN	= AF6(2)
	FINI	= AF6(3)
	MCODEP= AF6(4)
	EMODP	= AF6(5)
	EP   	= AF6(6)  !JACKING STRAIN
	EMP	= AF6(7)  !TOTAL MECHA STRAIN
	ENP	= AF6(8)  !TOTAL NON-MECHA STRAIN
	RLXP	= AF6(9)  !TOTAL RELAXATION FORCE

		
	CALL RELFILL('%CPS',FPYD,1,MATN,0)     !YIELD STRENGTH
	CALL RELFILL('%CPS',RLAX,4,MATN,0)     !RELAXATION COEF.
	
	CALL RELFILL('%CPS',CTEN,10,MATN,0)    !CHINA CODE TENSIONING FACTOR
	CALL RELFILL('%CPS',CLAX,11,MATN,0)    !CHINA CODE RELAXATION FACTOR
      ICHINA = 0
      IF(CTEN.GT.0.0.AND.CLAX.GT.0.0) ICHINA = 1
      
	N6_R = 20 + 1       !POINTER OF RIGIDITY
	N6_S = 20 + 2       !POINTER OF MECHANICAL STRESS
	N6_N = 20 + 3       !POINTER OF NON-MECHANICAL STRESS
	N6_B = 20 + 10 + 1  !POINTER OF B-MATRIX

	FORN = 0.0D0
	IF(LOPT2.NE.1) GOTO 100
	
C     ------------------------------------------------------------
C     RELAXATION STRAIN
C     ------------------------------------------------------------
	TC = TODAY   - DATE(2)
	TP = DATE(1) - DATE(2)

	FORN = 0.0D0
C
C-----FIND FORCE RELAXATION OVER THIS TIME STEP-----
C
      IF(TODAY.EQ.DATE(2)) GO TO 30
      IF(TODAY.EQ.DATE(1)) GO TO 30
      IF(RLAX.EQ.0.0D0.AND.ICHINA.EQ.0) GO TO 30
      
      FPS = FORC / AREA
      
      IF(ICHINA.EQ.1) GOTO 25

C     -----------------------------------------------------------------
C     FOR STANDARD METHOD OF RELAXATION CALCULATION  (LOGARITHM METHOD)  
C     -----------------------------------------------------------------   
C
C-----FIND FICTITIOUS INITIAL STRESS-----
C
      IF(DATE(1).EQ.DATE(2)) THEN
	FPSI = FORC / AREA
         IF(FPSI/FPYD .LE. 0.55D0) GO TO 30
         GO TO 20
      ENDIF
      CR = DLOG10(TP*24.0D+0) / RLAX
      AR = CR / FPYD
      BR = 1.0D+0 + (0.55D+0 * CR)
      FPSI = (BR-DSQRT(BR*BR-4.D+0*AR*FPS))/(AR+AR)
      IF(FPSI/FPYD .LE. 0.55D0) GO TO 30
C
C-----RELAX OVER THIS TIME STEP-----
C
20	CR = DLOG10(TC*24.0D+0) / RLAX
      FPSR = FPSI * (1.0D+0-CR*(FPSI/FPYD-.55D+0))
      
      GOTO 28
C     -----------------------------------------------------------------
C     -----------------------------------------------------------------    
C     FOR CHINA CODE CALCULATION OF RELAXATION JTG D62-2004 METHOD  
C     -----------------------------------------------------------------   
25    CONTINUE      
C
C-----FIND FICTITIOUS INITIAL STRESS-----
C
      IF(DATE(1).EQ.DATE(2)) THEN
	FPSI = FORC / AREA
         IF(0.52*FPSI/FPYD .LE. 0.26D0) GO TO 30
         GO TO 26
      ENDIF
      CR = CTEN*CLAX*CHNRLAX(TP)
      AR = 0.52*CR / FPYD
      BR = 1.0D0 + (0.26D0 * CR)
      FPSI = (BR-DSQRT(BR*BR-4.0D0*AR*FPS))/(AR+AR)
      IF(0.52*FPSI/FPYD .LE. 0.26D0) GO TO 30
C
C-----RELAX OVER THIS TIME STEP-----
C
26	CR = CTEN*CLAX*CHNRLAX(TC)
      FPSR = FPSI * (1.0D0-CR*(0.52D0*FPSI/FPYD-0.26D0))

      GOTO 28    
C     -----------------------------------------------------------------
C     ----------------------------------------------------------------- 
28    DRLX = (FPS - FPSR) * AREA
      RLXP = RLXP + DRLX
	FORN = DRLX
30	CONTINUE

      IF(ISEG.EQ.NSEG) AF3(6) = TODAY	!UPDATE CURRENT DAY  (AT THE LAST SEGMENT)

100	CONTINUE

	AF6(N6_N) =-FORN

	AF6(1) = FORC	
	AF6(2) = FORN	
	AF6(3) = FINI	
	AF6(4) = MCODEP	
	AF6(5) = EMODP	
	AF6(6) = EP       !JACKING STRAIN
	AF6(7) = EMP	    !TOTAL MECHA STRAIN
	AF6(8) = ENP	    !TOTAL NON-MECHA STRAIN (NO CHANGE IN NON-MECHANICAL STRAIN DUE TO RELAX)
	AF6(9) = RLXP	    !TOTAL RELAXATION FORCE

	NPM(1:2) = [N6,MSEG]
	NPI(1:2) = [N6,ISEG]
	CALL CALLREAL(AF6,AAX,NDX6,NPM,NPI,2,'WRIT')  !BACK UP HERE RIGIDITY AND MCHA STRESS

	NPM(1) = N3
	NPI(1) = N3
	CALL CALLREAL(AF3,AAX,NDX3,NPM,NPI,1,'WRIT')  !BACK UP TENDON DATA

300	CONTINUE


	DEALLOCATE(AF3,AF4,AF6)


	RETURN

	END



C	=======================================================================
C	=== CONSTRUCTION ANALYSIS =============== SONGSAK NOV2007 =============
C	=======================================================================
	SUBROUTINE TEDOPT3(IEGT,ISEG,ITEND,S,RE,LSTF,LFOC,AAX)
	IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER*4 (I-N)
C	LTMOPT(1)  WORKING ON MECHANICAL DATA
C	 0 = NO UPDATE STRESS & MATERIAL STATE
C	 1 = UPDATE STRESS & MATERIAL STATE
C	 2 = STIFFNESS ONLY


	DIMENSION S(1),RE(1),AAX(1)
	DIMENSION NPM(10),NPI(10)


	ALLOCATABLE AF3(:),AF4(:),AF6(:),BBX(:,:),AKG(:,:)

C	----------------------------------------
C	GROUP DATA
C	----------------------------------------
	CALL INTFILL('TGRP',NTEND,1 ,IEGT,0) !
	CALL INTFILL('TGRP',MSEG ,2 ,IEGT,0) !MAX NUM OF TENDON SEGMENT
	CALL INTFILL('TGRP',NEFT ,3 ,IEGT,0) !
	CALL INTFILL('TGRP',NNMT ,4 ,IEGT,0) !
	CALL INTFILL('TGRP',NNFT ,5 ,IEGT,0) !
	CALL INTFILL('TGRP',LINK ,6 ,IEGT,0) !
	CALL INTFILL('TGRP',ITDYP,7 ,IEGT,0) !ITDYP = TENDON OPTION (0=ON NODE, OTHERWISE=ON ELEM SEPECIFY BY ITDYP)	
C	GROUP FILE	
	CALL INTFILL('TGRF',N3   ,3 ,IEGT,0) !
	CALL INTFILL('TGRF',N4   ,4 ,IEGT,0) !
	CALL INTFILL('TGRF',N6   ,6 ,IEGT,0) !

	CALL INTFILL('TGRF',NDX3 ,13,IEGT,0) !
	CALL INTFILL('TGRF',NDX4 ,14,IEGT,0) !
	CALL INTFILL('TGRF',NDX6 ,16,IEGT,0) !
	
C	----------------------------------------
	ALLOCATE(AF3(N3),AF4(N4),AF6(N6),BBX(1,NEFT),AKG(NEFT,NEFT))

	NPM(1) = N3
	NPI(1) = N3
	CALL CALLREAL(AF3,AAX,NDX3,NPM,NPI,1,'READ')  !CALLING TENDON DATA
	AREA  = AF3(1)		!AREA
	MATN  = INT(AF3(2))	!MAT No.
	IXIST = INT(AF3(5))   !EXISTING FLAG

	IF (IXIST.EQ. 0) GOTO 300 ! NEVER EXISTED & CURRENTLY REMOVED
	
	NPM(1:2) = [N4,MSEG]
	NPI(1:2) = [N4,ISEG]
	CALL CALLREAL(AF4,AAX,NDX4,NPM,NPI,2,'READ')
	TELN	= AF4(13) !SEGMENT LENGTH
	
	NPM(1:2) = [N6,MSEG]
	NPI(1:2) = [N6,ISEG]
	CALL CALLREAL(AF6,AAX,NDX6,NPM,NPI,2,'READ') 
	FORC	= AF6(1)
	FORN	= AF6(2)
	FINI	= AF6(3)
	MCODEP= AF6(4)
	EMODP	= AF6(5)
	EP   	= AF6(6)  !JACKING STRAIN
	EMP	= AF6(7)  !TOTAL MECHA STRAIN
	ENP	= AF6(8)  !TOTAL NON-MECHA STRAIN
	RLXP	= AF6(9)  !TOTAL RELAXATION FORCE

	N6_R = 20 + 1       !POINTER OF RIGIDITY
	N6_S = 20 + 2       !POINTER OF MECHANICAL STRESS
	N6_N = 20 + 3       !POINTER OF NON-MECHANICAL STRESS
	N6_B = 20 + 10 + 1  !POINTER OF B-MATRIX

C     B-MATRIX
	BBX(1,1:NEFT) = AF6(N6_B:N6_B+NEFT-1)
	
C	---------------------------
	IF(LSTF.GT.0) THEN
	RIGD = AF6(N6_R) !RIGIDITY
	AKG  = RIGD*MATMUL(TRANSPOSE(BBX),BBX)
	ENDIF
	
	IF(LFOC.GT.0) THEN
	SELECTCASE(LFOC)

	CASE(1)
	FOR = AF6(N6_N)  !NON-MECHA
	FOR = 0.0D0  !RELAX LOSS WITH NOT MAKE ANY STRAIN, STRESS IS CORRECT WITH TOTAL FORCE INSTEAD OF PRDUCE STRAIN

	CASE(2)
	FOR = AF6(N6_S)  !MECHA

	ENDSELECT
	ENDIF
C	---------------------------
	K = 0
	DO I = 1,NEFT
	IF(LFOC.GT.0) RE(I) = RE(I) + TELN*FOR*BBX(1,I)
	DO J = I,NEFT
	K = K + 1
	IF(LSTF.GT.0)  S(K) = S(K)  !+ AREA*TELN*AKG(I,J)
	ENDDO
	ENDDO


300	CONTINUE


	DEALLOCATE(AF3,AF4,AF6,BBX,AKG)


	RETURN

	END



C	=======================================================================
C	=== CONSTRUCTION ANALYSIS =============== SONGSAK NOV2007 =============
C	=======================================================================

	SUBROUTINE TEDPRIM(ND1,ND2,FOC)
	IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER*4 (I-N)

	COMMON /TENDONC/ NEGT  !NUMBER OF TENDON GROUP
	
	DIMENSION NPM(10),NPI(10),FOC(1)

	ALLOCATABLE IF1(:),AF3(:),AF4(:),AF6(:),BBX(:),BBXN(:)
	ALLOCATABLE IAX(:),AAX(:)


      DO 8000 IEGT = 1,NEGT
      
C	----------------------------------------
C	GROUP DATA
C	----------------------------------------
	CALL INTFILL('TGRP',NTEND,1 ,IEGT,0) !
	CALL INTFILL('TGRP',MSEG ,2 ,IEGT,0) !MAX NUM OF TENDON SEGMENT
	CALL INTFILL('TGRP',NEFT ,3 ,IEGT,0) !
	CALL INTFILL('TGRP',NNMT ,4 ,IEGT,0) !
	CALL INTFILL('TGRP',NNFT ,5 ,IEGT,0) !
	CALL INTFILL('TGRP',LINK ,6 ,IEGT,0) !
	CALL INTFILL('TGRP',ITDYP,7 ,IEGT,0) !ITDYP = TENDON OPTION (0=ON NODE, OTHERWISE=ON ELEM SEPECIFY BY ITDYP)	
C	GROUP FILE	
	CALL INTFILL('TGRF',N1   ,1 ,IEGT,0) !
	CALL INTFILL('TGRF',N3   ,3 ,IEGT,0) !
	CALL INTFILL('TGRF',N4   ,4 ,IEGT,0) !
	CALL INTFILL('TGRF',N6   ,6 ,IEGT,0) !

	CALL INTFILL('TGRF',NDX1 ,11,IEGT,0) !
	CALL INTFILL('TGRF',NDX3 ,13,IEGT,0) !
	CALL INTFILL('TGRF',NDX4 ,14,IEGT,0) !
	CALL INTFILL('TGRF',NDX6 ,16,IEGT,0) !
	
	CALL INTFILL('TGRF',NFLI ,21,IEGT,0) !
	CALL INTFILL('TGRF',NFLR ,22,IEGT,0) !
	
	CALL INTFILL('TGRF',LASI ,23,IEGT,0) !
	CALL INTFILL('TGRF',LASR ,24,IEGT,0) !
C	----------------------------------------
      SELECTCASE(ITDYP)
      CASE(0) !NODAL TENDON
        GOTO 100
      CASE(5) !FRAME TENDON
        GOTO 100
      CASE(9,10) !SHELL SOLID TENDON
        GOTO 8000
      ENDSELECT  
100   CONTINUE      
C	----------------------------------------
      
	ALLOCATE(IF1(N1),AF3(N3),AF4(N4),AF6(N6),BBX(NEFT),BBXN(NEFT))

	ALLOCATE(IAX(LASI),AAX(LASR))


	DO 80 ITEND = 1,NTEND

      READ(NFLI,REC=NTEND+ITEND,ERR=5) IXIST !READ EXISTING FLAG TO LAST RECORD OF ELEMENT INTEGER DATA (INCREASE THE SPEED PURPOSE)
      GOTO 6
5     IXIST = 0
6     IF(IXIST.LE.0) GOTO 80

      READ(NFLI,REC=ITEND) IAX
      READ(NFLR,REC=ITEND) AAX
      
	NPM(1) = N3
	NPI(1) = N3
	CALL CALLREAL(AF3,AAX,NDX3,NPM,NPI,1,'READ')
	AREA  = AF3(1)	
	IXIST = INT(AF3(5))   !EXISTING FLAG
	NSEG  = INT(AF3(4))	!Number of tendon segment
	
	IF (IXIST.EQ. 0) GOTO 80 ! NEVER EXISTED & CURRENTLY REMOVED


      DO 60 ISEG=1,NSEG

	NPM(1:2) = [N1,MSEG]
	NPI(1:2) = [N1,ISEG]
	CALL CALLINTG(IF1,IAX,NDX1,NPM,NPI,2,'READ')

	NPM(1:2) = [N4,MSEG]
	NPI(1:2) = [N4,ISEG]
	CALL CALLREAL(AF4,AAX,NDX4,NPM,NPI,2,'READ')
	TELN	= AF4(13) !SEGMENT LENGTH
	
	NPM(1:2) = [N6,MSEG]
	NPI(1:2) = [N6,ISEG]
	CALL CALLREAL(AF6,AAX,NDX6,NPM,NPI,2,'READ')  !CALLING SEGMENT WORKING ARRAY
	FORC	= AF6(1)
	N6_B = 20 + 10 + 1  !POINTER OF B-MATRIX
	BBX(1:NEFT) = AF6(N6_B:N6_B+NEFT-1)*FORC*TELN  !CALLING BMATRIX*FORC*ELN  (EQUIVALENT NODAL FORCE)

C     SPACIALY FOR FRAME TENDON
      IF(ITDYP.EQ.5) THEN
        CALL TEDPRIMFRAME(FOC,IF1,AF4,BBX,ND1,ND2,FORC,NEFT,NNFT,NNMT,IGOTO)
        SELECTCASE(IGOTO)
            CASE(45)
                GOTO 45
            CASE(60)
                GOTO 60
        ENDSELECT
      ENDIF

45    DO 50 IPIR=1,NNMT/2

	NT1 = IF1(2*IPIR-1)
	NT2 = IF1(2*IPIR-0)
	NNFT2 = 2*NNFT
	NNMM  = NNFT2*(IPIR-1)
	BBXN(1:NNFT2) = BBX(1+NNMM:NNFT2+NNMM)
	
	ITEST = 0	  
	IF(ND1.EQ.NT1.AND.ND2.EQ.NT2) ITEST = 1 
      IF(ND2.EQ.NT1.AND.ND1.EQ.NT2) ITEST = 2 
	IF(ITEST.LE.0) GOTO 50
C     --------------------------
	    IF(ITEST.EQ.1) THEN
	        DO II = 1,6
	          FOC(II) = FOC(II) + BBXN(II)
	        ENDDO
	        DO II = 1,6
	          JJ = II + 6
	          KK = II + NNFT
	          FOC(JJ) = FOC(JJ) + BBXN(KK)
	        ENDDO
	    ENDIF    
	    IF(ITEST.EQ.2) THEN
	        DO II = 1,6
	          JJ = II + 6
	          FOC(JJ) = FOC(JJ) + BBXN(II)
	        ENDDO
	        DO II = 1,6
	          KK = II + NNFT
	          FOC(II) = FOC(II) + BBXN(KK)
	        ENDDO
	    ENDIF
C     --------------------------
      
50    CONTINUE


60	CONTINUE

C      WRITE(NFLI,REC=ITEND) IAX
C      WRITE(NFLR,REC=ITEND) AAX
      
80	CONTINUE
C

	DEALLOCATE(IAX,AAX)
	DEALLOCATE(IF1,AF3,AF4,AF6,BBX,BBXN)
	
8000  CONTINUE


      RETURN

      END


C	=======================================================================
C	=== CONSTRUCTION ANALYSIS =============== SONGSAK NOV2007 =============
C	=======================================================================

	SUBROUTINE TEDOUT
	IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER*4 (I-N)

	COMMON /TENDONC/ NEGT  !NUMBER OF TENDON GROUP
	
	DIMENSION NPM(10),NPI(10)

	ALLOCATABLE AF3(:),AF4(:),AF6(:),BBX(:)
	ALLOCATABLE IAX(:),AAX(:)

	CALL INTFILL('%IOL',NOT,1,3,0)  !OUTPUT.OUT


      DO 8000 IEGT = 1,NEGT
      
C	----------------------------------------
C	GROUP DATA
C	----------------------------------------
	CALL INTFILL('TGRP',NTEND,1 ,IEGT,0) !
	CALL INTFILL('TGRP',MSEG ,2 ,IEGT,0) !MAX NUM OF TENDON SEGMENT
	CALL INTFILL('TGRP',NEFT ,3 ,IEGT,0) !
	CALL INTFILL('TGRP',NNMT ,4 ,IEGT,0) !
	CALL INTFILL('TGRP',NNFT ,5 ,IEGT,0) !
	CALL INTFILL('TGRP',LINK ,6 ,IEGT,0) !
	CALL INTFILL('TGRP',ITDYP,7 ,IEGT,0) !ITDYP = TENDON OPTION (0=ON NODE, OTHERWISE=ON ELEM SEPECIFY BY ITDYP)	
C	GROUP FILE	
	CALL INTFILL('TGRF',N3   ,3 ,IEGT,0) !
	CALL INTFILL('TGRF',N4   ,4 ,IEGT,0) !
	CALL INTFILL('TGRF',N6   ,6 ,IEGT,0) !

	CALL INTFILL('TGRF',NDX3 ,13,IEGT,0) !
	CALL INTFILL('TGRF',NDX4 ,14,IEGT,0) !
	CALL INTFILL('TGRF',NDX6 ,16,IEGT,0) !
	
	CALL INTFILL('TGRF',NFLI ,21,IEGT,0) !
	CALL INTFILL('TGRF',NFLR ,22,IEGT,0) !
	
	CALL INTFILL('TGRF',LASI ,23,IEGT,0) !
	CALL INTFILL('TGRF',LASR ,24,IEGT,0) ! 
C	----------------------------------------
	ALLOCATE(AF3(N3),AF4(N4),AF6(N6),BBX(NEFT))
	ALLOCATE(IAX(LASI),AAX(LASR))


	DO 80 ITEND = 1,NTEND
	
      READ(NFLI,REC=NTEND+ITEND,ERR=5) IXIST !READ EXISTING FLAG TO LAST RECORD OF ELEMENT INTEGER DATA (INCREASE THE SPEED PURPOSE)
      GOTO 6
5     IXIST = 0
6     IF(IXIST.LE.0) GOTO 80

      READ(NFLI,REC=ITEND) IAX
      READ(NFLR,REC=ITEND) AAX
      
	NPM(1) = N3
	NPI(1) = N3
	CALL CALLREAL(AF3,AAX,NDX3,NPM,NPI,1,'READ')
	AREA = AF3(1)	
	IXIST = INT(AF3(5)) !EXISTING FLAG
	NSEG  = INT(AF3(4))	!Number of tendon segment
	
	IF (IXIST.EQ. 0) GOTO 80 ! NEVER EXISTED & CURRENTLY REMOVED


	WRITE(NOT,2000) 
      DO 70 ISEG = 1,NSEG

	NPM(1:2) = [N6,MSEG]
	NPI(1:2) = [N6,ISEG]
	CALL CALLREAL(AF6,AAX,NDX6,NPM,NPI,2,'READ') !CALLING SEGMENT WORKING ARRAY
	FORC	= AF6(1)
	FORN	= AF6(2)
	FINI	= AF6(3)
	MCODEP= AF6(4)
	EMODP	= AF6(5)
	EP   	= AF6(6)  !JACKING STRAIN
	EMP	= AF6(7)  !TOTAL MECHA STRAIN
	ENP	= AF6(8)  !TOTAL NON-MECHA STRAIN
	RLXP	= AF6(9)  !TOTAL RELAXATION FORCE

	SIGA = FORC/AREA
	FLOS = 0.0D0
	IF(FINI.NE.0.0D0) THEN
	RLOS=(RLXP)/FINI*100.0D0
	FLOS=(FINI-FORC)/FINI*100.0D0
	ENDIF
	WRITE(NOT,2002) IEGT,ITEND,ISEG,MCODEP,FORC,SIGA,EMP,RLOS,FLOS
70	CONTINUE


	WRITE(NOT,1900) 
      DO 60 ISEG=1,NSEG

	NPM(1:2) = [N4,MSEG]
	NPI(1:2) = [N4,ISEG]
	CALL CALLREAL(AF4,AAX,NDX4,NPM,NPI,2,'READ')
	TELN	= AF4(13) !SEGMENT LENGTH
	
	NPM(1:2) = [N6,MSEG]
	NPI(1:2) = [N6,ISEG]
	CALL CALLREAL(AF6,AAX,NDX6,NPM,NPI,2,'READ') !CALLING SEGMENT WORKING ARRAY
	FORC	= AF6(1)
      N6_B = 20 + 10 + 1  !POINTER OF B-MATRIX
	BBX(1:NEFT) = AF6(N6_B:N6_B+NEFT-1)*FORC*TELN  !CALLING BMATRIX*FORC*ELN  (EQUIVALENT NODAL FORCE)

	WRITE(NOT,1901) IEGT,ITEND,ISEG,BBX(1:6)
	WRITE(NOT,1902)          -1.0D0*BBX(7:12)

60	CONTINUE

C      WRITE(NFLI,REC=ITEND) IAX
C      WRITE(NFLR,REC=ITEND) AAX
80	CONTINUE
C
	DEALLOCATE(IAX,AAX)
	DEALLOCATE(AF3,AF4,AF6,BBX)

8000  CONTINUE


      RETURN

1900	FORMAT(/9X,'GROUP  TDN    SEG',
	1		 13X,'FX',10X,'FY',10X,'FZ',10X,'MX',10X,'MY',10X,'MZ',/)

1901	FORMAT(6X,I5,2X,I5,2X,I5,8X,1P6E12.3)
1902	FORMAT(6X,5X,2X,5X,2X,5X,8X,1P6E12.3)


2000	FORMAT(//1x,'TENDON DATA OUTPUT',
     1       / 1x,38('-')//3x,'GRP   TDN     SEG  MAT',
     2        /4x,'NO      NO  CODE        ',
     3            'FORCE      STRESS      STRAIN     RELAX-LOSS(%)',
	4		 4X,'TOTAL-LOSS(%) '/)

2002	FORMAT(1X,I5,2X,I5,2I5,8X,1P4E12.3,5X,1P1E12.3)

      END


C	=======================================================================
C	=== CONSTRUCTION ANALYSIS =============== SONGSAK NOV2007 =============
C	=======================================================================

      SUBROUTINE TDNEQNR(MHT,IEMQ,IEMR)
	IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER*4 (I-N)

	COMMON /TENDONC/ NEGT  !NUMBER OF TENDON GROUP
	
      DIMENSION MHT(1)
      DIMENSION IEMQ(1),IEMR(1),NPM(10),NPI(10)
	ALLOCATABLE IF2(:),AF3(:),LEQN(:)
	ALLOCATABLE IAX(:),AAX(:)


C	-----------------------------------------
C	LOOP OVER GROUP
C	-----------------------------------------

      DO 8000 IEGT = 1,NEGT
      
C	----------------------------------------
C	GROUP DATA
C	----------------------------------------
	CALL INTFILL('TGRP',NTEND,1 ,IEGT,0) !
	CALL INTFILL('TGRP',MSEG ,2 ,IEGT,0) !MAX NUM OF TENDON SEGMENT
	CALL INTFILL('TGRP',NEFT ,3 ,IEGT,0) !
	CALL INTFILL('TGRP',NNMT ,4 ,IEGT,0) !
	CALL INTFILL('TGRP',NNFT ,5 ,IEGT,0) !
	CALL INTFILL('TGRP',LINK ,6 ,IEGT,0) !
	CALL INTFILL('TGRP',ITDYP,7 ,IEGT,0) !ITDYP = TENDON OPTION (0=ON NODE, OTHERWISE=ON ELEM SEPECIFY BY ITDYP)	
C	GROUP FILE	
	CALL INTFILL('TGRF',N2   ,2 ,IEGT,0) !
	CALL INTFILL('TGRF',N3   ,3 ,IEGT,0) !

	CALL INTFILL('TGRF',NDX2 ,12,IEGT,0) !
	CALL INTFILL('TGRF',NDX3 ,13,IEGT,0) !
	
	CALL INTFILL('TGRF',NFLI ,21,IEGT,0) !
	CALL INTFILL('TGRF',NFLR ,22,IEGT,0) !
	
	CALL INTFILL('TGRF',LASI ,23,IEGT,0) !
	CALL INTFILL('TGRF',LASR ,24,IEGT,0) ! 
	
C	-----------------------------------------

	ALLOCATE(IF2(N2),AF3(N3),LEQN(NEFT))
	ALLOCATE(IAX(LASI),AAX(LASR))
	
C	-----------------------------------------
C	LOOP OVER TENDON ELEMENT
C	-----------------------------------------
	DO 1600 ITEND = 1,NTEND

      READ(NFLI,REC=NTEND+ITEND,ERR=5) IXIST !READ EXISTING FLAG TO LAST RECORD OF ELEMENT INTEGER DATA (INCREASE THE SPEED PURPOSE)
      GOTO 6
5     IXIST = 0
6     IF(IXIST.LE.0) GOTO 1600

      READ(NFLI,REC=ITEND) IAX
      READ(NFLR,REC=ITEND) AAX

	NPM(1) = N3
	NPI(1) = N3
	CALL CALLINTG(AF3,AAX,NDX3,NPM,NPI,1,'READ')
	IXIST = INT(AF3(5))  !EXISTING FLAG 
	NSEG  = INT(AF3(4))  !Number of tendon segment
	IF (IXIST.EQ. 0) GOTO 1600 !ELEMENT HAS NEVER EXISTED & CURRENTLY REMOVED

C	-----------------------------------------
C	LOOP OVER TENDON SEGMENT
C	-----------------------------------------
	DO 1500 ISEG = 1,NSEG

	NPM(1:2) = [N2,MSEG]
	NPI(1:2) = [N2,ISEG]
	CALL CALLINTG(IF2,IAX,NDX2,NPM,NPI,2,'READ')              !INTEGER DATA

C	-----------------------------------------
C	LOOP OVER ELEMENT DOF
C	-----------------------------------------
	LEQN(1:NEFT) = 0
	DO 1000 IEFT = 1,NEFT
	NUQ = IEFT + NEFT                    !UPDATE EQUATION NUMBER
	NUR = IEFT + NEFT + NEFT             !UPDATE REACTION NUMBER
	J = IF2(IEFT)
	IF2(NUQ)  = 0
	IF2(NUR)  = 0
	IF(J.GT.0) THEN
	IF2(NUQ)   = IEMQ(J)
	IF2(NUR)   = IEMR(J)
	LEQN(IEFT) = IEMQ(J)   !TO CALCULATE COLUMN HEIGHT
	ENDIF

C	-----------------------------------------
1000	CONTINUE
C	-----------------------------------------

	NPM(1:2) = [N2,MSEG]
	NPI(1:2) = [N2,ISEG]
	CALL CALLINTG(IF2,IAX,NDX2,NPM,NPI,2,'WRIT')              !INTEGER DATA

C     ------------------------------------
C     UPDATE COLUMN HEIGHTS [MHT]
C     ------------------------------------
      MEQ = 0
      DO 390  IEFT=1,NEFT
      IEQ = LEQN(IEFT)
      IF (IEQ)     310,390,310
310   IF (MEQ.EQ.0) MEQ = IEQ
      IF (MEQ-IEQ) 320,390,390
320	MEQ = IEQ
390	CONTINUE

      DO 400  IEFT=1,NEFT
      IEQ = LEQN(IEFT)
      IF (IEQ.EQ.0) GOTO 400
      KHT = MEQ-IEQ
      IF (KHT.GT.MHT(IEQ)) MHT(IEQ) = KHT
400	CONTINUE

C	-----------------------------------------
1500	CONTINUE
C	-----------------------------------------

      WRITE(NFLI,REC=ITEND) IAX
      WRITE(NFLR,REC=ITEND) AAX
C	-----------------------------------------
1600	CONTINUE
C	-----------------------------------------

	DEALLOCATE(IAX,AAX)
	DEALLOCATE(IF2,AF3,LEQN)
	
8000  CONTINUE


	RETURN
	END


C	=======================================================================
C	=== CONSTRUCTION ANALYSIS =============== SONGSAK NOV2007 =============
C	=======================================================================

	SUBROUTINE CSALCTD(ILC)
	IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER*4 (I-N)
	CHARACTER*200 NAME

	COMMON /TENDONC/ NEGT  !NUMBER OF TENDON GROUP
	
	DIMENSION NPM(10),NPI(10)


	ALLOCATABLE AF3(:),AF4(:),AF6(:)
	ALLOCATABLE IAX(:),AAX(:)

	NOT = 103  !TEDOUT.FLAVIA.RES


C	-----------------------------------------
C	LOOP OVER GROUP
C	-----------------------------------------

      DO 8000 IEGT = 1,NEGT
      
C	----------------------------------------
C	GROUP DATA
C	----------------------------------------
	CALL INTFILL('TGRP',NTEND,1 ,IEGT,0) !
	CALL INTFILL('TGRP',MSEG ,2 ,IEGT,0) !MAX NUM OF TENDON SEGMENT
	CALL INTFILL('TGRP',NEFT ,3 ,IEGT,0) !
	CALL INTFILL('TGRP',NNMT ,4 ,IEGT,0) !
	CALL INTFILL('TGRP',NNFT ,5 ,IEGT,0) !
	CALL INTFILL('TGRP',LINK ,6 ,IEGT,0) !
	CALL INTFILL('TGRP',ITDYP,7 ,IEGT,0) !ITDYP = TENDON OPTION (0=ON NODE, OTHERWISE=ON ELEM SEPECIFY BY ITDYP)	
C	GROUP FILE	
	CALL INTFILL('TGRF',N3   ,3 ,IEGT,0) !
	CALL INTFILL('TGRF',N4   ,4 ,IEGT,0) !
	CALL INTFILL('TGRF',N6   ,6 ,IEGT,0) !

	CALL INTFILL('TGRF',NDX3 ,13,IEGT,0) !
	CALL INTFILL('TGRF',NDX4 ,14,IEGT,0) !
	CALL INTFILL('TGRF',NDX6 ,16,IEGT,0) !
	
	CALL INTFILL('TGRF',NFLI ,21,IEGT,0) !
	CALL INTFILL('TGRF',NFLR ,22,IEGT,0) !
	
	CALL INTFILL('TGRF',LASI ,23,IEGT,0) !
	CALL INTFILL('TGRF',LASR ,24,IEGT,0) ! 
	
C	-----------------------------------------
	ALLOCATE(AF3(N3),AF4(N4),AF6(N6))
	ALLOCATE(IAX(LASI),AAX(LASR))

	ISTEP = ILC
	INM = 0  !(0=STANDARD 1=COMBINATION)
	IND = 0  !(0=PRINT ALL 1=JUST ONE STEP)
	CALL PRNLCHD(NAME,NAML,ISTEP,INM,IND)

	WRITE(NOT,2000) NAME(1:NAML)

	DO 80 ITEND = 1,NTEND
	
      READ(NFLI,REC=NTEND+ITEND,ERR=5) IXIST !READ EXISTING FLAG TO LAST RECORD OF ELEMENT INTEGER DATA (INCREASE THE SPEED PURPOSE)
      GOTO 6
5     IXIST = 0
6     IF(IXIST.LE.0) GOTO 80

      READ(NFLI,REC=ITEND) IAX
      READ(NFLR,REC=ITEND) AAX
      
	NPM(1) = N3
	NPI(1) = N3
	CALL CALLREAL(AF3,AAX,NDX3,NPM,NPI,1,'READ')  
	AREA = AF3(1)	
	NSEG  = INT(AF3(4))	!Number of tendon segment
	IXIST = INT(AF3(5)) !EXISTING FLAG
	
	IF (IXIST.EQ. 0) GOTO 80 ! NEVER EXISTED & CURRENTLY REMOVED

	TOLEN = 0.0D0
      DO 70 ISEG = 1,NSEG

	NPM(1:2) = [N4,MSEG]
	NPI(1:2) = [N4,ISEG]
	CALL CALLREAL(AF4,AAX,NDX4,NPM,NPI,2,'READ') 
	TELN	= AF4(13) !SEGMENT LENGTH
	
	NPM(1:2) = [N6,MSEG]
	NPI(1:2) = [N6,ISEG]
	CALL CALLREAL(AF6,AAX,NDX6,NPM,NPI,2,'READ')  !CALLING SEGMENT WORKING ARRAY
	FORC	= AF6(1)
	FORN	= AF6(2)
	FINI	= AF6(3)
	MCODEP= AF6(4)
	EMODP	= AF6(5)
	EP   	= AF6(6)  !JACKING STRAIN
	EMP	= AF6(7)  !TOTAL MECHA STRAIN
	ENP	= AF6(8)  !TOTAL NON-MECHA STRAIN
	RLXP	= AF6(9)  !TOTAL RELAXATION FORCE

	SIGA = FORC/AREA
	FLOS = 0.0D0
	IF(FINI.NE.0.0D0) THEN
	RLOS=(RLXP)/FINI*100.0D0
	FLOS=(FINI-FORC)/FINI*100.0D0
	ENDIF

	TOLEN = TOLEN + TELN
	TLN   = TOLEN - 0.5*TELN

	CALL PRNTHD(NAME,NAML,ITEND,IEGT)

	IF(ISEG.EQ.1) THEN
	WRITE(NOT,2001) NAME(1:NAML),TLN,FORC,SIGA,FLOS
	ELSE
	WRITE(NOT,2002)              TLN,FORC,SIGA,FLOS
	ENDIF

70	CONTINUE

C      WRITE(NFLI,REC=ITEND) IAX
C      WRITE(NFLR,REC=ITEND) AAX
      
80	CONTINUE
C
	WRITE(NOT,2003)

	DEALLOCATE(IAX,AAX)
	DEALLOCATE(AF3,AF4,AF6)

8000  CONTINUE


      RETURN



2000	FORMAT(/'Result "Tendon Output (Construction)"',2X,
	1	    '"',A,'"',
	1		2X,'1',2X/,
	2		'ComponentNames  "R Distance" "Force" "Stress" "Loss %"'/,
	3		'Values')

2001	FORMAT(1X,'{',A,'}',2X,10E16.5)
2002	FORMAT(1X,5X,2X,10E16.5)
2003	FORMAT('End Values'/)

      END


C	=======================================================================
C	=== CONSTRUCTION ANALYSIS =============== SONGSAK NOV2007 =============
C	=======================================================================
      SUBROUTINE TENFJAK
	IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER*4 (I-N)
	CHARACTER*200 TNAME
      
	COMMON /TENDONC/ NEGT  !NUMBER OF TENDON GROUP
	
C     FRAME TENDON OPERATION
	DIMENSION NPM(10),NPI(10),FOR(2),SLP(2),STJ(2),STR(2)
	ALLOCATABLE IF1(:),IF2(:),AF3(:),AF6(:),AF7(:)
	ALLOCATABLE IAX(:),AAX(:)


C	LTENC TENDON COMMAND
C		  = 0 REMOVE
C		  = 1 JACKING
C		  = 2 RESTRESS


C	READ COMMAND
C	CALL FREBUF
C	CALL FREECH

      IOP = 0
      CALL FREINT('O',IO ,1)  !OPERATION FLAG
		
      FOR(1:2) = 0.0D0 
      CALL FREREL('F',FOR,2)  !FORCE VALUE

      STJ(1:2) = 0.0D0 
      CALL FREREL('S',STJ,2)  !STRESS VALUE

      STR(1:2) = 0.0D0 
      CALL FREREL('R',STR,2)  !STRESS RATIO VALUE

      SLP(1:2) = 0.0D0 
      CALL FREREL('D',SLP,2)  !SLIP VALUE

	KPOS = 0  !0 = POST  1 = PRE
      CALL FREINT('K',KPOS,1)  !POST OR PRE


	CALL INTFILL('%IOL',ITI,1,1,0)  !DATIN.DAT FILE
      READ(ITI,'(A200)') TNAME !READ TENDON NAME
      

	CALL RELFILL('%EAY',TODAY,1,2,0)   !CURRENT DAY

      TDAY = TODAY
      IF(KPOS.EQ.1) CALL FREREL('T',TDAY,1)  !TENSIONING DAY MAY DIFFERENT FROM INSTALLATION DAY (ONLY FOR PRETENSION)
	IF(TDAY.LT.0.0) TDAY = TODAY

      ITEND = 0
      DO IEGT = 1,NEGT
	  CALL INTFILL('TGRP',NTEND,1 ,IEGT,0) !
        DO KTEND = 1,NTEND	
            CALL CHECKTDNAME(TNAME,KTEND,IEGT,ITFOUND)
            IF(ITFOUND.EQ.1) THEN
                ITEND = KTEND
                GOTO 40
            ENDIF
        ENDDO
      ENDDO
      RETURN
40    CONTINUE
C	----------------------------------------
C	GROUP DATA
C	----------------------------------------
	CALL INTFILL('TGRP',NTEND,1 ,IEGT,0) !
	CALL INTFILL('TGRP',MSEG ,2 ,IEGT,0) !MAX NUM OF TENDON SEGMENT
	CALL INTFILL('TGRP',NEFT ,3 ,IEGT,0) !
	CALL INTFILL('TGRP',NNMT ,4 ,IEGT,0) !
	CALL INTFILL('TGRP',NNFT ,5 ,IEGT,0) !
	CALL INTFILL('TGRP',LINK ,6 ,IEGT,0) !
	CALL INTFILL('TGRP',ITDYP,7 ,IEGT,0) !ITDYP = TENDON OPTION (0=ON NODE, OTHERWISE=ON ELEM SEPECIFY BY ITDYP)	
C	GROUP FILE	
	CALL INTFILL('TGRF',N1   ,1 ,IEGT,0) !
	CALL INTFILL('TGRF',N2   ,2 ,IEGT,0) !
	CALL INTFILL('TGRF',N3   ,3 ,IEGT,0) !
	CALL INTFILL('TGRF',N6   ,6 ,IEGT,0) !
	CALL INTFILL('TGRF',N7   ,7 ,IEGT,0) !

	CALL INTFILL('TGRF',NDX1 ,11,IEGT,0) !
	CALL INTFILL('TGRF',NDX2 ,12,IEGT,0) !
	CALL INTFILL('TGRF',NDX3 ,13,IEGT,0) !
	CALL INTFILL('TGRF',NDX6 ,16,IEGT,0) !
	CALL INTFILL('TGRF',NDX7 ,17,IEGT,0) !
	
	CALL INTFILL('TGRF',NFLI ,21,IEGT,0) !
	CALL INTFILL('TGRF',NFLR ,22,IEGT,0) !
	
	CALL INTFILL('TGRF',LASI ,23,IEGT,0) !
	CALL INTFILL('TGRF',LASR ,24,IEGT,0) ! 

      
      IF(ITEND.LE.0) RETURN
      IF(ITEND.GT.NTEND) RETURN
C	----------------------------------------
	ALLOCATE(IF1(N1),IF2(N2),AF3(N3),AF6(N6),AF7(N7))

	ALLOCATE(IAX(LASI),AAX(LASR))

      READ(NFLI,REC=ITEND) IAX
      READ(NFLR,REC=ITEND) AAX

C	-------------------------------------------------
	SELECTCASE(IO)
C	-------------------------------------------------

	CASE(0)  !REMOVE
C	==============================================

	NPM(1) = N3
	NPI(1) = N3
	CALL CALLREAL(AF3,AAX,NDX3,NPM,NPI,1,'READ')  !CALLING TENDON DATA
	NNOD  = INT(AF3(3)) !number of tendon node
	NSEG  = INT(AF3(4)) !number of tendon segment
	IXIST = INT(AF3(5))

C	-----------------------------------------

C	SET ELEMENT EXISTENCE FLAG IXIST
C		= 0 element has never existed & currently removed
C		= 1 currently installed
	IF(IXIST.EQ. 0) GOTO 1000

C	UPDATE PART INFORMATION	
	AF3(5) = FLOAT(0)                !EXISTING FLAG
      AF3(6) = 0.0D0				   !CURRENT DAY
      AF3(7) = 0.0D0				   !TENSIONING DAY
      AF3(8) = FLOAT(0)		           !POST OR PRE
      AF3(9) = 0.0D0		  		   !JACKING 1
      AF3(10)= 0.0D0				   !JACKING 2
      AF3(11)= 0.0D0				   !SLIP 1
      AF3(12)= 0.0D0				   !SLIP 2
	
	DO 200 ISEG = 1,NSEG

C	------------------------------------
C	CLEAR WORKING ARRAY
	NPM(1:2) = [N6,MSEG]
	NPI(1:2) = [N6,ISEG]
	CALL CALLREAL(AF6,AAX,NDX6,NPM,NPI,2,'READ')  !CALLING WORKING ARRAY
		
      N6_B = 20 + 10 + 1   !B-MATRIX POINTER
      AF6(1:N6-1) = 0.0D0  !NO DELETE TENDON B-MATRIX

	NPM(1:2) = [N6,MSEG]
	NPI(1:2) = [N6,ISEG]
	CALL CALLREAL(AF6,AAX,NDX6,NPM,NPI,2,'WRIT')  !UPDATE WORKING ARRAY
C	------------------------------------

C	------------------------------------
C	CLEAR ELEMENT INITIAL DISPLACEMENTS	
	NPM(1:2) = [N7,MSEG]
	NPI(1:2) = [N7,ISEG]
	CALL CALLREAL(AF7,AAX,NDX7,NPM,NPI,2,'READ')  !CALLING ELEMENT ERECTED DISP.

	AF7(1:NEFT) = 0.0D0

	NPM(1:2) = [N7,MSEG]
	NPI(1:2) = [N7,ISEG]
	CALL CALLREAL(AF7,AAX,NDX7,NPM,NPI,2,'WRIT')  !BACKUP ELEMENT ERECTED DISP.
C	------------------------------------

200	CONTINUE

C	------------------------------------

	NPM(1) = N3
	NPI(1) = N3
	CALL CALLREAL(AF3,AAX,NDX3,NPM,NPI,1,'WRIT')  !UPDATE TENDON DATA
C	-----------------------------------------

1000	CONTINUE
      WRITE(NFLI,REC=NTEND+ITEND) INT(AF3(5)) !WRITE EXISTING FLAG TO LAST RECORD OF ELEMENT INTEGER DATA (INCREASE THE SPEED PURPOSE)
C	==============================================



	CASE(1) !INSTALL

C	==============================================

	NPM(1) = N3
	NPI(1) = N3
	CALL CALLREAL(AF3,AAX,NDX3,NPM,NPI,1,'READ')  !CALLING TENDON DATA
	AREA  = AF3(1)		!AREA
	MATN  = INT(AF3(2))
	NNOD  = INT(AF3(3))
	NSEG  = INT(AF3(4))
	IXIST = INT(AF3(5))

	CALL RELFILL('%CPS',FPY,1,MATN,0)     !FPY
C	-----------------------------------------

C	SET ELEMENT EXISTENCE FLAG IXIST
C		= 0 element has never existed & currently removed
C		= 1 currently installed
	IF(IXIST.GT.0) GOTO 2000

C	------------------------------------
C     CHECK FOR FLYING TENDON  (TENDON THAT JACKING ON NON-EXISTING NODE)
	DO ISEG = 1,NSEG
C	CALLING NODAL EXISTING FLAG
	NPM(1:2) = [N1,MSEG]
	NPI(1:2) = [N1,ISEG]
	CALL CALLINTG(IF1,IAX,NDX1,NPM,NPI,2,'READ')  !CALLING ELEMENT ORIGINAL EQUATION NUMBER
	    DO INMT = 1,NNMT
	      ISN = IF1(INMT)
	      CALL INTFILL('$NXF',NDXIST,1,ISN,0)  
	      IF(NDXIST.LE.0) THEN
	          WRITE(*,*) 'WARNING---TENDON IS JACKING ON NON-EXISTING NODE'
	          GOTO 2000
	      ENDIF
	    ENDDO    
	ENDDO
C	------------------------------------

	IF(STJ(1).NE.0.0D0) FOR(1) = STJ(1)*AREA
	IF(STJ(2).NE.0.0D0) FOR(2) = STJ(2)*AREA
	IF(STR(1).NE.0.0D0) FOR(1) = STR(1)*AREA*FPY
	IF(STR(2).NE.0.0D0) FOR(2) = STR(2)*AREA*FPY

C	UPDATE PART INFORMATION	
	AF3(5) = FLOAT(1)                 !EXISTING FLAG
      AF3(6) = TDAY				        !CURRENT DAY
      AF3(7) = TDAY				        !TENSIONING DAY
      AF3(8) = FLOAT(KPOS)		        !POST OR PRE
      AF3(9) = FOR(1)				    !JACKING 1
      AF3(10)= FOR(2)				    !JACKING 2
      AF3(11)= SLP(1)				    !SLIP 1
      AF3(12)= SLP(2)				    !SLIP 2
	

	DO 500 ISEG = 1,NSEG

	NPM(1:2) = [N2,MSEG]
	NPI(1:2) = [N2,ISEG]
	CALL CALLINTG(IF2,IAX,NDX2,NPM,NPI,2,'READ')  !CALLING ELEMENT ORIGINAL EQUATION NUMBER

	NPM(1:2) = [N7,MSEG]
	NPI(1:2) = [N7,ISEG]
	CALL CALLREAL(AF7,AAX,NDX7,NPM,NPI,2,'READ')  !CALLING ELEMENT ERECTED DISP.
		
C	ELEMENT INITIAL DISPLACEMENTS	
	DO IEFT = 1,NEFT
	IEQ  = IF2(IEFT)						         !IF2(1:NEF) = ELEMENT ORIGINAL EQAUATION
	CALL RELFILL('$XDS',AF7(IEFT),IEQ,1,0)         !TRANSFER ELEMENT ERECTED DISP. TO AF7(1:NEF)
	ENDDO

	NPM(1:2) = [N7,MSEG]
	NPI(1:2) = [N7,ISEG]
	CALL CALLREAL(AF7,AAX,NDX7,NPM,NPI,2,'WRIT')  !BACKUP ELEMENT ERECTED DISP.

C	------------------------------------
C	CLEAR WORKING ARRAY
	NPM(1:2) = [N6,MSEG]
	NPI(1:2) = [N6,ISEG]
	CALL CALLREAL(AF6,AAX,NDX6,NPM,NPI,2,'READ')  !CALLING WORKING ARRAY
		
      N6_B = 20 + 10 + 1   !B-MATRIX POINTER
      AF6(1:N6-1) = 0.0D0  !NO DELETE TENDON B-MATRIX

	NPM(1:2) = [N6,MSEG]
	NPI(1:2) = [N6,ISEG]
	CALL CALLREAL(AF6,AAX,NDX6,NPM,NPI,2,'WRIT')  !UPDATE WORKING ARRAY
C	------------------------------------

500	CONTINUE


	NPM(1) = N3
	NPI(1) = N3
	CALL CALLREAL(AF3,AAX,NDX3,NPM,NPI,1,'WRIT')  !UPDATE TENDON DATA
C	-----------------------------------------

C	INSTANTANEOUS LOSS (FRICTION WOBBLE AND SLIP LOSS)
	CALL TDNLOS (IEGT,ITEND,IAX,AAX)

C	==============================================

2000	CONTINUE
      WRITE(NFLI,REC=NTEND+ITEND) INT(AF3(5)) !WRITE EXISTING FLAG TO LAST RECORD OF ELEMENT INTEGER DATA (INCREASE THE SPEED PURPOSE)



	CASE(2) !RESTRESS


C	==============================================

	NPM(1) = N3
	NPI(1) = N3
	CALL CALLREAL(AF3,AAX,NDX3,NPM,NPI,1,'READ')  !CALLING TENDON DATA
	NNOD  = INT(AF3(3))
	NSEG  = INT(AF3(4))
	IXIST = INT(AF3(5))
C	-----------------------------------------

C	SET ELEMENT EXISTENCE FLAG IXIST
C		= 0 element has never existed & currently removed
C		= 1 currently installed
	IF(IXIST.EQ. 0) GOTO 6000

C	------------------------------------
C     CHECK FOR FLYING TENDON  (TENDON THAT JACKING ON NON-EXISTING NODE)
	IF(IXIST.EQ.0) THEN  !FOR NEWLY INSTALL
	DO ISEG = 1,NSEG
C	CALLING NODAL EXISTING FLAG
	NPM(1:2) = [N1,MSEG]
	NPI(1:2) = [N1,ISEG]
	CALL CALLINTG(IF1,IAX,NDX1,NPM,NPI,2,'READ')  !CALLING ELEMENT ORIGINAL EQUATION NUMBER
	    DO INMT = 1,NNMT
	      ISN = IF1(INMT)
	      CALL INTFILL('$NXF',NDXIST,1,ISN,0)  
	      IF(NDXIST.LE.0) THEN
	          WRITE(*,*) 'WARNING---TENDON IS JACKING ON NON-EXISTING NODE'
	          GOTO 6000
	      ENDIF
	    ENDDO    
	ENDDO
	ENDIF
C	------------------------------------

C	UPDATE PART INFORMATION	
	AF3(5) = FLOAT(1)                 !EXISTING FLAG
      AF3(6) = TODAY				    !CURRENT DAY
      AF3(7) = TODAY				    !TENSIONING DAY
      AF3(8) = FLOAT(KPOS)		        !POST OR PRE
      AF3(9) = FOR(1)				    !JACKING 1
      AF3(10)= FOR(2)				    !JACKING 2
      AF3(11)= SLP(1)				    !SLIP 1
      AF3(12)= SLP(2)				    !SLIP 2
	

	DO 700 ISEG = 1,NSEG

C	------------------------------------
C	ELEMENT INITIAL DISPLACEMENTS
	NPM(1:2) = [N2,MSEG]
	NPI(1:2) = [N2,ISEG]
	CALL CALLINTG(IF2,IAX,NDX2,NPM,NPI,2,'READ')  !CALLING ELEMENT ORIGINAL EQUATION NUMBER

	NPM(1:2) = [N7,MSEG]
	NPI(1:2) = [N7,ISEG]
	CALL CALLREAL(AF7,AAX,NDX7,NPM,NPI,2,'READ')  !CALLING ELEMENT ERECTED DISP.
	
	DO IEFT = 1,NEFT
	IEQ  = IF2(IEFT)						         !IF2(1:NEF) = ELEMENT ORIGINAL EQAUATION
	CALL RELFILL('$XDS',AF7(IEFT),IEQ,1,0)         !TRANSFER ELEMENT ERECTED DISP. TO AF7(1:NEF)
	ENDDO

	NPM(1:2) = [N7,MSEG]
	NPI(1:2) = [N7,ISEG]
	CALL CALLREAL(AF7,AAX,NDX7,NPM,NPI,2,'WRIT')  !BACKUP ELEMENT ERECTED DISP.

C	------------------------------------
C	CLEAR WORKING ARRAY
	NPM(1:2) = [N6,MSEG]
	NPI(1:2) = [N6,ISEG]
	CALL CALLREAL(AF6,AAX,NDX6,NPM,NPI,2,'READ')  !CALLING WORKING ARRAY
		
      N6_B = 20 + 10 + 1   !B-MATRIX POINTER
      AF6(1:N6-1) = 0.0D0  !NO DELETE TENDON B-MATRIX

	NPM(1:2) = [N6,MSEG]
	NPI(1:2) = [N6,ISEG]
	CALL CALLREAL(AF6,AAX,NDX6,NPM,NPI,2,'WRIT')  !UPDATE WORKING ARRAY
C	------------------------------------

700	CONTINUE


	NPM(1) = N3
	NPI(1) = N3
	CALL CALLREAL(AF3,AAX,NDX3,NPM,NPI,1,'WRIT')  !UPDATE TENDON DATA
C	-----------------------------------------

C	INSTANTANEOUS LOSS (FRICTION WOBBLE AND SLIP LOSS)
	CALL TDNLOS (IEGT,ITEND,IAX,AAX)
C	==============================================

6000	CONTINUE
      WRITE(NFLI,REC=NTEND+ITEND) INT(AF3(5)) !WRITE EXISTING FLAG TO LAST RECORD OF ELEMENT INTEGER DATA (INCREASE THE SPEED PURPOSE)

C	-------------------------------------------------
	ENDSELECT
C	-------------------------------------------------

      WRITE(NFLI,REC=ITEND) IAX
      WRITE(NFLR,REC=ITEND) AAX
      
	DEALLOCATE(IAX,AAX)

	DEALLOCATE(IF1,IF2,AF3,AF6,AF7)


	RETURN

	END



C	=======================================================================
C	=== CONSTRUCTION ANALYSIS =============== SONGSAK NOV2007 =============
C	=======================================================================

      FUNCTION CHNRLAX(TIM)
	IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER*4 (I-N)
C	--------------------------------------------------
C     EVALUATE TIME COEFFICIENT OF RELAXATION FOR CHINA JTG D62-2004 MODEL    -
C	--------------------------------------------------
C     TIM IN DAYS

      IF(TIM.LT.2.0) THEN
        CHNRLAX = 0.0+(TIM-0.0)*(0.5-0.0)/(2.0-0.0)
      ELSEIF(TIM.GE.2.0 .AND.TIM.LT.10.0) THEN
        CHNRLAX = 0.5+(TIM-2.0)*(0.61-0.5)/(10.0-2.0)
      ELSEIF(TIM.GE.10.0.AND.TIM.LT.20.0) THEN
        CHNRLAX = 0.61+(TIM-10.0)*(0.74-0.61)/(20.0-10.0)
      ELSEIF(TIM.GE.20.0.AND.TIM.LT.30.0) THEN
        CHNRLAX = 0.74+(TIM-20.0)*(0.87-0.74)/(30.0-20.0)
      ELSEIF(TIM.GE.30.0.AND.TIM.LT.40.0) THEN
        CHNRLAX = 0.87+(TIM-30.0)*(1.0-0.87)/(40.0-30.0)
      ELSEIF(TIM.GE.40.0) THEN
        CHNRLAX = 1.0
      ENDIF

      RETURN
      END
C	=======================================================================
C	=== CONSTRUCTION ANALYSIS =============== SONGSAK NOV2007 =============
C	=======================================================================
	SUBROUTINE TEDPRIMFRAME(FOC,IF1,AF4,BBX,ND1,ND2,FORC,NEFT,NNFT,NNMT,IGOTO)
	IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER*4 (I-N)

	DIMENSION IF1(1),AF4(1),FOC(1),BBX(NEFT),BBXN(NEFT),BBXT(NEFT),EDIST(NEFT)
	DIMENSION COORI(3,2),COORT(3,2),OFFI(3,2),VR(3),VE(3)

	CALL INTFILL('%NUB',NSC,1,4,0)

	ITEST = 0 ; JTEST = 0	  
      DO 40 IPIR=1,NNMT/2
	    NT1 = IF1(2*IPIR-1)
	    NT2 = IF1(2*IPIR-0)
	    IF(ND1.EQ.NT1.AND.ND2.EQ.NT2) THEN
	      JTEST = IPIR
	      GOTO 40
	    ENDIF
          IF(ND2.EQ.NT1.AND.ND1.EQ.NT2) THEN
	      JTEST = IPIR
	      GOTO 40
	    ENDIF
	    ITEST = 1
40    CONTINUE
      IF(ITEST.EQ.0) GOTO 45
      IF(JTEST.EQ.0) GOTO 60


C	  EXTRACT NODAL COORDINATE
      NT1 = IF1(2*JTEST-1)
      NT2 = IF1(2*JTEST-0)
      COORI(1:3,1:2) = 0.0D0
      DO ISC = 1,NSC
        CALL RELFILL('$XYZ',COORI(ISC,1),ISC,NT1,0)  !GETTING HERE NODAL COORDINATE
        CALL RELFILL('$XYZ',COORI(ISC,2),ISC,NT2,0)  !GETTING HERE NODAL COORDINATE
      ENDDO
      VE(1:3) = COORI(1:3,2) - COORI(1:3,1)
      CALL SCALEN(VE,VE,ELN,3)

      IF(JTEST.EQ.1) THEN
        COORT(1:3,1) = AF4(1:3) ; COORT(1:3,2) = AF4(4:6)	
      ENDIF 
      IF(JTEST.EQ.2) THEN
        COORT(1:3,2) = AF4(1:3) ; COORT(1:3,1) = AF4(4:6)	
      ENDIF     
      VR(1:3) = COORT(1:3,2) - COORT(1:3,1)
      CALL SCALEN(VR,VR,SELN,3)  !GET LENGTH OF SEGMENT HERE
      VRVE = VE(1)*VR(1)+VE(2)*VR(2)+VE(3)*VR(3)

      OFFI(1:3,1) = COORT(1:3,1) - COORI(1:3,1)
      OFFI(1:3,2) = COORT(1:3,1) - COORI(1:3,2)



      VRE1 = VE(1)*OFFI(1,1)+VE(2)*OFFI(2,1)+VE(3)*OFFI(3,1)
      VRE2 = VE(1)*OFFI(1,2)+VE(2)*OFFI(2,2)+VE(3)*OFFI(3,2)
      
      XI1 = -VRE1/VRVE
      XI2 = -VRE2/VRVE
      
      NNN = 1
      XXI = XI1
      IF(XXI.LT.0.0D0.OR.XXI.GT.SELN) THEN
      NNN = 2
      XXI = XI2
      ENDIF
      
      
      IF(XXI.LT.0.0D0.OR.XXI.GT.SELN) GOTO 60


      COORT(1:3,2) = COORT(1:3,1) + XXI*VR(1:3)
       OFFI(1:3,2) = COORT(1:3,2) - COORI(1:3,NNN)

      
      EDIST(1:NEFT) = 0.0D0 ; BBXT(1:NEFT) = 0.0D0
      CALL TDNBMAT(COORT,OFFI,EDIST,BBXT,SELN,'LIN')
      
      BBXN(1:NEFT) = 0.0D0
      BBXN(1+7*(NNN-1):6+7*(NNN-1)) = BBXT(7:12)*FORC*SELN


	NNFT2 = 2*NNFT
	IF(JTEST.EQ.1) THEN
	NNMM  = NNFT2*(2-1)
	BBX(1+NNMM:NNFT2+NNMM) = BBXN(1:NNFT2)
	ENDIF
	IF(JTEST.EQ.2) THEN
	NNMM  = NNFT2*(1-1)
	BBX(1+NNMM:NNFT2+NNMM) = BBXN(1:NNFT2)
	ENDIF
	
	
      DO IPIR=1,NNMT/2
      
	NNMM  = NNFT2*(IPIR-1)
	BBXN(1:NNFT2) = BBX(1+NNMM:NNFT2+NNMM)
	
	ITEST = 0	  
	IF(ND1.EQ.NT1.AND.ND2.EQ.NT2) ITEST = 1 
      IF(ND2.EQ.NT1.AND.ND1.EQ.NT2) ITEST = 2 
	IF(ITEST.LE.0) GOTO 60
C     --------------------------
	    IF(ITEST.EQ.1) THEN
	        DO II = 1,6
	          FOC(II) = FOC(II) + BBXN(II)
	        ENDDO
	        DO II = 1,6
	          JJ = II + 6
	          KK = II + NNFT
	          FOC(JJ) = FOC(JJ) + BBXN(KK)
	        ENDDO
	    ENDIF    
	    IF(ITEST.EQ.2) THEN
	        DO II = 1,6
	          JJ = II + 6
	          FOC(JJ) = FOC(JJ) + BBXN(II)
	        ENDDO
	        DO II = 1,6
	          KK = II + NNFT
	          FOC(II) = FOC(II) + BBXN(KK)
	        ENDDO
	    ENDIF
C     --------------------------
      ENDDO
         
      GOTO 60

45    CONTINUE
      IGOTO = 45
      RETURN
      
60    CONTINUE
      IGOTO = 60
      RETURN
      
      RETURN
      END
C	=======================================================================
C	=== CONSTRUCTION ANALYSIS =============== SONGSAK NOV2007 =============
C	=======================================================================


