C	=======================================================================
C	=== CONSTRUCTION ANALYSIS =============== SONGSAK NOV2007 =============
C	=======================================================================
      SUBROUTINE GRLCOM
	IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER*4 (I-N)

C	CALLING NEG
	CALL INTFILL('%NUB',NEG,1,5,0)


C	----------------------------------------
C	LOOP OVER ELEMENT GROUP 
C	----------------------------------------	
	DO 5000 IEG = 1,NEG


	CALL ELLCOM(IEG)

C	----------------------------------------
5000	CONTINUE
C	----------------------------------------



	RETURN
	END


C	=======================================================================
C	=== CONSTRUCTION ANALYSIS =============== SONGSAK NOV2007 =============
C	=======================================================================
      SUBROUTINE ELLCOM(IEG)
	IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER*4 (I-N)
C	ELEMENT FORCE AND STIFFNESS
	DIMENSION NPM(10),NPI(10),FOCT(12)
	ALLOCATABLE IF1(:),IF2(:),IF3(:),AF6(:),AF8(:),AF9(:)
	ALLOCATABLE COORD(:,:)
	ALLOCATABLE LMEQ(:),LREQ(:),RE(:),RL(:),SE(:),STLD(:),EXDI(:)

	ALLOCATABLE IAX(:),AAX(:)



      CALL INTFILL('@COM',LOPT,1,1,0)
	IF(LOPT.LE.0) RETURN

	NNN= LOPT - 1


      CALL LOCATN('-GSF',KGSF,NUM,NWK ,2) 
	CALL LOCATN('-LMA',KLMA,NUM,NEQ1,1)  


	CALL INTFILL('%NUB',NSN,1,1,0)
	CALL INTFILL('%NUB',NSF,1,2,0)
	CALL INTFILL('%NUB',NSC,1,4,0)


	CALL INTFILL('%GRP',ITYPE,1 ,IEG,0) !
	CALL INTFILL('%GRP',ISTYP,2 ,IEG,0) !
	CALL INTFILL('%GRP',NELE ,3 ,IEG,0) !
	CALL INTFILL('%GRP',NEF  ,7 ,IEG,0) !
	CALL INTFILL('%GRP',NNM  ,8 ,IEG,0) !
	
	CALL INTFILL('%GRF',N1   ,1 ,IEG,0) !
	CALL INTFILL('%GRF',N2   ,2 ,IEG,0) !
	CALL INTFILL('%GRF',N3   ,3 ,IEG,0) !
	CALL INTFILL('%GRF',N6   ,6 ,IEG,0) !
	CALL INTFILL('%GRF',N8   ,8 ,IEG,0) !
	CALL INTFILL('%GRF',N9   ,9 ,IEG,0) !

	CALL INTFILL('%GRF',NDX1 ,11,IEG,0) !
	CALL INTFILL('%GRF',NDX2 ,12,IEG,0) !
	CALL INTFILL('%GRF',NDX3 ,13,IEG,0) !
	CALL INTFILL('%GRF',NDX6 ,16,IEG,0) !
	CALL INTFILL('%GRF',NDX8 ,18,IEG,0) !
	CALL INTFILL('%GRF',NDX9 ,19,IEG,0) !

	CALL INTFILL('%GRF',NFLI ,21,IEG,0) !
	CALL INTFILL('%GRF',NFLR ,22,IEG,0) !
	
	CALL INTFILL('%GRF',LASI ,23,IEG,0) !
	CALL INTFILL('%GRF',LASR ,24,IEG,0) !

	NEK = (NEF*NEF+NEF)/2

	ALLOCATE(LMEQ(NEF),LREQ(NEF),RE(NEF),RL(NEF),SE(NEK))
	ALLOCATE(COORD(3,NNM))
	ALLOCATE(IF1(N1),IF2(N2),IF3(N3),AF6(N6),AF8(N8),AF9(N9))
	ALLOCATE(STLD(NEF),EXDI(NEF))
	ALLOCATE(IAX(LASI),AAX(LASR))

C	------------------------------------
C	LOOP OVER ELEMENT
C	------------------------------------
	DO 5000 IEL = 1,NELE

      READ(NFLI,REC=NELE+IEL,ERR=5) IXIST !READ EXISTING FLAG TO LAST RECORD OF ELEMENT INTEGER DATA (INCREASE THE SPEED PURPOSE)
      GOTO 6
5     IXIST = 0
6     IF(IXIST.LE.0) GOTO 5000

      READ(NFLI,REC=IEL) IAX
      READ(NFLR,REC=IEL) AAX


	SE(1:NEK) = 0.0D0
	RE(1:NEF) = 0.0D0
	RL(1:NEF) = 0.0D0
	EXDI(1:NEF) = 0.0D0
	STLD(1:NEF) = 0.0D0

	NPM(1) = N3
	NPI(1) = N3
	CALL CALLINTG(IF3,IAX,NDX3,NPM,NPI,1,'READ') !ELEMENT DATA
	IXIST = IF3(4)     !TOTAL EXISTING FLAG 
	IF(IXIST.EQ.0) GOTO 5000
C	--------------------------
C	EXTRACT NODAL COORDINATE
	NPM(1) = N1
	NPI(1) = N1
	CALL CALLINTG(IF1,IAX,NDX1,NPM,NPI,1,'READ')
	DO INM = 1,NNM
	NOD = IF1(INM)
	COORD(1:3,INM) = 0.0D0
	DO ISC = 1,NSC
	CALL RELFILL('$XYZ',COORD(ISC,INM),ISC,NOD,0)  !GETTING HERE NODAL COORDINATE
	ENDDO
	ENDDO
C	--------------------------

	NPM(1) = N2
	NPI(1) = N2
	CALL CALLINTG(IF2,IAX,NDX2,NPM,NPI,1,'READ')
	DO IEF = 1,NEF
	LREQ(IEF) = IF2(IEF)       !ORIGINAL EQUA
	LMEQ(IEF) = IF2(IEF+NEF)   !IF2(NEF+1:NEF+NEF) = CURRENT EQAUATION
	ENDDO


	IF(LOPT.NE.6.AND.LOPT.NE.8) THEN !FOR TENDON + CREEP PRIMARY 
C	LFOC  0 = NO COMPUTE OF ELM FORCE   1 = COMPUTE ELM FORCE
C	------------------------------------
	LSTF = 0
	LFOC = 2
	CALL MDUOPT3(IEG,IEL,COORD,SE,RE,RL,LSTF,LFOC,IAX,AAX)
C	--------------------------
C	BACK UP NODAL FORCE FROM MECHA
	NPM(1) = N6
	NPI(1) = N6
	CALL CALLREAL(AF6,AAX,NDX6,NPM,NPI,1,'READ')
	NPM(1) = N9
	NPI(1) = N9
	CALL CALLREAL(AF9,AAX,NDX9,NPM,NPI,1,'READ')     
	NUM1 = 1   + NEF 
	NUM2 = NEF + NEF 
	RL(1:NEF) = RL(1:NEF) - AF6(NUM1:NUM2)
	NUM1 = 1   + NEF*NNN
	NUM2 = NEF + NEF*NNN
	AF9(NUM1:NUM2) = AF9(NUM1:NUM2) + RL(1:NEF)
	CALL CALLREAL(AF9,AAX,NDX9,NPM,NPI,1,'WRIT')         
C	--------------------------
C	------------------------------------
	ENDIF


	IF(LOPT.EQ.6) THEN !FOR TENDON PRIMARY 
	IF(ISTYP.EQ.5) THEN
	NPM(1) = N1
	NPI(1) = N1
	CALL CALLINTG(IF1,IAX,NDX1,NPM,NPI,1,'READ')
	NPM(1) = N8
	NPI(1) = N8
	CALL CALLREAL(AF8,AAX,NDX8,NPM,NPI,1,'READ')   
	ND1 = IF1(1)
	ND2 = IF1(2)
	FOCT(1:12) = 0.0D0
	CALL TEDPRIM(ND1,ND2,FOCT)  !GLOBAL FORCE
	RL(1:NEF) = 0.0D0
	RL(1:6)  = FOCT(1:6 )
	RL(8:13) = FOCT(7:12)
	CALL FRMVRST(IEG,IEL,RL,0,IAX)  !TRANSFORM TO LOCAL
	NUM1 = 1   + NEF*NNN
	NUM2 = NEF + NEF*NNN
	AF8(NUM1:NUM2) = RL(1:NEF)
	
	NUM1 = 1   + NEF*(NNN+1)  !FOR TENDON SECONDARY
	NUM2 = NEF + NEF*(NNN+1)  !FOR TENDON SECONDARY
	AF8(NUM1:NUM2) =-RL(1:NEF)

	CALL CALLREAL(AF8,AAX,NDX8,NPM,NPI,1,'WRIT') 
	ENDIF
	ENDIF


	IF(LOPT.EQ.8) THEN !FOR CREEP PRIMARY
	NPM(1) = N6
	NPI(1) = N6
	CALL CALLREAL(AF6,AAX,NDX6,NPM,NPI,1,'READ') 
	NPM(1) = N8
	NPI(1) = N8
	CALL CALLREAL(AF8,AAX,NDX8,NPM,NPI,1,'READ')    
	NUM1 = 1   + NEF + NEF
	NUM2 = NEF + NEF + NEF
	RL(1:NEF) = AF6(NUM1:NUM2)
	NUM1 = 1   + NEF*NNN
	NUM2 = NEF + NEF*NNN
	AF8(NUM1:NUM2) =-RL(1:NEF)

	NUM1 = 1   + NEF*(NNN+1)
	NUM2 = NEF + NEF*(NNN+1)
	AF8(NUM1:NUM2) = RL(1:NEF)

	CALL CALLREAL(AF8,AAX,NDX8,NPM,NPI,1,'WRIT')    
	ENDIF


C	--------------------------
	NPM(1) = N8
	NPI(1) = N8
	CALL CALLREAL(AF8,AAX,NDX8,NPM,NPI,1,'READ')  
	NPM(1) = N9
	NPI(1) = N9
	CALL CALLREAL(AF9,AAX,NDX9,NPM,NPI,1,'READ')  
	NUM1 = 1   + NEF*NNN
	NUM2 = NEF + NEF*NNN  
	NUM3 = 1   + NEF*(NNN+10)
	NUM4 = NEF + NEF*(NNN+10)
	NUM5 = 1   + NEF*(NNN+20)
	NUM6 = NEF + NEF*(NNN+20)
	AF8(NUM5:NUM6) = AF8(NUM1:NUM2) - AF8(NUM3:NUM4)  !GET INC
	AF9(NUM5:NUM6) = AF9(NUM1:NUM2) - AF9(NUM3:NUM4)  !GET INC
	AF8(NUM3:NUM4) = AF8(NUM1:NUM2)  !UPDATE
	AF9(NUM3:NUM4) = AF9(NUM1:NUM2)  !UPDATE
	NPM(1) = N8
	NPI(1) = N8
	CALL CALLREAL(AF8,AAX,NDX8,NPM,NPI,1,'WRIT')  
	NPM(1) = N9
	NPI(1) = N9
	CALL CALLREAL(AF9,AAX,NDX9,NPM,NPI,1,'WRIT')  
C	--------------------------
	
	IF(ITYPE.EQ.5) CALL CSASTSF(IEG,IEL,NNN,IAX,AAX)  !FRAME STRESS

      WRITE(NFLI,REC=IEL) IAX
      WRITE(NFLR,REC=IEL) AAX
C	------------------------------------
5000	CONTINUE
C	------------------------------------

	DEALLOCATE(IAX,AAX)
	DEALLOCATE(LMEQ,LREQ,RE,RL,SE)
	DEALLOCATE(COORD)
	DEALLOCATE(IF1,IF2,IF3,AF6,AF8,AF9)
	DEALLOCATE(STLD,EXDI)


	RETURN
	END


C	=======================================================================
C	=== CONSTRUCTION ANALYSIS =============== SONGSAK NOV2007 =============
C	=======================================================================
      SUBROUTINE CSACOMP
	IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER*4 (I-N)
      CHARACTER*1 NAME

      COMMON /CONSTINT/ MTOTI(10),NCONI(5000),ICONDT(1)
      COMMON /CONSTREL/ MTOTR(10),NCONR(5000),RCONDT(1)
      DIMENSION NAME(4)

	ALLOCATABLE VCOM(:,:),LNAME(:,:)



C	TOTAL EXTERNAL LOAD
	CALL LOCATN ('$XLD',KXLD,NSF,NSN,2)  !ALSO CALLING NSF & NSN

	NSFN = NSF*NSN

	CALL LOCATN ('-LMA',KLMA,NR,NC ,1)
	CALL LOCATN ('-GSF',KGSF,NR,NC ,2)
	CALL LOCATN ('-DIG',KDIG,NR,NEQ,2)

	NSIZ = 10
	ALLOCATE(VCOM(NEQ,NSIZ),LNAME(2,NSIZ))



C	TOTAL NODAL DISP
	CALL LOCATN ('$XDS',KXDS,NR,NC,2)  

C	ACTIVE EQUATION NUMBER
      CALL LOCATN ('-EQN',KEQN,NR,NC,1)    

C	ELEMENT RESISTING LOAD
	CALL LOCATN ('-EIS',KEIS,NR,NC,2)  

C	TOTAL INCR DISP OF CURRENT STEP
	CALL LOCATN ('-UXI',KUXI,NR,NC,2)  

C	TOTAL JOINT DISPLACEMENT
	CALL LOCATN ('+XDD',KTTDD,NR,NC,2)
	CALL LOCATN ('+XTV',KTTTV,NR,NC,2)
	CALL LOCATN ('+XST',KTTST,NR,NC,2)
	CALL LOCATN ('+XTM',KTTTM,NR,NC,2)
	CALL LOCATN ('+XCT',KTTCT,NR,NC,2)
	CALL LOCATN ('+XTP',KTTTP,NR,NC,2)
	CALL LOCATN ('+XTS',KTTTS,NR,NC,2)
	CALL LOCATN ('+XCP',KTTCP,NR,NC,2)
	CALL LOCATN ('+XCS',KTTCS,NR,NC,2)
	CALL LOCATN ('+XNL',KTTNL,NR,NC,2) !NONLINEAR EFFECT

C	TOTAL LOAD 
	CALL LOCATN ('-LDD',KTLDD,NR,NC,2)  
	CALL LOCATN ('-LTV',KTLTV,NR,NC,2)   
	CALL LOCATN ('-LST',KTLST,NR,NC,2)   
	CALL LOCATN ('-LTM',KTLTM,NR,NC,2)   
	CALL LOCATN ('-LCT',KTLCT,NR,NC,2)   
	CALL LOCATN ('-LTP',KTLTP,NR,NC,2)   
	CALL LOCATN ('-LTS',KTLTS,NR,NC,2)   
	CALL LOCATN ('-LCP',KTLCP,NR,NC,2)  
	CALL LOCATN ('-LCS',KTLCS,NR,NC,2)


C	TOTAL OLD LOAD 
	CALL LOCATN ('-ODD',KOLDD,NR,NC,2)  
	CALL LOCATN ('-OTV',KOLTV,NR,NC,2)   
	CALL LOCATN ('-OST',KOLST,NR,NC,2)   
	CALL LOCATN ('-OTM',KOLTM,NR,NC,2)   
	CALL LOCATN ('-OCT',KOLCT,NR,NC,2)   
	CALL LOCATN ('-OTP',KOLTP,NR,NC,2)   
	CALL LOCATN ('-OTS',KOLTS,NR,NC,2)   
	CALL LOCATN ('-OCP',KOLCP,NR,NC,2)  
	CALL LOCATN ('-OCS',KOLCS,NR,NC,2)
	CALL LOCATN ('-ONL',KOLNL,NR,NC,2) !NONLINEAR EFFECT


C	CURRENT INTERNAL LOAD (USE IN DISP. SEPARATION)
	CALL DEFNREL ('@LFO',KLFO,NSF,NSN)   
	CALL RELZERO ('@LFO') 
	FACTOR = 1.0D0
	CALL LOCADD('@LFO','-EIS',FACTOR,2) !STORE CURRENT INTERNAL FORCE HERE


C	LOAD COMPONENT OPTION FLAG
	CALL DEFNINT ('@COM',KCOMB,1,1)   
	CALL INTZERO ('@COM')


	VCOM(1:NEQ,1:NSIZ) = 0.0D0
C	------------------------------------------------------
	LNAME(1:2,1) = [KTLDD,KOLDD]
	LNAME(1:2,2) = [KTLTV,KOLTV]
	LNAME(1:2,3) = [KTLST,KOLST]
	LNAME(1:2,4) = [KTLTM,KOLTM]
	LNAME(1:2,5) = [KTLCT,KOLCT]
	LNAME(1:2,6) = [KTLTP,KOLTP]
	LNAME(1:2,7) = [KTLTS,KOLTS]
	LNAME(1:2,8) = [KTLCP,KOLCP]
	LNAME(1:2,9) = [KTLCS,KOLCS]
	LNAME(1:2,10)= [KOLNL,KOLNL]
      CALL DISSEP(VCOM,LNAME,NSF,NSN,NEQ,
	1		    KEQN,KGSF,KDIG,KLMA,KXDS,KLFO,KEIS)      
C	------------------------------------------------------

	DO IEQ = 1,NEQ
	DO NCOM= 1,9
	RCONDT(KUXI+IEQ-1) = RCONDT(KUXI+IEQ-1) - VCOM(IEQ,NCOM)
	ENDDO
	ENDDO
	
C	REMAINING IS NONLINEAR EFFECT
  	DO IEQ = 1,NEQ
	VCOM(IEQ,10) =  RCONDT(KUXI+IEQ-1) 
	ENDDO
	
C	---------------------
	IC = -1
      CALL INTFILL('@COM',IC,1,1,1)   !IC WILL BE USE TO STORE THE DATA FOR ELEMENT SYCH As STRESS (SEE ALSO In SHELL ELEMENT JAN09)
      
	CALL INTZERO('%SOL') 
	CALL INTFILL('%SOL',2,1,1,1)
	CALL INTFILL('%SOL',2,1,3,1)
	CALL GRLCON

C	---------------------
      CALL LCSCAL(VCOM,LNAME,NSF,NSN,NEQ,KEQN,KXDS,KLFO,KEIS)
C	---------------------
	
C	------------------------------------------------------
C	ACCUMULATE TOTAL DISP
	CALL DISACU(ICONDT(KEQN),RCONDT(KTTDD),VCOM(1,1),NSF,NSN)   
	CALL DISACU(ICONDT(KEQN),RCONDT(KTTTV),VCOM(1,2),NSF,NSN)  
	CALL DISACU(ICONDT(KEQN),RCONDT(KTTST),VCOM(1,3),NSF,NSN)   
	CALL DISACU(ICONDT(KEQN),RCONDT(KTTTM),VCOM(1,4),NSF,NSN)  
	CALL DISACU(ICONDT(KEQN),RCONDT(KTTCT),VCOM(1,5),NSF,NSN)  
	CALL DISACU(ICONDT(KEQN),RCONDT(KTTTS),VCOM(1,7),NSF,NSN)  
	CALL DISACU(ICONDT(KEQN),RCONDT(KTTCS),VCOM(1,9),NSF,NSN)
	CALL DISACU(ICONDT(KEQN),RCONDT(KTTNL),VCOM(1,10),NSF,NSN) !NONLINEAR EFFECT 
C	------------------------------------------------------

C	------------------------------------------------------
	CALL DISACU(ICONDT(KEQN),RCONDT(KTTCT),VCOM(1,10),NSF,NSN)   !ADD NONLINEAR DISP. TO CONSTRUTION CASE
C	------------------------------------------------------


	CALL DELTREL ('@LFO')  

	CALL DELTINT ('@COM')
 

	DEALLOCATE(VCOM,LNAME)


	RETURN
	END

C	=======================================================================
C	=== CONSTRUCTION ANALYSIS =============== SONGSAK NOV2007 =============
C	=======================================================================
      SUBROUTINE GRLPRN
	IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER*4 (I-N)
C	PRINT ELEMENT FORCE
	DIMENSION NPM(10),NPI(10)
	ALLOCATABLE IF3(:),AF6(:),AF8(:),AF9(:),FIX(:),RL(:)
	ALLOCATABLE IAX(:),AAX(:)


C	CALLINg NEG
	CALL INTFILL('%NUB',NEG,1,5,0)

	CALL INTFILL('%IOL',NOT,1,3,0)  !OUTPUT.OUT

	DO 7000 IEG = 1,NEG

	CALL INTFILL('%GRP',ITYPE,1 ,IEG,0) !
	CALL INTFILL('%GRP',ISTYP,2 ,IEG,0) !
	CALL INTFILL('%GRP',NELE ,3 ,IEG,0) !
	CALL INTFILL('%GRP',NEF  ,7 ,IEG,0) !
	CALL INTFILL('%GRP',NNM  ,8 ,IEG,0) !
	CALL INTFILL('%GRP',NNF  ,9 ,IEG,0) !


	CALL INTFILL('%GRF',N3   ,3 ,IEG,0) !
	CALL INTFILL('%GRF',N6   ,6 ,IEG,0) !
	CALL INTFILL('%GRF',N8   ,8 ,IEG,0) !
	CALL INTFILL('%GRF',N9   ,9 ,IEG,0) !

	CALL INTFILL('%GRF',NDX3 ,13,IEG,0) !
	CALL INTFILL('%GRF',NDX6 ,16,IEG,0) !
	CALL INTFILL('%GRF',NDX8 ,18,IEG,0) !
	CALL INTFILL('%GRF',NDX9 ,19,IEG,0) !

	CALL INTFILL('%GRF',NFLI ,21,IEG,0) !
	CALL INTFILL('%GRF',NFLR ,22,IEG,0) !
	
	CALL INTFILL('%GRF',LASI ,23,IEG,0) !
	CALL INTFILL('%GRF',LASR ,24,IEG,0) !


	ALLOCATE(RL(NEF),FIX(NEF),IF3(N3),AF6(N6),AF8(N8),AF9(N9))
	ALLOCATE(IAX(LASI),AAX(LASR))


	WRITE(NOT,1900) IEG,NNF
C	------------------------------------
C	LOOP OVER ELEMENT FOR MECHANICAL LOAD
C	------------------------------------
	DO 4000 IEL = 1,NELE

      READ(NFLI,REC=NELE+IEL,ERR=5) IXIST !READ EXISTING FLAG TO LAST RECORD OF ELEMENT INTEGER DATA (INCREASE THE SPEED PURPOSE)
      GOTO 6
5     IXIST = 0
6     IF(IXIST.LE.0) GOTO 4000

      READ(NFLI,REC=IEL) IAX
      READ(NFLR,REC=IEL) AAX
      
	NPM(1) = N3
	NPI(1) = N3
	CALL CALLINTG(IF3,IAX,NDX3,NPM,NPI,1,'READ')  

	IGM = IF3(1)
	IXIST = IF3(4)
	IF(IXIST.EQ.0) GOTO 4000

	NPM(1) = N6
	NPI(1) = N6
	CALL CALLREAL(AF6,AAX,NDX6,NPM,NPI,1,'READ')        !INITIAL ERECTION DISPLACEMENT


	NUM1 = 1   + NEF + NEF + NEF
	NUM2 = NEF + NEF + NEF + NEF
	FIX(1:NEF) = AF6(NUM1:NUM2)   !MECHANICAL LOAD


	NUM1 = 1   + NEF
	NUM2 = NEF + NEF
	RL(1:NEF)  = AF6(NUM1:NUM2)-FIX(1:NEF)   !MECHANICAL LOAD

	IEF = 0
	DO INM = 1,NNM
	NUM1 = 1   + IEF
	NUM2 = NNF + IEF
	IF(INM.EQ.1) WRITE(NOT,2000) IGM,RL(NUM1:NUM2)  !WRITE MECHANICAL LOAD
	IF(INM.NE.1) WRITE(NOT,2001)     RL(NUM1:NUM2)  !WRITE MECHANICAL LOAD
	IEF = IEF + NNF
	ENDDO


C      WRITE(NFLI,REC=IEL) IAX
C      WRITE(NFLR,REC=IEL) AAX
      

C	------------------------------------
4000	CONTINUE
C	------------------------------------

	WRITE(NOT,1901) IEG,NNF
C	------------------------------------
C	LOOP OVER ELEMENT FOR NON-MECHANICAL LOAD
C	------------------------------------
	DO 5000 IEL = 1,NELE

      READ(NFLI,REC=NELE+IEL,ERR=7) IXIST !READ EXISTING FLAG TO LAST RECORD OF ELEMENT INTEGER DATA (INCREASE THE SPEED PURPOSE)
      GOTO 8
7     IXIST = 0
8     IF(IXIST.LE.0) GOTO 5000

      READ(NFLI,REC=IEL) IAX
      READ(NFLR,REC=IEL) AAX

	NPM(1) = N3
	NPI(1) = N3
	CALL CALLINTG(IF3,IAX,NDX3,NPM,NPI,1,'READ')       

	IGM = IF3(1)
	IXIST = IF3(4)
	IF(IXIST.EQ.0) GOTO 5000

	NPM(1) = N6
	NPI(1) = N6
	CALL CALLREAL(AF6,AAX,NDX6,NPM,NPI,1,'READ')        !INITIAL ERECTION DISPLACEMENT


	NUM1 = 1   + NEF + NEF
	NUM2 = NEF + NEF + NEF
	RL(1:NEF) = AF6(NUM1:NUM2)    !NON-MECHANICAL LOAD


	IEF = 0
	DO INM = 1,NNM
	NUM1 = 1   + IEF
	NUM2 = NNF + IEF
	IF(INM.EQ.1) WRITE(NOT,2000) IGM,RL(NUM1:NUM2)  !WRITE NON-MECHANICAL LOAD
	IF(INM.NE.1) WRITE(NOT,2001)     RL(NUM1:NUM2)  !WRITE NON-MECHANICAL LOAD
	IEF = IEF + NNF
	ENDDO

C      WRITE(NFLI,REC=IEL) IAX
C      WRITE(NFLR,REC=IEL) AAX
C	------------------------------------
5000	CONTINUE
C	------------------------------------



	DO 5500 ICOM = 1,9
	NNN = ICOM-1

	SELECTCASE(ICOM)
	CASE(1)
	WRITE(NOT,3001) IEG,NNF
	CASE(2)
	WRITE(NOT,3002) IEG,NNF
	CASE(3)
	WRITE(NOT,3003) IEG,NNF
	CASE(4)
	WRITE(NOT,3004) IEG,NNF
	CASE(5)
	WRITE(NOT,3005) IEG,NNF
	CASE(6)
	WRITE(NOT,3006) IEG,NNF
	CASE(7)
	WRITE(NOT,3007) IEG,NNF
	CASE(8)
	WRITE(NOT,3008) IEG,NNF
	CASE(9)
	WRITE(NOT,3009) IEG,NNF
	ENDSELECT
	
C	------------------------------------
C	LOOP OVER ELEMENT FOR NON-MECHANICAL LOAD
C	------------------------------------
	DO 5100 IEL = 1,NELE

      READ(NFLI,REC=NELE+IEL,ERR=9) IXIST !READ EXISTING FLAG TO LAST RECORD OF ELEMENT INTEGER DATA (INCREASE THE SPEED PURPOSE)
      GOTO 10
9     IXIST = 0
10     IF(IXIST.LE.0) GOTO 5100

      READ(NFLI,REC=IEL) IAX
      READ(NFLR,REC=IEL) AAX


	NPM(1) = N3
	NPI(1) = N3
	CALL CALLINTG(IF3,IAX,NDX3,NPM,NPI,1,'READ') 

	IGM = IF3(1)
	IXIST = IF3(4)
	IF(IXIST.EQ.0) GOTO 5100

	NPM(1) = N8
	NPI(1) = N8
	CALL CALLREAL(AF8,AAX,NDX8,NPM,NPI,1,'READ')     
	NPM(1) = N9
	NPI(1) = N9
	CALL CALLREAL(AF9,AAX,NDX9,NPM,NPI,1,'READ')      


	NUM1 = 1   + NEF*NNN
	NUM2 = NEF + NEF*NNN
	FIX(1:NEF) = AF8(NUM1:NUM2)   !MECHANICAL LOAD


C	WRITE(*,*) 'K1',AF8(NUM1:NUM2)
C	WRITE(*,*) 'K2',AF9(NUM1:NUM2)

	NUM1 = 1   + NEF*NNN
	NUM2 = NEF + NEF*NNN
	RL(1:NEF)  = AF9(NUM1:NUM2)-FIX(1:NEF)   !MECHANICAL LOAD

	IEF = 0
	DO INM = 1,NNM
	NUM1 = 1   + IEF
	NUM2 = NNF + IEF
	IF(INM.EQ.1) WRITE(NOT,2000) IGM,RL(NUM1:NUM2)  !WRITE MECHANICAL LOAD
	IF(INM.NE.1) WRITE(NOT,2001)     RL(NUM1:NUM2)  !WRITE MECHANICAL LOAD
	IEF = IEF + NNF
	ENDDO

C      WRITE(NFLI,REC=IEL) IAX
C      WRITE(NFLR,REC=IEL) AAX
C	------------------------------------
5100	CONTINUE
C	------------------------------------
5500	CONTINUE	


	DEALLOCATE(IAX,AAX)
	DEALLOCATE(RL,IF3,AF6,FIX,AF8,AF9)
C	------------------------------------
7000	CONTINUE
C	------------------------------------


1900	FORMAT(//3X,'ELEMENT MECHANICAL     FORCE FOR GROUP',I5/
	1        4X,'WITH ',I3,' DOF PER NODE'/)
1901	FORMAT( /3X,'ELEMENT NON-MECHANICAL FORCE FOR GROUP',I5/
	1        4X,'WITH ',I3,' DOF PER NODE'/)
2000	FORMAT(5X,I5,2X,100E12.3)
2001	FORMAT(5X,5X,2X,100E12.3)




3001	FORMAT(//3X,'DEAD LOAD - FORCE FOR GROUP',I5/
	1        4X,'WITH ',I3,' DOF PER NODE'/)
3002	FORMAT(//3X,'TRAVELER LOAD - FORCE FOR GROUP',I5/
	1        4X,'WITH ',I3,' DOF PER NODE'/)
3003	FORMAT(//3X,'SETTLEMENT LOAD - FORCE FOR GROUP',I5/
	1        4X,'WITH ',I3,' DOF PER NODE'/)
3004	FORMAT(//3X,'TEMPERATURE LOAD - FORCE FOR GROUP',I5/
	1        4X,'WITH ',I3,' DOF PER NODE'/)
3005	FORMAT(//3X,'CONSTRUCTION LOAD - FORCE FOR GROUP',I5/
	1        4X,'WITH ',I3,' DOF PER NODE'/)
3006	FORMAT(//3X,'TENDON PRIMARY LOAD - FORCE FOR GROUP',I5/
	1        4X,'WITH ',I3,' DOF PER NODE'/)
3007	FORMAT(//3X,'TENDON SECONDARY LOAD - FORCE FOR GROUP',I5/
	1        4X,'WITH ',I3,' DOF PER NODE'/)
3008	FORMAT(//3X,'CREEP&SHRINKAGE PRIMARY LOAD - FORCE FOR GROUP',I5/
	1        4X,'WITH ',I3,' DOF PER NODE'/)
3009	FORMAT(//3X,'CREEP&SHRINKAGE SECONDARY LOAD - FORCE FOR GROUP',I5/
	1        4X,'WITH ',I3,' DOF PER NODE'/)




	RETURN
	END


C	=======================================================================
C	=== CONSTRUCTION ANALYSIS ===SONGSAK JAN2008 ===LOAD COMBINATION ======
C	=======================================================================
      SUBROUTINE CSALODC 
	IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER*4 (I-N)	

	CALL LOCATN('$LCM',KLCM,NCOD,NCOM,1) !LOAD COMBINATION DATA
	IF(NCOM.LE.0) RETURN

	CALL INTFILL('$AYS',IALYS,1,1,0)  !CALL ANALYSIS NUMBER
	CALL INTFILL('$AYS',ISTEP,1,2,0)  !CALL STEP NUMBER FIRST OR LAST STEP NOW


C	--------------------------------------
      DO 1000 ICOM = 1,NCOM     !LOOP OVER COMBINATION
C	--------------------------------------


	CALL INTFILL('$LCM',MC,1,ICOM,0) !ANALYSIS No.
	IF(MC.NE.IALYS) GOTO 1000

	CALL INTFILL('$LCM',IB,2,ICOM,0) !FIRST OR LAST STEP
	IF(ISTEP.EQ.3.AND.IB.NE.0) GOTO 200  !IF ZERO TIME STEP
	IF(IB.NE.ISTEP) GOTO 1000
200	CONTINUE

	CALL INTFILL('$LCM',LS,3,ICOM,0) !LOAD CASE NO.

C	--------------------------------------
	DO 500 IC = 1,10
	NC = 5 + IC
	CALL INTFILL('$LCM',LC,NC,ICOM,0)
	IF(LC.EQ.0) GOTO 500
	


	CALL CLEROUT  !CLEAR OUTPUT DATA ARRAY (XFINAS)
	
	CALL CSADPLC(IC)      !DISPLACEMENT
	CALL CSAGRLC(IC)      !ELEMENT STRESS
	CALL CSARCLC(IC)      !GLOBAL REACTION
	CALL CSALCLC          !LINK FORCE (ONLY CALLING)

	CALL BACKLCS(LS,'COMB') !ADD THIS TO SPECIFIC LOAD CASE

500	CONTINUE
C	--------------------------------------

	CALL CSALCTD(LS)	  !PRINTING TENDON OUTPUT


C	--------------------------------------
1000	CONTINUE
C	--------------------------------------


	RETURN

	END


C	=======================================================================
C	=== CONSTRUCTION ANALYSIS ===SONGSAK JAN2008 ===LOAD COMBINATION ======
C	=======================================================================
      SUBROUTINE CSADPLC(IC)
	IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER*4 (I-N)     
	CHARACTER*1 NAME
C	DISPLACEMENT COMBINATION
      DIMENSION NAME(4)	
	DIMENSION IDOF(9)
	ALLOCATABLE EDAT(:)
C	----------------------------------------
C	CALLING IDOF
C	----------------------------------------
	DO I = 1,9
	CALL INTFILL('%DOF',IDOF(I),1,I,0)
	ENDDO

	CALL LOCATN('ONDS',KDISP,NOUT2,NOUT1,2)
	NOUT = NOUT2/2
	ALLOCATE(EDAT(NOUT))


	SELECTCASE(IC)
	CASE(1)
	NAME(1)  =  '+'
	NAME(2)  =  'X'
	NAME(3)  =  'D'
	NAME(4)  =  'D'
	CASE(2)
	NAME(1)  =  '+'
	NAME(2)  =  'X'
	NAME(3)  =  'T'
	NAME(4)  =  'V'
	CASE(3)
	NAME(1)  =  '+'
	NAME(2)  =  'X'
	NAME(3)  =  'S'
	NAME(4)  =  'T'
	CASE(4)
	NAME(1)  =  '+'
	NAME(2)  =  'X'
	NAME(3)  =  'T'
	NAME(4)  =  'M'
	CASE(5)
	NAME(1)  =  '+'
	NAME(2)  =  'X'
	NAME(3)  =  'C'
	NAME(4)  =  'T'
	CASE(6)
	NAME(1)  =  '+'
	NAME(2)  =  'X'
	NAME(3)  =  'T'
	NAME(4)  =  'P'
C     TRICK TO MOVE SECONDARY DISPLACEMENT TO PRIMARY	
	NAME(1)  =  '+'
	NAME(2)  =  'X'
	NAME(3)  =  'T'
	NAME(4)  =  'S'
	CASE(7)
	NAME(1)  =  '+'
	NAME(2)  =  'X'
	NAME(3)  =  'T'
	NAME(4)  =  'S'
C     TRICK TO MOVE PRIMARY DISPLACEMENT TO SECONDARY
	NAME(1)  =  '+'
	NAME(2)  =  'X'
	NAME(3)  =  'T'
	NAME(4)  =  'P'
	CASE(8)
	NAME(1)  =  '+'
	NAME(2)  =  'X'
	NAME(3)  =  'C'
	NAME(4)  =  'P'
C     TRICK TO MOVE SECONDARY DISPLACEMENT TO PRIMARY	
	NAME(1)  =  '+'
	NAME(2)  =  'X'
	NAME(3)  =  'C'
	NAME(4)  =  'S'
	CASE(9)
	NAME(1)  =  '+'
	NAME(2)  =  'X'
	NAME(3)  =  'C'
	NAME(4)  =  'S'
C     TRICK TO MOVE PRIMARY DISPLACEMENT TO SECONDARY
	NAME(1)  =  '+'
	NAME(2)  =  'X'
	NAME(3)  =  'C'
	NAME(4)  =  'P'
	CASE(10)
	NAME(1)  =  '$'
	NAME(2)  =  'X'
	NAME(3)  =  'D'
	NAME(4)  =  'S'
	ENDSELECT


	CALL INTFILL('%NUB',NSN,1,1,0) !CALLING NSN
	CALL INTFILL('%NUB',NSF,1,2,0) !CALLING NSF

	DO ISN = 1,NSN
	EDAT(1:NOUT) = 0.0D0

	DO ISF = 1,NSF
	CALL RELFILL(NAME,VALV,ISF,ISN,0)
	IDF = IDOF(ISF)
	EDAT(IDF) = VALV
	ENDDO

C	--------------
	DO I = 1,NOUT
	VALV = EDAT(I)
	NUM = I
	CALL RELFILL('ONDS',VALV,NUM,ISN,1)
	NUM = I+NOUT
	CALL RELFILL('ONDS',VALV,NUM,ISN,1)
	ENDDO			
C	--------------

	ENDDO

	
	DEALLOCATE(EDAT)

	RETURN

	END


C	=======================================================================
C	=== CONSTRUCTION ANALYSIS ===SONGSAK JAN2008 ===LOAD COMBINATION ======
C	=======================================================================
      SUBROUTINE CSAGRLC(IC)
	IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER*4 (I-N)     
C	ELEMENT FORCE LOAD COMBINATION

C	CALLINg NEG
	CALL INTFILL('%NUB',NEG,1,5,0)


	DO 7000 IEG = 1,NEG


	CALL INTFILL('%GRP',ITYPE,1 ,IEG,0) !
	CALL INTFILL('%GRP',ISTYP,2 ,IEG,0) !

	SELECTCASE(ITYPE)
	

C	=========
	CASE(2)
	CALL CSALOCCB(IEG,IC)
C	=========

C	=========
	CASE(5)
	SELECTCASE(ISTYP)
	CASE(5)
	CALL CSALOCFM(IEG,IC)
	ENDSELECT
C	=========

C	=========
	CASE(9)
	SELECTCASE(ISTYP)
	CASE(1)
	CALL CSALOCSH(IEG,IC)
	CASE(4)
	CALL CSALOCSH(IEG,IC)
	ENDSELECT
C	=========


C	=========
	CASE(10)
	SELECTCASE(ISTYP)
	CASE(1)
	CALL CSALOCSO(IEG,IC)
	CASE(6)
	CALL CSALOCSO(IEG,IC)
	ENDSELECT
C	=========

	ENDSELECT

C	------------------------------------
7000	CONTINUE
C	------------------------------------



	

	RETURN

	END


C	=======================================================================
C	=== CONSTRUCTION ANALYSIS ===SONGSAK JAN2008 ===LOAD COMBINATION ======
C	=======================================================================
      SUBROUTINE CSALOCCB(IEG,IC)
	IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER*4 (I-N)     
C	ELEMENT FORCE LOAD COMBINATION
C	=======================================================================
	DIMENSION NPM(10),NPI(10)
	ALLOCATABLE IF3(:),AF8(:),AF9(:),FIX(:),RL(:),IGIDM(:)

	ALLOCATABLE AP1(:),EDAT(:)
	ALLOCATABLE IAX(:),AAX(:)


	CALL INTFILL('%GRP',ITYPE,1 ,IEG,0) !
	CALL INTFILL('%GRP',ISTYP,2 ,IEG,0) !
	CALL INTFILL('%GRP',NELE ,3 ,IEG,0) !
	CALL INTFILL('%GRP',MPRT ,4 ,IEG,0) ! MAXP
	CALL INTFILL('%GRP',NEF  ,7 ,IEG,0) !
	CALL INTFILL('%GRP',NNM  ,8 ,IEG,0) !
	CALL INTFILL('%GRP',NNF  ,9 ,IEG,0) !


	CALL INTFILL('%GRF',N3   ,3 ,IEG,0) !
	CALL INTFILL('%GRF',N8   ,8 ,IEG,0) !
	CALL INTFILL('%GRF',N9   ,9 ,IEG,0) !

	CALL INTFILL('%GRF',NDX3 ,13,IEG,0) !
	CALL INTFILL('%GRF',NDX8 ,18,IEG,0) !
	CALL INTFILL('%GRF',NDX9 ,19,IEG,0) !
	
	CALL INTFILL('%GRF',NFLI ,21,IEG,0) !
	CALL INTFILL('%GRF',NFLR ,22,IEG,0) !
	
	CALL INTFILL('%GRF',LASI ,23,IEG,0) !
	CALL INTFILL('%GRF',LASR ,24,IEG,0) !


	ALLOCATE(RL(NEF),FIX(NEF),IGIDM(NELE))
	ALLOCATE(IF3(N3),AF8(N8),AF9(N9))
	ALLOCATE(IAX(LASI),AAX(LASR))


	CALL INTFILL('OGRP',NOUT  ,12,IEG,0) !
	CALL INTFILL('OGRP',LENGTH,17,IEG,0) !
	CALL INTFILL('OGRF',NP1   ,1 ,IEG,0) !
	CALL INTFILL('OGRF',NPL1  ,11,IEG,0) !
	ALLOCATE(AP1(NP1*NELE),EDAT(NOUT))

	REWIND(NPL1)
	READ(NPL1) AP1
	
	IGIDM(1:NELE) = 0
C	------------------------------------
C	LOOP OVER ELEMENT
C	------------------------------------
	DO 5100 IEL = 1,NELE

      READ(NFLI,REC=NELE+IEL,ERR=5) IXIST !READ EXISTING FLAG TO LAST RECORD OF ELEMENT INTEGER DATA (INCREASE THE SPEED PURPOSE)
      GOTO 6
5     IXIST = 0
6     IF(IXIST.LE.0) GOTO 5100

      READ(NFLI,REC=IEL) IAX
      READ(NFLR,REC=IEL) AAX

	EDAT(1:NOUT) = 0.0D0

	NPM(1) = N3
	NPI(1) = N3
	CALL CALLINTG(IF3,IAX,NDX3,NPM,NPI,1,'READ')   

	IGIDM(IEL) = IF3(1)
	IXIST = IF3(4)
	IF(IXIST.EQ.0) GOTO 5100


	NPM(1) = N8
	NPI(1) = N8
	CALL CALLREAL(AF8,AAX,NDX8,NPM,NPI,1,'READ')     
	NPM(1) = N9
	NPI(1) = N9
	CALL CALLREAL(AF9,AAX,NDX9,NPM,NPI,1,'READ')     


	NNN = IC-1
	NUM1 = 1   + NEF*NNN
	NUM2 = NEF + NEF*NNN
	FIX(1:NEF) = AF8(NUM1:NUM2)              !FIXEND LOAD
	NUM1 = 1   + NEF*NNN
	NUM2 = NEF + NEF*NNN
	RL(1:NEF)  = AF9(NUM1:NUM2)-FIX(1:NEF)   !INTERNAL LOAD

	FF1 = SQRT(RL(1)*RL(1)+RL(2)*RL(2)+RL(3)*RL(3))
	FF2 = SQRT(RL(4)*RL(4)+RL(5)*RL(5)+RL(6)*RL(6))

	EDAT(1) = 0.5*(FF1 + FF2)

100	CONTINUE
C	--------------
	NPM(1:2) = [NP1,NELE]  !!!
	NPI(1:2) = [NP1,IEL ]
      NDXP = NDEX(NPM,NPI,2,'INDXN')
	DO I = 1,NOUT
	  VALV = EDAT(I)
        AP1(NDXP+I     -1) = VALV  !POSITIVE
        AP1(NDXP+I+NOUT-1) = VALV  !NEGATIVE
	ENDDO				
C	--------------

C      WRITE(NFLI,REC=IEL) IAX
C      WRITE(NFLR,REC=IEL) AAX
      
C	------------------------------------
5100	CONTINUE
C	------------------------------------

	REWIND(NPL1)
	WRITE(NPL1) AP1

	DEALLOCATE(IAX,AAX)
	DEALLOCATE(RL,IF3,FIX,AF8,AF9,IGIDM)
	DEALLOCATE(AP1,EDAT)

	

	RETURN

	END


C	=======================================================================
C	=== CONSTRUCTION ANALYSIS ===SONGSAK JAN2008 ===LOAD COMBINATION ======
C	=======================================================================
      SUBROUTINE CSALOCFM(IEG,IC)
	IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER*4 (I-N)     
C	ELEMENT FORCE LOAD COMBINATION
C	=======================================================================
	DIMENSION NPM(10),NPI(10)
	ALLOCATABLE IF3(:),AF6(:),AF8(:),AF9(:),FIX(:),RL(:),IGIDM(:)
	ALLOCATABLE IAX(:),AAX(:)

	ALLOCATABLE AP1(:),EDAT(:)

C	STRESS PRINTING 
	MAXST = 12
	NUMX  = 7 + MAXST

	CALL INTFILL('%GRP',ITYPE,1 ,IEG,0) !
	CALL INTFILL('%GRP',ISTYP,2 ,IEG,0) !
	CALL INTFILL('%GRP',NELE ,3 ,IEG,0) !
	CALL INTFILL('%GRP',MPRT ,4 ,IEG,0) ! MAXP
	CALL INTFILL('%GRP',NEF  ,7 ,IEG,0) !
	CALL INTFILL('%GRP',NNM  ,8 ,IEG,0) !
	CALL INTFILL('%GRP',NNF  ,9 ,IEG,0) !

	CALL INTFILL('%GRF',N3   ,3 ,IEG,0) !
	CALL INTFILL('%GRF',N6   ,6 ,IEG,0) !
	CALL INTFILL('%GRF',N8   ,8 ,IEG,0) !
	CALL INTFILL('%GRF',N9   ,9 ,IEG,0) !

	CALL INTFILL('%GRF',NDX3 ,13,IEG,0) !
	CALL INTFILL('%GRF',NDX6 ,16,IEG,0) !
	CALL INTFILL('%GRF',NDX8 ,18,IEG,0) !
	CALL INTFILL('%GRF',NDX9 ,19,IEG,0) !
	
	CALL INTFILL('%GRF',NFLI ,21,IEG,0) !
	CALL INTFILL('%GRF',NFLR ,22,IEG,0) !
	
	CALL INTFILL('%GRF',LASI ,23,IEG,0) !
	CALL INTFILL('%GRF',LASR ,24,IEG,0) !


	ALLOCATE(RL(NEF),FIX(NEF),IGIDM(NELE))
	ALLOCATE(IF3(N3),AF6(N6),AF8(N8),AF9(N9))

	ALLOCATE(IAX(LASI),AAX(LASR))


	CALL INTFILL('OGRP',NOUT  ,12,IEG,0) !
	CALL INTFILL('OGRP',LENGTH,17,IEG,0) !
	CALL INTFILL('OGRF',NP1   ,1 ,IEG,0) !
	CALL INTFILL('OGRF',NPL1  ,11,IEG,0) !
	CALL INTFILL('FRMP',NP_SMH,1 ,IEG,0)
	CALL INTFILL('FRMP',MST   ,2 ,IEG,0)   !NUMBER OF MAXIMUM STRESS POINT
	CALL INTFILL('FRMP',MFC   ,3 ,IEG,0)   !NUMBER OF MAXIMUM FORCE COMPONENT
	ALLOCATE(AP1(NP1*NELE),EDAT(NOUT))

	REWIND(NPL1)
	READ(NPL1) AP1
	
	IGIDM(1:NELE) = 0
C	------------------------------------
C	LOOP OVER ELEMENT
C	------------------------------------
	DO 5100 IEL = 1,NELE

      READ(NFLI,REC=NELE+IEL,ERR=5) IXIST !READ EXISTING FLAG TO LAST RECORD OF ELEMENT INTEGER DATA (INCREASE THE SPEED PURPOSE)
      GOTO 6
5     IXIST = 0
6     IF(IXIST.LE.0) GOTO 5100

      READ(NFLI,REC=IEL) IAX
      READ(NFLR,REC=IEL) AAX
      
	EDAT(1:NOUT) = 0.0D0

	NPM(1) = N3
	NPI(1) = N3
	CALL CALLINTG(IF3,IAX,NDX3,NPM,NPI,1,'READ')   

	IGIDM(IEL) = IF3(1)
	IXIST = IF3(4)
	IF(IXIST.EQ.0) GOTO 5100

	NPM(1) = N6
	NPI(1) = N6
	CALL CALLREAL(AF6,AAX,NDX6,NPM,NPI,1,'READ')
	NPM(1) = N8
	NPI(1) = N8
	CALL CALLREAL(AF8,AAX,NDX8,NPM,NPI,1,'READ')     
	NPM(1) = N9
	NPI(1) = N9
	CALL CALLREAL(AF9,AAX,NDX9,NPM,NPI,1,'READ')     


	NNN = IC-1
	NUM1 = 1   + NEF*NNN
	NUM2 = NEF + NEF*NNN
	FIX(1:NEF) = AF8(NUM1:NUM2)              !FIXEND LOAD
	NUM1 = 1   + NEF*NNN
	NUM2 = NEF + NEF*NNN
	RL(1:NEF)  = AF9(NUM1:NUM2)-FIX(1:NEF)   !INTERNAL LOAD


	EDAT = 0.0D0
	DO IN = 1,2+NP_SMH
	FAC = 1.0D0*(IN-1)/(2+NP_SMH-1)
	H1 = 1.0D0-FAC
	H2 = FAC
	NUM = NUMX*(IN-1)

	DO I = 1,7
	EDAT(NUM+I) = -H1*RL(I) + H2*RL(I+7)
	ENDDO

C     TRANSFORM TO CENTROID
      NIJ = IN
	CALL XFSECTION(IEG,IEL,NIJ)
	CALL CENFORCE(EDAT(1+NUM),IEG)
	
	
	NNN = IC-1
	IPRT = 1       !PRINT FOR PART 1 **********
	DO IST = 1,12  !STRESS
	NIJ = 1
	INDEX = IST+MAXST*(NIJ-1)+MAXST*2*(IPRT-1)+MAXST*2*MPRT*NNN
	CALL RELFILL('+FCS',STSI,INDEX,IEL,0)   
	NIJ = 2
	INDEX = IST+MAXST*(NIJ-1)+MAXST*2*(IPRT-1)+MAXST*2*MPRT*NNN
	CALL RELFILL('+FCS',STSJ,INDEX,IEL,0)   
	EDAT(NUM+MFC+IST) = -H1*STSI + H2*STSJ
	ENDDO
		
	ENDDO

100	CONTINUE
C	--------------
	NPM(1:2) = [NP1,NELE]  !!!
	NPI(1:2) = [NP1,IEL ]
      NDXP = NDEX(NPM,NPI,2,'INDXN')
	DO I = 1,NOUT
	  VALV = EDAT(I)
        AP1(NDXP+I     -1) = VALV  !POSITIVE
        AP1(NDXP+I+NOUT-1) = VALV  !NEGATIVE
	ENDDO			
C	--------------

C      WRITE(NFLI,REC=IEL) IAX
C      WRITE(NFLR,REC=IEL) AAX

C	------------------------------------
5100	CONTINUE
C	------------------------------------

	REWIND(NPL1)
	WRITE(NPL1) AP1
	
	
	DEALLOCATE(IAX,AAX)
	DEALLOCATE(RL,IF3,AF6,FIX,AF8,AF9,IGIDM)
	DEALLOCATE(AP1,EDAT)


	

	RETURN

	END


C	=======================================================================
C	=== CONSTRUCTION ANALYSIS ===SONGSAK JAN2008 ===LOAD COMBINATION ======
C	=======================================================================
	SUBROUTINE CSALOCSH(IEG,IC)
	IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER*4 (I-N)     
C	ELEMENT FORCE LOAD COMBINATION
C	=======================================================================
	DIMENSION NPM(10),NPI(10),NPOGS(9)
	DIMENSION LAYR(3),SCP(5),SIG(6),VR(3),VS(3),VT(3)
	DIMENSION VRN(3),VSN(3),VTN(3),SIGT(8)
	DIMENSION GPSO(2,9),H(9),HD(2,9)
	ALLOCATABLE IF3(:),AF5(:),AF7(:),SIGR(:),IGIDM(:)
	ALLOCATABLE IAX(:),AAX(:)

	ALLOCATABLE AP1(:),EDAT(:)
	ALLOCATABLE NODEX(:),EGMAT(:,:),EXMAT(:,:),EXMATI(:,:),
	1SGVEC(:,:),STVEC(:,:)

	CALL INTFILL('%GRP',ITYPE,1 ,IEG,0) !
	CALL INTFILL('%GRP',ISTYP,2 ,IEG,0) !
	CALL INTFILL('%GRP',NELE ,3 ,IEG,0) !
	CALL INTFILL('%GRP',MPRT ,4 ,IEG,0) ! MAXP
	CALL INTFILL('%GRP',MFIB ,6 ,IEG,0) !
	CALL INTFILL('%GRP',NEF  ,7 ,IEG,0) !
	CALL INTFILL('%GRP',NNM  ,8 ,IEG,0) !
	CALL INTFILL('%GRP',NNF  ,9 ,IEG,0) !

	CALL INTFILL('%GRP',MGAS ,5 ,IEG,0) !
	CALL INTFILL('%GRP',NGR  ,10,IEG,0) !
	CALL INTFILL('%GRP',NGS  ,11,IEG,0) !
	CALL INTFILL('%GRP',NGT  ,12,IEG,0) !

	CALL INTFILL('%GRF',N3   ,3 ,IEG,0) !
	CALL INTFILL('%GRF',N5   ,5 ,IEG,0) !
	CALL INTFILL('%GRF',N7   ,7 ,IEG,0) !

	CALL INTFILL('%GRF',NDX3 ,13,IEG,0) !
	CALL INTFILL('%GRF',NDX5 ,15,IEG,0) !
	CALL INTFILL('%GRF',NDX7 ,17,IEG,0) !
	
	CALL INTFILL('%GRF',NFLI ,21,IEG,0) !
	CALL INTFILL('%GRF',NFLR ,22,IEG,0) !
	
	CALL INTFILL('%GRF',LASI ,23,IEG,0) !
	CALL INTFILL('%GRF',LASR ,24,IEG,0) !

	NOEX = NNM - 4 + 1
	ALLOCATE(NODEX(NOEX),EGMAT(MGAS,NNM),EXMAT(NNM,NNM),EXMATI(NNM,NNM))
	ALLOCATE(IAX(LASI),AAX(LASR))
	

      SELECTCASE(ISTYP)
      CASE(1)   !4 ANS
	NPOGS(1:4) = [4,2,1,3]
	 GPSO(1:2,1) = [-0.57735026918963,-0.57735026918963]
	 GPSO(1:2,2) = [-0.57735026918963,+0.57735026918963]
	 GPSO(1:2,3) = [+0.57735026918963,-0.57735026918963]
	 GPSO(1:2,4) = [+0.57735026918963,+0.57735026918963]
      CASE(3)   !8 ANS
	NPOGS(1:9) = [9,3,1,7,6,2,4,8,5]
	 GPSO(1:2,1) = [-0.77459666924148,-0.77459666924148]
	 GPSO(1:2,2) = [-0.77459666924148, 0.00000000000000]
	 GPSO(1:2,3) = [-0.77459666924148,+0.77459666924148]
	 GPSO(1:2,4) = [ 0.00000000000000,-0.77459666924148]
	 GPSO(1:2,5) = [ 0.00000000000000, 0.00000000000000]
	 GPSO(1:2,6) = [ 0.00000000000000,+0.77459666924148]
	 GPSO(1:2,7) = [+0.77459666924148,-0.77459666924148]
	 GPSO(1:2,8) = [+0.77459666924148, 0.00000000000000]
	 GPSO(1:2,9) = [+0.77459666924148,+0.77459666924148]
      CASE(4)   !4 QSI
	NPOGS(1:4) = [1,2,3,4]
	 GPSO(1:2,1) = [+1.0D0,+1.0D0]
	 GPSO(1:2,2) = [-1.0D0,+1.0D0]
	 GPSO(1:2,3) = [-1.0D0,-1.0D0]
	 GPSO(1:2,4) = [+1.0D0,-1.0D0]
      CASE(11)  !3 QSI
	NPOGS(1:3) = [1,2,3]
	 GPSO(1:2,1) = [ 0.0D0, 0.0D0]
	 GPSO(1:2,2) = [+1.0D0, 0.0D0]
	 GPSO(1:2,3) = [ 0.0D0,+1.0D0]
      CASE(12)  !9 ANS
	NPOGS(1:9) = [9,3,1,7,6,2,4,8,5]
	 GPSO(1:2,1) = [-0.77459666924148,-0.77459666924148]
	 GPSO(1:2,2) = [-0.77459666924148, 0.00000000000000]
	 GPSO(1:2,3) = [-0.77459666924148,+0.77459666924148]
	 GPSO(1:2,4) = [ 0.00000000000000,-0.77459666924148]
	 GPSO(1:2,5) = [ 0.00000000000000, 0.00000000000000]
	 GPSO(1:2,6) = [ 0.00000000000000,+0.77459666924148]
	 GPSO(1:2,7) = [+0.77459666924148,-0.77459666924148]
	 GPSO(1:2,8) = [+0.77459666924148, 0.00000000000000]
	 GPSO(1:2,9) = [+0.77459666924148,+0.77459666924148]
	ENDSELECT


	ALLOCATE(SIGR(8),IF3(N3),AF5(N5),AF7(N7),IGIDM(NELE))


	CALL INTFILL('OGRP',NOUT  ,12,IEG,0) !
	CALL INTFILL('OGRP',LENGTH,17,IEG,0) !
	CALL INTFILL('OGRF',NP1   ,1 ,IEG,0) !
	CALL INTFILL('OGRF',NPL1  ,11,IEG,0) !
	ALLOCATE(AP1(NP1*NELE),EDAT(NOUT))
	
	REWIND(NPL1)
	READ(NPL1) AP1
	
	ALLOCATE(SGVEC(MGAS,LENGTH),STVEC(NNM,LENGTH))

	IGIDM(1:NELE) = 0
C	------------------------------------
C	LOOP OVER ELEMENT
C	------------------------------------
	DO 5100 IEL = 1,NELE

      READ(NFLI,REC=NELE+IEL,ERR=5) IXIST !READ EXISTING FLAG TO LAST RECORD OF ELEMENT INTEGER DATA (INCREASE THE SPEED PURPOSE)
      GOTO 6
5     IXIST = 0
6     IF(IXIST.LE.0) GOTO 5100

      READ(NFLI,REC=IEL) IAX
      READ(NFLR,REC=IEL) AAX
      
	EDAT(1:NOUT) = 0.0D0

	NPM(1) = N3
	NPI(1) = N3
	CALL CALLINTG(IF3,IAX,NDX3,NPM,NPI,1,'READ')  

	IGIDM(IEL) = IF3(1)
	IXIST = IF3(4)


	IF(IXIST.EQ.0) GOTO 5100

	ISEC = IF3(2)     !SECTION SET
	CALL RELFILL('$SSC',FLAY,4,ISEC,0)           !NUMBER OF LAYER FOR THIS PART (ONLY 1 PART FOR SHELL)
	CALL RELFILL('$SSC',SRTO,5,ISEC,0)           !STEEL RATIO
	IF(SRTO.GT.0.0D0) FLAY = FLAY/2  !!
	NLAY = INT(FLAY)


	IPT = 0
      DO 400 IGR = 1,NGR
      DO 400 IGS = 1,NGS
	IPT = IPT + 1

	NPM(1:2) = [N7,MGAS      ]
	NPI(1:2) = [N7,NPOGS(IPT)]
	CALL CALLREAL(AF7,AAX,NDX7,NPM,NPI,2,'READ')  
	N7_R = 1			!POINTER OF RIGIDITY
	N7_S = 1 + 40       !POINTER OF MECHANICAL STRESS
	N7_N = 1 + 40 + 8   !POINTER OF NON-MECHANICAL STRESS   

	N7_V = 1 + 40 + 8 + 8

	VR(1:3) = AF7(N7_V+0:N7_V+2) 
	VS(1:3) = AF7(N7_V+3:N7_V+5)  
	VT(1:3) = AF7(N7_V+6:N7_V+8) 

	VRN(1:3) = AF7(N7_V+9 :N7_V+11)
	VSN(1:3) = AF7(N7_V+12:N7_V+14)
	VTN(1:3) = AF7(N7_V+15:N7_V+17)

	DO I = 1,8
	SIGR(I) = AF7(I+N7_S-1)  !MECHA
	ENDDO

C     --------------------------------
C     EXTRAPOLATE STRESS TO NODES OF SHELL
C     --------------------------------
      RI = GPSO(1,NPOGS(IPT))
      SI = GPSO(2,NPOGS(IPT))
      
      SELECTCASE(ISTYP)
      CASE(1)   !4 ANS
      CALL SHAP2D (RI,SI,H,HD,NODEX,NNM)
      CASE(3)   !8 ANS
      CALL SHAP2D (RI,SI,H,HD,NODEX,NNM)
      CASE(4)   !4 QSI
      CALL SHAP2D (RI,SI,H,HD,NODEX,NNM)
      CASE(11)  !3 QSI
	CALL SHAP2D3(RI,SI,H,HD,NNM)
      CASE(12)  !9 ANS
	CALL SHAP2D9(RI,SI,H,HD,NODEX,NNM)
	ENDSELECT
	
      EGMAT(IPT,1:NNM) = H(1:NNM)
C     --------------------------------
      
C	--------------------------------
C	CALL HERE JAN09 LOADCOMB
C	--------------------------------
	IF(IC.EQ.9) THEN !FOR CREEP SECONDARY

	N7 = NPM(1)
C	CREEP&SHRINKAGE TOTAL STRESS RESULTANT (PRIMARY+SECONDARY)
	MS1_P = N7 - 8*11 + 8*(IC-1) + 1
	MS2_P = N7 - 8*11 + 8*(IC-1) + 8
C	CREEP&SHRINKAGE TOTAL STRESS RESULTANT (PRIMARY)
	MS1_PP = N7 - 8*11 + 8*(8-1) + 1
	MS2_PP = N7 - 8*11 + 8*(8-1) + 8
	
	SIGR(1:8) = AF7(MS1_P:MS2_P) - AF7(MS1_PP:MS2_PP)		!CALL THE STRESS RESULTANT HERE FOR LOAD COMBINATION

C	--------------------------------
	ELSEIF(IC.EQ.10) THEN !TOTAL LOAD CASE
	
	DO I = 1,8
	SIGR(I) = AF7(I+N7_S-1)  !MECHA
	ENDDO
	
C	--------------------------------
      ELSE !FOR OTHER LOAD CASE
      
	N7 = NPM(1)
C	PREVIOUS
	MS1_P = N7 - 8*11 + 8*(IC-1) + 1
	MS2_P = N7 - 8*11 + 8*(IC-1) + 8

	SIGR(1:8) = AF7(MS1_P:MS2_P)		!CALL THE STRESS RESULTANT HERE FOR LOAD COMBINATION

	ENDIF
C	--------------------------------
      

	CALL STNRLAX (VR,VS,VT,VRN,VSN,VTN,SIGR,SIGT)

	NUM = (8+6*3)*(IPT-1)
	EDAT(NUM + 1) = SIGT(1)  !M
	EDAT(NUM + 2) = SIGT(2)
	EDAT(NUM + 3) = SIGT(3)  !B
	EDAT(NUM + 4) = SIGT(4)
	EDAT(NUM + 5) = SIGT(5)
	EDAT(NUM + 6) = SIGT(6)  !S
	EDAT(NUM + 7) = SIGT(7)
	EDAT(NUM + 8) = SIGT(8)

      SGVEC(IPT,1:8) = SIGT(1:8)    !FOR EXTRAPOLATION
      
C	--------------
	MIDL = INT(FLAY/2.0)+1
	LAYR(1:3) = [NLAY,MIDL,1]
	DO IFI = 1,3
	IFIB = LAYR(IFI)
	IPRT = 1
	NPM(1:4) = [N5,MFIB,MGAS      ,MPRT]
	NPI(1:4) = [N5,IFIB,NPOGS(IPT),IPRT]   
	CALL CALLREAL(AF5,AAX,NDX5,NPM,NPI,4,'READ')    !CALLING DATA OF THIS FIBER

	SCP(1:5) = AF5(21:25)     !OLD STRESS
	SIG(1:2) = SCP(1:2)
	SIG(3)   = 0.0D0
	SIG(4:6) = SCP(3:5)

C	--------------------------------
C	CALL HERE JAN09 LOADCOMB
C	--------------------------------
	IF(IC.EQ.9) THEN !FOR CREEP SECONDARY

	N5 = NPM(1)
C	CREEP&SHRINKAGE TOTAL FIBER STRESS (PRIMARY+SECONDARY)
	MS1_P = N5 - 5*11 + 5*(IC-1) + 1
	MS2_P = N5 - 5*11 + 5*(IC-1) + 5
C	CREEP&SHRINKAGE TOTAL FIBER STRESS (PRIMARY)
	MS1_PP = N5 - 5*11 + 5*(8-1) + 1
	MS2_PP = N5 - 5*11 + 5*(8-1) + 5

	SCP(1:5) = AF5(MS1_P:MS2_P) - AF5(MS1_PP:MS2_PP)				  !CALL THE STRESS HERE FOR LOAD COMBINATION
	SIG(1:2) = SCP(1:2)
	SIG(3)   = 0.0D0
	SIG(4:6) = SCP(3:5)

C	--------------------------------
	ELSEIF(IC.EQ.10) THEN !TOTAL LOAD CASE
	
	SCP(1:5) = AF5(21:25)     !OLD STRESS
	SIG(1:2) = SCP(1:2)
	SIG(3)   = 0.0D0
	SIG(4:6) = SCP(3:5)
	
C	--------------------------------
      ELSE !FOR OTHER LOAD CASE

	N5 = NPM(1)
C	PREVIOUS
	MS1_P = N5 - 5*11 + 5*(IC-1) + 1
	MS2_P = N5 - 5*11 + 5*(IC-1) + 5

	SCP(1:5) = AF5(MS1_P:MS2_P)				  !CALL THE STRESS HERE FOR LOAD COMBINATION
	SIG(1:2) = SCP(1:2)
	SIG(3)   = 0.0D0
	SIG(4:6) = SCP(3:5)

	ENDIF
C	--------------------------------

	CALL STNFLAX (VR,VS,VT,VRN,VSN,VTN,SIG,SIGT)

	NUM = (8+6*3)*(IPT-1)
	EDAT(NUM + 8 + 6*IFI - 5) = SIGT(1)
	EDAT(NUM + 8 + 6*IFI - 4) = SIGT(2)
	EDAT(NUM + 8 + 6*IFI - 3) = SIGT(3)
	EDAT(NUM + 8 + 6*IFI - 2) = SIGT(4)
	EDAT(NUM + 8 + 6*IFI - 1) = SIGT(5)
	EDAT(NUM + 8 + 6*IFI - 0) = SIGT(6)
	
      SGVEC(IPT,8+6*(IFI-1)+1:8+6*(IFI-1)+6) = SIGT(1:6)    !FOR EXTRAPOLATION
      
	ENDDO
C	--------------	
		
400	CONTINUE

C     --------------------------------
C     EXTRAPOLATE STRESS TO NODES OF SHELL
C     --------------------------------
      EXMAT = MATMUL(TRANSPOSE(EGMAT),EGMAT)
	CALL INVMATRIX(EXMAT,EXMATI,NNM)
	STVEC = MATMUL(EXMATI,MATMUL(TRANSPOSE(EGMAT),SGVEC))
	DO INM = 1,NNM
	    NUM = (LENGTH)*(MGAS) + (LENGTH)*(INM-1)
	    EDAT(NUM + 1:NUM + LENGTH) = STVEC(INM,1:LENGTH) 
	ENDDO
C     --------------------------------

C	--------------
	NPM(1:2) = [NP1,NELE]  !!!
	NPI(1:2) = [NP1,IEL ]
      NDXP = NDEX(NPM,NPI,2,'INDXN')
	DO I = 1,NOUT
	  VALV = EDAT(I)
        AP1(NDXP+I     -1) = VALV  !POSITIVE
        AP1(NDXP+I+NOUT-1) = VALV  !NEGATIVE
	ENDDO		
C	--------------

C      WRITE(NFLI,REC=IEL) IAX
C      WRITE(NFLR,REC=IEL) AAX

C	------------------------------------
5100	CONTINUE
C	------------------------------------

      

	REWIND(NPL1)
	WRITE(NPL1) AP1	

	DEALLOCATE(IAX,AAX)
	DEALLOCATE(SIGR,IF3,AF5,AF7,IGIDM)
	DEALLOCATE(AP1,EDAT)
	DEALLOCATE(NODEX,EXMAT,EXMATI,STVEC,EGMAT,SGVEC)


	

	RETURN

	END


C	=======================================================================
C	=== CONSTRUCTION ANALYSIS ===SONGSAK JAN2008 ===LOAD COMBINATION ======
C	=======================================================================
	SUBROUTINE CSALOCSO(IEG,IC)
	IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER*4 (I-N)     
C	ELEMENT FORCE LOAD COMBINATION
C	=======================================================================
	DIMENSION NPM(10),NPI(10),NPOGS(27),SIG(6)
	!DIMENSION LAYR(3),SCP(5),SIG(6),VR(3),VS(3),VT(3)
	!DIMENSION VRN(3),VSN(3),VTN(3),SIGT(6)
	!DIMENSION GPSO(3,8),H(21),HD(3,21)
	DIMENSION GPSO(3,27),H(27),HD(3,27)
	
	ALLOCATABLE IF3(:),AF5(:),AF7(:),SIGR(:),IGIDM(:)
	ALLOCATABLE IAX(:),AAX(:)

	ALLOCATABLE AP1(:),EDAT(:)
	ALLOCATABLE NODEX(:),EGMAT(:,:),EXMAT(:,:),EXMATI(:,:),
	1            SGVEC(:,:),STVEC(:,:)

	CALL INTFILL('%GRP',ITYPE,1 ,IEG,0) !
	CALL INTFILL('%GRP',ISTYP,2 ,IEG,0) !
	CALL INTFILL('%GRP',NELE ,3 ,IEG,0) !
	CALL INTFILL('%GRP',MPRT ,4 ,IEG,0) ! MAXP
	CALL INTFILL('%GRP',MFIB ,6 ,IEG,0) !
	CALL INTFILL('%GRP',NEF  ,7 ,IEG,0) !
	CALL INTFILL('%GRP',NNM  ,8 ,IEG,0) !
	CALL INTFILL('%GRP',NNF  ,9 ,IEG,0) !

	CALL INTFILL('%GRP',MGAS ,5 ,IEG,0) !
	CALL INTFILL('%GRP',NGR  ,10,IEG,0) !
	CALL INTFILL('%GRP',NGS  ,11,IEG,0) !
	CALL INTFILL('%GRP',NGT  ,12,IEG,0) !

	CALL INTFILL('%GRF',N3   ,3 ,IEG,0) !
	CALL INTFILL('%GRF',N5   ,5 ,IEG,0) !
	CALL INTFILL('%GRF',N7   ,7 ,IEG,0) !

	CALL INTFILL('%GRF',NDX3 ,13,IEG,0) !
	CALL INTFILL('%GRF',NDX5 ,15,IEG,0) !
	CALL INTFILL('%GRF',NDX7 ,17,IEG,0) !
	
	CALL INTFILL('%GRF',NFLI ,21,IEG,0) !
	CALL INTFILL('%GRF',NFLR ,22,IEG,0) !
	
	CALL INTFILL('%GRF',LASI ,23,IEG,0) !
	CALL INTFILL('%GRF',LASR ,24,IEG,0) !

	NOEX = NNM - 8 + 1
	ALLOCATE(NODEX(NOEX),EGMAT(MGAS,NNM),EXMAT(NNM,NNM),EXMATI(NNM,NNM))
	ALLOCATE(IAX(LASI),AAX(LASR))
	

      SELECTCASE(ISTYP)
      CASE(1,6,8)   !8 NODE HEXA
	NPOGS(1:8) = [7,3,1,5,8,4,2,6]
	 GPSO(1:3,1) = [-0.57735026918963,-0.57735026918963,-0.57735026918963]
	 GPSO(1:3,2) = [-0.57735026918963,-0.57735026918963,+0.57735026918963]
	 GPSO(1:3,3) = [-0.57735026918963,+0.57735026918963,-0.57735026918963]
	 GPSO(1:3,4) = [-0.57735026918963,+0.57735026918963,+0.57735026918963]
	 GPSO(1:3,5) = [+0.57735026918963,-0.57735026918963,-0.57735026918963]
	 GPSO(1:3,6) = [+0.57735026918963,-0.57735026918963,+0.57735026918963]
	 GPSO(1:3,7) = [+0.57735026918963,+0.57735026918963,-0.57735026918963]
	 GPSO(1:3,8) = [+0.57735026918963,+0.57735026918963,+0.57735026918963]
      CASE(13)    !3 NODE AND 10 NODE TETRA
	NPOGS(1:4) = [2,1,4,3]
      IND = 1 !FOR SOLID ELEM
	DO IPT = 1,NPT
	CALL GAUSST (GPSO(1,IPT),GPSO(2,IPT),GPSO(3,IPT),W,IPT,NPT,IND)
	ENDDO
	CASE DEFAULT
	RETURN
	ENDSELECT

	ALLOCATE(SIGR(6),IF3(N3),AF5(N5),AF7(N7),IGIDM(NELE))

	CALL INTFILL('OGRP',NOUT  ,12,IEG,0) !
	CALL INTFILL('OGRP',LENGTH,17,IEG,0) !
	CALL INTFILL('OGRF',NP1   ,1 ,IEG,0) !
	CALL INTFILL('OGRF',NPL1  ,11,IEG,0) !
	ALLOCATE(AP1(NP1*NELE),EDAT(NOUT))
	
	REWIND(NPL1)
	READ(NPL1) AP1
	
	ALLOCATE(SGVEC(MGAS,LENGTH),STVEC(NNM,LENGTH))

	IGIDM(1:NELE) = 0
C	------------------------------------
C	LOOP OVER ELEMENT
C	------------------------------------
	DO 5100 IEL = 1,NELE

      READ(NFLI,REC=NELE+IEL,ERR=5) IXIST !READ EXISTING FLAG TO LAST RECORD OF ELEMENT INTEGER DATA (INCREASE THE SPEED PURPOSE)
      GOTO 6
5     IXIST = 0
6     IF(IXIST.LE.0) GOTO 5100

      READ(NFLI,REC=IEL) IAX
      READ(NFLR,REC=IEL) AAX
      
	EDAT(1:NOUT) = 0.0D0

C	------------------------------------
	NPM(1) = N3
	NPI(1) = N3
	CALL CALLINTG(IF3,IAX,NDX3,NPM,NPI,1,'READ') 
	IGIDM(IEL) = IF3(1)
	IXIST = IF3(4)
C	------------------------------------

	IF(IXIST.EQ.0) GOTO 5100

C	------------------------------------	
	IPT = 0
      DO 400 IGR = 1,NGR
      DO 400 IGS = 1,NGS
      DO 400 IGT = 1,NGT
	IPT = IPT + 1

C     --------------------------------
C     EXTRAPOLATE STRESS TO NODES OF SHELL
C     --------------------------------
      RI = GPSO(1,NPOGS(IPT))
      SI = GPSO(2,NPOGS(IPT))
      TI = GPSO(3,NPOGS(IPT))
      
      SELECTCASE(ISTYP)
      CASE(6,8)   !8 NODE HEXA
      CALL SHAP3D (RI,SI,TI,H,HD,NODEX,NNM)
      CASE(13)    !3 NODE AND 10 NODE TETRA
      CALL SHAP3DT(RI,SI,TI,H,HD,NNM)
	ENDSELECT
	
      EGMAT(IPT,1:NNM) = H(1:NNM)
C     --------------------------------
 
	NPM(1:2) = [N7,MGAS      ]
	NPI(1:2) = [N7,NPOGS(IPT)]
	CALL CALLREAL(AF7,AAX,NDX7,NPM,NPI,2,'READ')  
	N7_R = 1            !POINTER OF RIGIDITY
	N7_S = 1 + 12       !POINTER OF MECHANICAL STRESS (6 STRESSES)
	N7_N = 1 + 12 + 6   !POINTER OF NON-MECHANICAL STRESS (6 STRESSES)

C	--------------------------------
C	CALL HERE JAN09 LOADCOMB
C	--------------------------------
	IF(IC.EQ.9) THEN !FOR CREEP SECONDARY

C	CREEP&SHRINKAGE TOTAL FIBER STRESS (PRIMARY+SECONDARY)
	MS1_P = N7 - 6*11 + 6*(IC-1) + 1
	MS2_P = N7 - 6*11 + 6*(IC-1) + 6
C	CREEP&SHRINKAGE TOTAL FIBER STRESS (PRIMARY)
	MS1_PP = N7 - 6*11 + 6*(8-1) + 1
	MS2_PP = N7 - 6*11 + 6*(8-1) + 6

	SIGR(1:6) = AF7(MS1_P:MS2_P) - AF7(MS1_PP:MS2_PP)				  !CALL THE STRESS HERE FOR LOAD COMBINATION

C	--------------------------------
	ELSEIF(IC.EQ.10) THEN !TOTAL LOAD CASE
	
	DO I = 1,6
	SIGR(I) = AF7(I+N7_S-1)  !MECHANICAL STRESS (6 STRESSES)
	ENDDO	
	
C	--------------------------------
      ELSE !FOR OTHER LOAD CASE

C	PREVIOUS
	MS1_P = N7 - 6*11 + 6*(IC-1) + 1
	MS2_P = N7 - 6*11 + 6*(IC-1) + 6

	SIGR(1:6) = AF7(MS1_P:MS2_P)				  !CALL THE STRESS HERE FOR LOAD COMBINATION

	ENDIF
C	--------------------------------


C     --------------------------------
      CALL POSVMS(SIGR,VMISE)
      NUM = LENGTH*(IPT-1)
	EDAT(NUM + 1) = SIGR(1)  
	EDAT(NUM + 2) = SIGR(2)  
	EDAT(NUM + 3) = SIGR(3)  
	EDAT(NUM + 4) = SIGR(4)  
	EDAT(NUM + 5) = SIGR(5)  
	EDAT(NUM + 6) = SIGR(6)  
	EDAT(NUM + 7) = VMISE
	
      SGVEC(IPT,1:6) = SIGR(1:6)    !FOR EXTRAPOLATION
      SGVEC(IPT,7  ) = VMISE       !FOR EXTRAPOLATION 	
		
400	CONTINUE
C	------------------------------------

C     --------------------------------
C     EXTRAPOLATE STRESS TO NODES OF SHELL
C     --------------------------------
      EXMAT = MATMUL(TRANSPOSE(EGMAT),EGMAT)
	CALL INVMATRIX(EXMAT,EXMATI,NNM)
	STVEC = MATMUL(EXMATI,MATMUL(TRANSPOSE(EGMAT),SGVEC))
	DO INM = 1,NNM
	    NUM = (LENGTH)*(MGAS) + (LENGTH)*(INM-1)
	    EDAT(NUM + 1:NUM + LENGTH) = STVEC(INM,1:LENGTH) 
	ENDDO
C     --------------------------------

C	--------------
	NPM(1:2) = [NP1,NELE]  !!!
	NPI(1:2) = [NP1,IEL ]
      NDXP = NDEX(NPM,NPI,2,'INDXN')
	DO I = 1,NOUT
	  VALV = EDAT(I)
        AP1(NDXP+I     -1) = VALV  !POSITIVE
        AP1(NDXP+I+NOUT-1) = VALV  !NEGATIVE
	ENDDO		
C	--------------

C      WRITE(NFLI,REC=IEL) IAX
C      WRITE(NFLR,REC=IEL) AAX

C	------------------------------------
5100	CONTINUE
C	------------------------------------      

      
	REWIND(NPL1)
	WRITE(NPL1) AP1	

	DEALLOCATE(IAX,AAX)
	DEALLOCATE(SIGR,IF3,AF5,AF7,IGIDM)
	DEALLOCATE(AP1,EDAT)
	DEALLOCATE(NODEX,EXMAT,EXMATI,STVEC,EGMAT,SGVEC)
	

	RETURN
	END


C	=======================================================================
C	=== CONSTRUCTION ANALYSIS ===SONGSAK JAN2008 ===LOAD COMBINATION ======
C	=======================================================================
      SUBROUTINE CSARCLC(IC)
	IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER*4 (I-N)     
	CHARACTER*1 NAME
C	REACTION COMBINATION
      DIMENSION NAME(4)	
	DIMENSION IDOF(9)
	ALLOCATABLE EDAT(:),EDAL(:),FM(:)

C	----------------------------------------
C	CALLING IDOF
C	----------------------------------------
	DO I = 1,9
	CALL INTFILL('%DOF',IDOF(I),1,I,0)
	ENDDO

	CALL LOCATN('OGSP',KSUPG,NOUT2,NOUT1,2)
	NOUT = NOUT2/2
		
	CALL LOCATN('OLSP',KSUPL,NOUL2,NOUL1,2)
	NOUL = NOUL2/2
	
	ALLOCATE(EDAT(NOUT),EDAL(NOUL))

	SELECTCASE(IC)
	CASE(1)
	NAME(1)  =  '@'
	NAME(2)  =  'R'
	NAME(3)  =  'D'
	NAME(4)  =  'D'
	CASE(2)
	NAME(1)  =  '@'
	NAME(2)  =  'R'
	NAME(3)  =  'T'
	NAME(4)  =  'V'
	CASE(3)
	NAME(1)  =  '@'
	NAME(2)  =  'R'
	NAME(3)  =  'S'
	NAME(4)  =  'T'
	CASE(4)
	NAME(1)  =  '@'
	NAME(2)  =  'R'
	NAME(3)  =  'T'
	NAME(4)  =  'M'
	CASE(5)
	NAME(1)  =  '@'
	NAME(2)  =  'R'
	NAME(3)  =  'C'
	NAME(4)  =  'T'
	CASE(6)
	NAME(1)  =  '@'
	NAME(2)  =  'R'
	NAME(3)  =  'T'
	NAME(4)  =  'P'
	CASE(7)
	NAME(1)  =  '@'
	NAME(2)  =  'R'
	NAME(3)  =  'T'
	NAME(4)  =  'S'
	CASE(8)
	NAME(1)  =  '@'
	NAME(2)  =  'R'
	NAME(3)  =  'C'
	NAME(4)  =  'P'
	CASE(9)
	NAME(1)  =  '@'
	NAME(2)  =  'R'
	NAME(3)  =  'C'
	NAME(4)  =  'S'
	CASE(10)
	NAME(1)  =  '-'
	NAME(2)  =  'R'
	NAME(3)  =  'A'
	NAME(4)  =  'C'
	ENDSELECT


	CALL INTFILL('%NUB',NSN,1,1,0) !CALLING NSN
	CALL INTFILL('%NUB',NSF,1,2,0) !CALLING NSF

	ALLOCATE(FM(NSF))
	
	DO 1000 ISN = 1,NSN
	EDAT(1:NOUT) = 0.0D0
	EDAL(1:NOUL) = 0.0D0

	DO ISF = 1,NSF
	CALL RELFILL(NAME,VALV,ISF,ISN,0)
	IDF = IDOF(ISF)
	EDAT(IDF) = VALV
	ENDDO

	DO I = 1,NOUT
	VALV = EDAT(I)
	NUM = I
	CALL RELFILL('OGSP',VALV,NUM,ISN,1)  !GLOBAL REACTION
	NUM = I+NOUT
	CALL RELFILL('OGSP',VALV,NUM,ISN,1)  !GLOBAL REACTION
	ENDDO

C     -----------------------------
C     CALCULATE FORCE IN LOCAL AXIS
	DO ISF = 1,NSF
	CALL RELFILL(NAME,FM(ISF),ISF,ISN,0)
	ENDDO
	CALL FORCLAX(ISN,FM,NSF,0)  !TRANSFORMATION TO LOCAL SUPPORT  BT*C
	
C	CHECK WHETHER NODE IS HAVE SUPPORT AND LOCAL AXIS OR NOT
	MCL  = 0
	DO ISF = 1,NSF
	  CALL INTFILL('$NBC',IAX,1,ISN,0)    !CALLING LAX SET
	  CALL INTFILL('$MBC',IBC,ISF,ISN,0)  !CALLING BOUNDARY CONDITION FLAG
	  IF(ISF.LE.6.AND.IBC.GT.0.AND.IAX.NE.0) THEN    !FOR LOCAL SUPPORT
	      MCL  = 1
	      EXIT
	  ENDIF
	ENDDO
C	----------------------------
	IF(MCL.EQ.1) THEN !FOR NODE WITH LOCAL AXIS AND SUPPORT COND.
	    DO ISF = 1,NSF
	    IDF = IDOF(ISF)
	    EDAL(IDF) = FM(ISF)
	    ENDDO
	    DO I = 1,NOUL
	    VALV = EDAL(I)
	    NUM = I
	    CALL RELFILL('OLSP',VALV,NUM,ISN,1)  !LOCAL REACTION
	    NUM = I+NOUL
	    CALL RELFILL('OLSP',VALV,NUM,ISN,1)  !LOCAL REACTION
	    ENDDO
	ENDIF
C	----------------------------

	
1000  CONTINUE


	DEALLOCATE(EDAT,EDAL,FM)

	RETURN

	END


C	=======================================================================
C	=== CONSTRUCTION ANALYSIS ===SONGSAK JAN2008 ===LOAD COMBINATION ======
C	=======================================================================
	SUBROUTINE CSALCLC
	IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER*4 (I-N)
C	-------------------------------------------------------------------
      COMMON /MGLENK/ NGLELM,NGLSET,LNKLEN,LNKWRK,LNKFRE,LEKNOD(5000) 
      COMMON /DTLENK/ DATLNK(50000),WATLNK(50000) 
C	-------------------------------------------------------------------	
	CHARACTER*1 NAME
C	LINK FORCE COMBINATION
      DIMENSION NAME(4)
	DIMENSION SIG(6)
	ALLOCATABLE EDAT(:)


	IF(NGLELM.EQ.0) RETURN


	CALL LOCATN('OLNK',KLNK,NOUT2,NOUT1,2)
	NOUT = NOUT2/2
	ALLOCATE(EDAT(NOUT))

	DO IELE = 1,NGLELM

	NUM = 3*(IELE-1)   
	IN1 = LEKNOD(1+NUM)
	IN2 = LEKNOD(2+NUM)

	EDAT(1) = FLOAT(IN1)  !I NODE NO.
	EDAT(2) = FLOAT(IN2)  !J NODE NO.

	DO J = 1,6
	EDAT(2+J) = 0.0D0 !!!!
	ENDDO

C	--------------
	DO I = 1,NOUT
	VALV = EDAT(I)
	NUM = I
	CALL RELFILL('OLNK',VALV,NUM,IELE,1)
	NUM = I+NOUT
	CALL RELFILL('OLNK',VALV,NUM,IELE,1)
	ENDDO			
C	--------------

	ENDDO

	DEALLOCATE(EDAT)



	RETURN
	END
C	=======================================================================
C	=== CONSTRUCTION ANALYSIS ===SONGSAK JAN2008 ===LOAD COMBINATION ======
C	=======================================================================
      SUBROUTINE DISSEP(VCOM,LNAME,NSF,NSN,NEQ,
	1				  KEQN,KGSF,KDIG,KLMA,KXDS,KLFO,KEIS)
	IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER*4 (I-N)

      COMMON /CONSTINT/ MTOTI(10),NCONI(5000),ICONDT(1)
      COMMON /CONSTREL/ MTOTR(10),NCONR(5000),RCONDT(1)


	DIMENSION VCOM(NEQ,1),LNAME(2,1)
	
	NSFN = NSF*NSN
	NSFN1= NSFN-1

	STOL  = 1.0E-6
	INDPD = 1  !FOR POSITIVE DEFINITE STIFFNESS


      
	DO 1000 NCOM = 1,9
	
	MCOM1 = LNAME(1,NCOM)  !TOTAL LOAD
	MCOM2 = LNAME(2,NCOM)  !TOTAL OLD INTERNAL LOAD
	
	IF(NCOM.EQ.6.OR.NCOM.EQ.8) GOTO 1000  !NOTHING FOR PRIMARY TENDON AND CREEP
      
      IF(NCOM.EQ.7) GOTO 500
      
	FACTOR =  1.0D0
	CALL LODUBL(ICONDT(KEQN),RCONDT(MCOM1),VCOM(1,NCOM),
	1			NSF,NSN,FACTOR) 
	
	
C	--------------------------------------------------
	IF(NCOM.EQ.2) THEN  !FOR TRAVELER

C	FOR TRAVELER ONLY
	CALL INTZERO('%SOL')
C	INTERNAL FORCE FROM MECHANICAL & NON-MECHANICAL STRAIN
	CALL RELZERO('-EIS')  !INITIALIZE TRAVELER LOAD
      CALL INTFILL('%SOL',2,1,1,1)
      CALL INTFILL('%SOL',4,1,3,1)
C	PERFORM ELEMENT COMMAND  
	CALL TRVLOOP

	FACTOR = -1.0D0
	CALL LODUBL(ICONDT(KEQN),RCONDT(KEIS),VCOM(1,NCOM),
	1			NSF,NSN,FACTOR) 

	ENDIF
C	--------------------------------------------------

C	--------------------------------------------------
500	IF(NCOM.EQ.7) THEN  !FOR TENDON

C	FOR TENDON ONLY
	CALL INTZERO('%SOL')
C	INTERNAL FORCE FROM MECHANICAL & NON-MECHANICAL STRAIN
	CALL RELZERO('-EIS')  !INITIALIZE TENDON LOAD
      CALL INTFILL('%SOL',2,1,1,1)
      CALL INTFILL('%SOL',4,1,3,1)
C	PERFORM ELEMENT COMMAND  
	CALL TEDCON

	FACTOR = -1.0D0
	CALL LODUBL(ICONDT(KEQN),RCONDT(KEIS),VCOM(1,NCOM),
	1			NSF,NSN,FACTOR) 

      MCOM2 = LNAME(2,6)
      
	ENDIF
C	--------------------------------------------------

C	--------------------------------------------------
	IF(NCOM.EQ.5) THEN  !REMOVE NONLINEAR EFFECT FROM CONSTRUCTION FORCE
	KNON = LNAME(2,10)  !TOTAL OLD INTERNAL LOAD
	FACTOR =  1.0D0
	CALL LODUBL(ICONDT(KEQN),RCONDT(KNON),VCOM(1,NCOM),
	1			NSF,NSN,FACTOR) 	
	ENDIF
C	--------------------------------------------------
	
	FACTOR = -1.0D0
	IF(NCOM.EQ.7) FACTOR =  1.0D0
	CALL LODUBL(ICONDT(KEQN),RCONDT(MCOM2),VCOM(1,NCOM),
	1			NSF,NSN,FACTOR) 

            
	CALL XCOLSOL(ICONDT(KLMA),RCONDT(KGSF),RCONDT(KDIG),VCOM(1,NCOM),
	1			 NEQ,2,INDPD,STOL,'TEMP','TEMP') 



1000	CONTINUE


	RETURN
	END
C	=======================================================================
C	=== CONSTRUCTION ANALYSIS ===SONGSAK JAN2008 ===LOAD COMBINATION ======
C	=======================================================================

      SUBROUTINE LCSCAL(VCOM,LNAME,NSF,NSN,NEQ,KEQN,KXDS,KLFO,KEIS)
	IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER*4 (I-N)

      COMMON /CONSTINT/ MTOTI(10),NCONI(5000),ICONDT(1)
      COMMON /CONSTREL/ MTOTR(10),NCONR(5000),RCONDT(1)


	DIMENSION VCOM(NEQ,1),LNAME(2,1),RENON(NSF*NSN),KCOM(9)
	
	NSFN = NSF*NSN
	NSFN1= NSFN-1

C	INCREMENTAL JOINT DISP.
	CALL DEFNREL ('@XXI',KXXI,NSF,NSN)   


C     --------------------------------------------------------------------------
C     ACCUMULATE THE EQUIVALENT FORCE FOR NONLINEAR EFFECT
      NCOM = 10
	MCOM1 = LNAME(1,NCOM)  !TOTAL LOAD
	MCOM2 = LNAME(2,NCOM)  !TOTAL OLD INTERNAL LOAD


	RCONDT(KXXI:KXXI+NSFN1) = RCONDT(KXDS:KXDS+NSFN1)             !MOVE TOTAL DISP TO TEMPORARY TO CALCULATE INTERNAL FORCE
	CALL DISACU(ICONDT(KEQN),RCONDT(KXXI),VCOM(1,NCOM),NSF,NSN)   !ADD INCREMENTAL DISP.

      IC = 0
      CALL INTFILL('@COM',IC,1,1,1)   !IC WILL BE USE TO STORE THE DATA FOR ELEMENT SYCH As STRESS (SEE ALSO In SHELL ELEMENT JAN09)

	CALL DEFREN('@XXI','$XDS',2)

	CALL INTZERO('%SOL')
C	INTERNAL FORCE FROM MECHANICAL & NON-MECHANICAL STRAIN
	CALL RELZERO('-EIS')  !INITIALIZE TENDON LOAD
      CALL INTFILL('%SOL',2,1,1,1)
      CALL INTFILL('%SOL',4,1,3,1)
C	PERFORM ELEMENT COMMAND  

	CALL GRLCON
	CALL TEDCON
	CALL LNKLOOP
	CALL TRVLOOP
	CALL SPIGCON

	CALL DEFREN('$XDS','@XXI',2)

	RCONDT(MCOM2:MCOM2+NSFN1) = RCONDT(MCOM2:MCOM2+NSFN1) + 
	1							  RCONDT( KEIS:KEIS +NSFN1) - 
	1							  RCONDT( KLFO:KLFO +NSFN1)           !UPDATE OLD INTERNAL FORCE

	
C     --------------------------------------------------------------------------
      KCOM(1:9) = [6,1,2,3,4,5,7,8,9]
      
	DO 1000 JCOM = 1,9
	
	NCOM = KCOM(JCOM)
	MCOM1 = LNAME(1,NCOM)  !TOTAL LOAD
	MCOM2 = LNAME(2,NCOM)  !TOTAL OLD INTERNAL LOAD


	RCONDT(KXXI:KXXI+NSFN1) = RCONDT(KXDS:KXDS+NSFN1)             !MOVE TOTAL DISP TO TEMPORARY TO CALCULATE INTERNAL FORCE
	CALL DISACU(ICONDT(KEQN),RCONDT(KXXI),VCOM(1,NCOM),NSF,NSN)   !ADD INCREMENTAL DISP.

	IF(NCOM.EQ.5) CALL DISACU(ICONDT(KEQN),RCONDT(KXXI),VCOM(1,10),NSF,NSN)   !ADD INCREMENTAL DISP.
	
      CALL INTFILL('@COM',NCOM,1,1,1)   !IC WILL BE USE TO STORE THE DATA FOR ELEMENT SYCH As STRESS (SEE ALSO In SHELL ELEMENT JAN09)

	CALL DEFREN('@XXI','$XDS',2)

	CALL INTZERO('%SOL')
C	INTERNAL FORCE FROM MECHANICAL & NON-MECHANICAL STRAIN
	CALL RELZERO('-EIS')  !INITIALIZE TENDON LOAD
      CALL INTFILL('%SOL',2,1,1,1)
      CALL INTFILL('%SOL',4,1,3,1)
C	PERFORM ELEMENT COMMAND  
	IF(NCOM.NE.6.AND.NCOM.NE.7.AND.NCOM.NE.9) THEN
	CALL GRLCON
C	CALL TEDCON
	CALL LNKLOOP
	CALL TRVLOOP
	CALL SPIGCON
	ENDIF
	IF(NCOM.EQ.6) THEN
	CALL TEDCON           !TENDON PRIMARY
	ENDIF
	
	IF(NCOM.EQ.7.OR.NCOM.EQ.9) THEN
	CALL GRLCON
	CALL LNKLOOP
	CALL TRVLOOP
	CALL SPIGCON
	ENDIF
	
	
      
	CALL GRLCOM

	CALL DEFREN('$XDS','@XXI',2)

      IF(NCOM.EQ.8) GOTO 1000   !NOTHING FOR CREEP PRIMARY
      IF(NCOM.EQ.6) THEN
	RCONDT(MCOM2:MCOM2+NSFN1) = RCONDT( KEIS:KEIS +NSFN1)           !FOR TENDON PRIMARY, STORE INTERNAL FORCE DIRECTLY (TO USE IN REACTION CALC.)
	ELSE
	RCONDT(MCOM2:MCOM2+NSFN1) = RCONDT(MCOM2:MCOM2+NSFN1) + 
	1							  RCONDT( KEIS:KEIS +NSFN1) - 
	1							  RCONDT( KLFO:KLFO +NSFN1)           !UPDATE OLD INTERNAL FORCE         
	ENDIF
		

	SELECTCASE(NCOM)
	CASE(1,2,3,4,5,7,9)
	MCOMP = LNAME(2,6)
	RCONDT(MCOM2:MCOM2+NSFN1) = RCONDT(MCOM2:MCOM2+NSFN1) + 
	1							  RCONDT(MCOMP:MCOMP+NSFN1)
	ENDSELECT

      	
C     --------------------------------------------------------------------------------

C     --------------------------------------------------------------------------------

	
1000	CONTINUE

C     --------------------------------------------------------------------------


	CALL DELTREL ('@XXI')  


	RETURN
	END
C	=======================================================================
C	=== CONSTRUCTION ANALYSIS ===SONGSAK JAN2008 ===LOAD COMBINATION ======
C	=======================================================================
