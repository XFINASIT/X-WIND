C	=======================================================================
C	=== CONSTRUCTION ANALYSIS =============== SONGSAK NOV2007 =============
C	=======================================================================

      SUBROUTINE LINOPT1(IEG,IEL,COORD,EDIS,IAX,AAX)
	IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER*4 (I-N)
	DIMENSION COORD(3,1),EDIS(1),IAX(1),AAX(1)


	CALL INTFILL('%GRP',ISTYP,2 ,IEG,0) 

	SELECTCASE(ISTYP)

	CASE(3)
	CALL TRSUPD1(IEG,IEL,COORD,EDIS,IAX,AAX)

	CASE(4)
	CALL PCBUPD1(IEG,IEL,COORD,EDIS,IAX,AAX)

	CASE(7)
	CALL CTAUPD1(IEG,IEL,COORD,EDIS,IAX,AAX)

	ENDSELECT



	RETURN
	END




C	=======================================================================
C	=== CONSTRUCTION ANALYSIS =============== SONGSAK NOV2007 =============
C	=======================================================================
      SUBROUTINE LINOPT2(IEG,IEL,IAX,AAX)
	IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER*4 (I-N)
	DIMENSION IAX(1),AAX(1)


	CALL INTFILL('%GRP',ISTYP,2 ,IEG,0) 


	SELECTCASE(ISTYP)

	CASE(3)
	CALL TRSUPD2(IEG,IEL,IAX,AAX)

	CASE(4)
	CALL PCBUPD2(IEG,IEL,IAX,AAX)

	CASE(7)
	CALL CTAUPD2(IEG,IEL,IAX,AAX)

	ENDSELECT



	RETURN
	END




C	=======================================================================
C	=== CONSTRUCTION ANALYSIS =============== SONGSAK NOV2007 =============
C	=======================================================================

      SUBROUTINE LINOPT3(IEG,IEL,COORD,SE,RE,LSTF,LFOC,IAX,AAX)
	IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER*4 (I-N)
	DIMENSION SE(1),RE(1),COORD(3,1),IAX(1),AAX(1)
C	LSTF  0 = NO COMPUTE OF STIFFNESS   1 = COMPUTE STIFFNESS
C	LFOC  0 = NO COMPUTE OF ELM FORCE   1 = COMPUTE ELM FORCE

	CALL INTFILL('%GRP',ISTYP,2 ,IEG,0) 

	SELECTCASE(ISTYP)

	CASE(3)
	CALL TRSOPT3(IEG,IEL,COORD,SE,RE,LSTF,LFOC,IAX,AAX)

	CASE(4)
	CALL PCBOPT3(IEG,IEL,COORD,SE,RE,LSTF,LFOC,IAX,AAX)

	CASE(7)
	CALL CTAOPT3(IEG,IEL,COORD,SE,RE,LSTF,LFOC,IAX,AAX)

	ENDSELECT



	RETURN
	END




C	=======================================================================
C	=== CONSTRUCTION ANALYSIS =============== SONGSAK NOV2007 =============
C	=======================================================================
	SUBROUTINE TRSUPD1(IEG,IEL,COORD,EDIS,IAX,AAX)
	IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER*4 (I-N)
C	LTMOPT(1)  WORKING ON MECHANICAL DATA
C	 0 = NO UPDATE STRESS & MATERIAL STATE
C	 1 = UPDATE STRESS & MATERIAL STATE
C	 2 = STIFFNESS ONLY



	DIMENSION VR(3,1),EDIS(1),IAX(1),AAX(1)
	DIMENSION BBM(3,6),BBX(1,6)
	DIMENSION NPM(10),NPI(10),COORD(3,1)


	ALLOCATABLE IF3(:),AF4(:),AF5(:),AF7(:)
	ALLOCATABLE FFPS(:,:)
C	----------------------------------------
C	GROUP DATA
C	----------------------------------------
	CALL INTFILL('%GRP',ITYPE,1 ,IEG,0) !
	CALL INTFILL('%GRP',ISTYP,2 ,IEG,0) !
	CALL INTFILL('%GRP',NELE ,3 ,IEG,0) !
	CALL INTFILL('%GRP',MPRT ,4 ,IEG,0) !MAX NUM OF TENDON POINT
	CALL INTFILL('%GRP',MGAS ,5 ,IEG,0) !
	CALL INTFILL('%GRP',MFIB ,6 ,IEG,0) !
	CALL INTFILL('%GRP',NEF  ,7 ,IEG,0) !
	CALL INTFILL('%GRP',NNM  ,8 ,IEG,0) !
	CALL INTFILL('%GRP',NNF  ,9 ,IEG,0) !
	CALL INTFILL('%GRP',NGR  ,10,IEG,0) !
	CALL INTFILL('%GRP',NGS  ,11,IEG,0) !
	CALL INTFILL('%GRP',NGT  ,12,IEG,0) !
C	GROUP FILE
	CALL INTFILL('%GRF',N3   ,3 ,IEG,0) !
	CALL INTFILL('%GRF',N4   ,4 ,IEG,0) !
	CALL INTFILL('%GRF',N5   ,5 ,IEG,0) !
	CALL INTFILL('%GRF',N7   ,7 ,IEG,0) !

	CALL INTFILL('%GRF',NDX3 ,13,IEG,0) !
	CALL INTFILL('%GRF',NDX4 ,14,IEG,0) !
	CALL INTFILL('%GRF',NDX5 ,15,IEG,0) !
	CALL INTFILL('%GRF',NDX7 ,17,IEG,0) !
C	----------------------------------------
	ALLOCATE(IF3(N3),AF4(N4),AF5(N5),AF7(N7))



C	CALLING LOPT1
      CALL INTFILL('%SOL',LOPT1,1,1,0)


C	THIRD FILE INTG
	NPM(1) = N3
	NPI(1) = N3
	CALL CALLINTG(IF3,IAX,NDX3,NPM,NPI,1,'READ')
	IXIST = IF3(4)	                                !EXISTING FLAG 
	ISEC  = IF3(2)

	CALL RELFILL('$TSC',AREA ,1,ISEC,0)
	CALL RELFILL('$TSC',FM   ,2,ISEC,0)
	CALL RELFILL('$TSC',FL   ,3,ISEC,0)
	MATN = INT(FM)
	MATY = INT(FL) !MAT TYPE 0=STEEL 1=PRESTRESS 2=CABLE



	IF (IXIST.EQ. 0) GOTO 300 ! NEVER EXISTED & CURRENTLY REMOVED


	NPM(1:4)  = [N5,MFIB,MGAS,MPRT]
	NPI(1:4)  = [N5,1   ,1   ,1   ]
	CALL CALLREAL(AF5,AAX,NDX5,NPM,NPI,4,'READ')
	FORC	= AF5(1)
	FORN	= AF5(2)
	MCODEP	= AF5(3)
	EMODP	= AF5(4)
	EMP		= AF5(5)  !TOTAL MECHA STRAIN
	ENP		= AF5(6)  !TOTAL NON-MECHA STRAIN
	EPSTN   = AF5(7)  !TOTAL PLASTIC STRAIN
	RLXP    = AF5(8)  !TOTAL RELAXATION FORCE

	NPM(1:2)  = [N7,MGAS]
	NPI(1:2)  = [N7,1   ]
	CALL CALLREAL(AF7,AAX,NDX7,NPM,NPI,2,'READ')
	N7_R = 1       !POINTER OF RIGIDITY
	N7_S = 2       !POINTER OF MECHANICAL STRESS
	N7_N = 3       !POINTER OF NON-MECHANICAL STRESS


	NPM(1:2) = [N4,MPRT]
	NPI(1:2) = [N4,1   ]
	CALL CALLREAL(AF4,AAX,NDX4,NPM,NPI,2,'READ')	
	FINI    = AF4(6) !PRETENSION
	FSNI    = FINI/AREA

	EP = 0.0D0  !INITIAL PRETENSION
C     ------------------------------------------------------------
C	MATERIAL PROP
C     ------------------------------------------------------------
	SELECT CASE(MATY)

	CASE(0)
	CALL RELFILL('%MSL',YUNG,1,MATN,0)
	CALL RELFILL('%MSL',YUN2,2,MATN,0)
	CALL RELFILL('%MSL',FYLD,3,MATN,0)
	CALL RELFILL('%MSL',BILN,7,MATN,0)
	NBIL = INT(BILN)

	CASE(1)
	CALL LOCATN ('%CPP',KCPP,MAX3,NMSL,2)  !STRESS-STRAIN-YOUNG
	CALL RELFILL('%CPS',SNPT,7,MATN,0)     !STRESS-STRAIN POINTS
	NSPT = INT(SNPT)
	ALLOCATE(FFPS(3,NSPT))
	MAX  = MAX3/3
	DO ISPT = 1,NSPT
	NUM = ISPT
	CALL RELFILL('%CPP',FFPS(1,ISPT),NUM,MATN,0)  !STRESS
	NUM = ISPT + MAX
	CALL RELFILL('%CPP',FFPS(2,ISPT),NUM,MATN,0)  !STRAIN
	NUM = ISPT + MAX + MAX
	CALL RELFILL('%CPP',FFPS(3,ISPT),NUM,MATN,0)  !YOUNG
	ENDDO

C	DETERMINE INITIAL STRAIN DUE TO PRETENSION FORCE
	EP = 0.0D0
      DO 165 ISPT = 1,NSPT
	IF(FSNI.GT.FFPS(1,ISPT)) GOTO 165
	GOTO 166
165	CONTINUE
166	EE  = FFPS(3,ISPT)               !INITIAL YOUNG
      EP  = (FSNI - FFPS(1,ISPT)) / EE + FFPS(2,ISPT) !INITIAL STRAIN

	
	CASE(2)
	CALL LOCATN ('%CBP',KCPP,MAX3,NMSL,2)  !STRESS-STRAIN-YOUNG
	CALL RELFILL('%CBS',SNPT,5,MATN,0)     !STRESS-STRAIN POINTS
	NSPT = INT(SNPT)
	ALLOCATE(FFPS(3,NSPT))
	MAX  = MAX3/3
	DO ISPT = 1,NSPT
	NUM = ISPT
	CALL RELFILL('%CBP',FFPS(1,ISPT),NUM,MATN,0)  !STRESS
	NUM = ISPT + MAX
	CALL RELFILL('%CBP',FFPS(2,ISPT),NUM,MATN,0)  !STRAIN
	NUM = ISPT + MAX + MAX
	CALL RELFILL('%CBP',FFPS(3,ISPT),NUM,MATN,0)  !YOUNG
	ENDDO

C	DETERMINE INITIAL STRAIN DUE TO PRETENSION FORCE
	EP = 0.0D0
      DO 167 ISPT = 1,NSPT
	IF(FSNI.GT.FFPS(1,ISPT)) GOTO 167
	GOTO 168
167	CONTINUE
168	EE  = FFPS(3,ISPT)               !INITIAL YOUNG
      EP  = (FSNI - FFPS(1,ISPT)) / EE + FFPS(2,ISPT) !INITIAL STRAIN


	ENDSELECT

C     ------------------------------------------------------------
C     STRAIN TERMS 
C     ------------------------------------------------------------
C	CALCULATE ORIGINAL S BASE VECTOR
	DO I = 1,3
	VR(I,1) = (COORD(I,2)+EDIS(I+3)) - (COORD(I,1)+EDIS(I))
	ENDDO
	CALL SCALEN(VR,VR,ELN,3)            !GET LENGTH OF ELEMENT HERE
	DO I = 1,3
	VR(I,1) = VR(I,1)/ELN  ! U2-U1/L
	ENDDO

	BBM = 0.0D0
	DO I = 1,3
	BBM(I,I  ) = -1.0D0
	BBM(I,I+3) =  1.0D0
	ENDDO
	BBX = MATMUL(TRANSPOSE(VR),BBM)   !OBTAIN B-MATRIX


	EC = EP           
	DO I = 1,6
	EC = EC + BBX(1,I)*EDIS(I)
	ENDDO
	

	EMC = EC  - ENP  !TOTAL CURRENT MECHANICAL STRAIN
	DMC = EMC - EMP  !INCR  CURRENT MECHANICAL STRAIN
	EMP = EMC        !UPDATE  TOTAL MECHANICAL STRAIN
	



C	===================================
	SELECT CASE(MATY)

	CASE(0)
	MCODEP = 1
	SIGA = YUNG*EMC
	IF(NBIL.EQ.2) THEN
	STRS = FORC/AREA
	DSTS = YUNG*DMC
	CALL TRUSBIL(STRS,DSTS,YUNG,FYLD,YUN2,EPSTN,MCODEP)
	SIGA = STRS
	ENDIF
	FORC   = SIGA*AREA
	EMODP  = YUNG
	IF(MCODEP.EQ.2) EMODP = YUN2


	CASE(1,2)
	IF(EMC.LE.0.0D0) THEN
	ISPT = 1
	SIGA = 0.0D0
	GOTO 66
	ENDIF

      DO 65 ISPT = 1,NSPT
		IF(EMC.GT.FFPS(2,ISPT)) GOTO 65
		GOTO 66
65	CONTINUE
66	MCODEP = ISPT                       !MATERIAL CODE

      EMODP  = FFPS(3,ISPT)               !CURRENT YOUNG
      SIGA   = EMODP *(EMC - FFPS(2,ISPT)) + FFPS(1,ISPT) !TOTAL STRAIN
	FORC   = SIGA*AREA
	FORC   = FORC - RLXP                !ADJUST DUE TO RELAXATION
	IF(FORC.LT.0.0D0) FORC = 0.0D0

	DEALLOCATE(FFPS)

	ENDSELECT
C	===================================

	IF(LOPT1.EQ.1) THEN
	AF7(N7_S) = FORC
	AF7(N7_R) = EMODP
	AF5(1) = FORC	
	AF5(2) = FORN		
	AF5(3) = MCODEP	
	AF5(4) = EMODP	
	AF5(5) = EMP	  !TOTAL MECHA STRAIN
	AF5(6) = ENP	  !TOTAL NON-MECHA STRAIN
	AF5(7) = EPSTN    !TOTAL PLASTIC STRAIN
	AF5(8) = RLXP	  !TOTAL RELAXATION FORCE
	ENDIF

	IF(LOPT1.EQ.2) THEN
	AF7(N7_S) = FORC
	AF7(N7_R) = EMODP
	ENDIF

	NPM(1:2)  = [N7,MGAS]
	NPI(1:2)  = [N7,1   ]
	CALL CALLREAL(AF7,AAX,NDX7,NPM,NPI,2,'WRIT')  


	NPM(1:4)  = [N5,MFIB,MGAS,MPRT]
	NPI(1:4)  = [N5,1   ,1   ,1   ]
	CALL CALLREAL(AF5,AAX,NDX5,NPM,NPI,4,'WRIT') 

300	CONTINUE


	DEALLOCATE(IF3,AF4,AF5,AF7)


	RETURN

	END



C	=======================================================================
C	=== CONSTRUCTION ANALYSIS =============== SONGSAK NOV2007 =============
C	=======================================================================

	SUBROUTINE TRSUPD2(IEG,IEL,IAX,AAX)
	IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER*4 (I-N)
C	LTMOPT(2)  WORKING ON NON-MECHANICAL DATA
C	 0 = NO UPDATE DATA
C	 1 = UPDATE DATA AT START OF TIME STEP (THIS SUBROUTINE)
C	 2 = UPDATE DATA AT END OF TIME STEP
C	 3 = UPDATE DATA FOREACH ITERATION STEP

	DIMENSION DATE(2),IAX(1),AAX(1)
	DIMENSION NPM(10),NPI(10)


	ALLOCATABLE IF3(:),AF4(:),AF5(:),AF7(:)
C	----------------------------------------
C	GROUP DATA
C	----------------------------------------
	CALL INTFILL('%GRP',ITYPE,1 ,IEG,0) !
	CALL INTFILL('%GRP',ISTYP,2 ,IEG,0) !
	CALL INTFILL('%GRP',NELE ,3 ,IEG,0) !
	CALL INTFILL('%GRP',MPRT ,4 ,IEG,0) !MAX NUM OF TENDON POINT
	CALL INTFILL('%GRP',MGAS ,5 ,IEG,0) !
	CALL INTFILL('%GRP',MFIB ,6 ,IEG,0) !
	CALL INTFILL('%GRP',NEF  ,7 ,IEG,0) !
	CALL INTFILL('%GRP',NNM  ,8 ,IEG,0) !
	CALL INTFILL('%GRP',NNF  ,9 ,IEG,0) !
	CALL INTFILL('%GRP',NGR  ,10,IEG,0) !
	CALL INTFILL('%GRP',NGS  ,11,IEG,0) !
	CALL INTFILL('%GRP',NGT  ,12,IEG,0) !
C	GROUP FILE
	CALL INTFILL('%GRF',N3   ,3 ,IEG,0) !
	CALL INTFILL('%GRF',N4   ,4 ,IEG,0) !
	CALL INTFILL('%GRF',N5   ,5 ,IEG,0) !
	CALL INTFILL('%GRF',N7   ,7 ,IEG,0) !

	CALL INTFILL('%GRF',NDX3 ,13,IEG,0) !
	CALL INTFILL('%GRF',NDX4 ,14,IEG,0) !
	CALL INTFILL('%GRF',NDX5 ,15,IEG,0) !
	CALL INTFILL('%GRF',NDX7 ,17,IEG,0) !
C	----------------------------------------
	ALLOCATE(IF3(N3),AF4(N4),AF5(N5),AF7(N7))


C	CALLING LOPT2
      CALL INTFILL('%SOL',LOPT2,1,2,0)

C	CALL TODAY
	CALL RELFILL('-SOV',TODAY,1,1,0) 

C	THIRD FILE INTG
	NPM(1) = N3
	NPI(1) = N3
	CALL CALLINTG(IF3,IAX,NDX3,NPM,NPI,1,'READ')
	IXIST = IF3(4)	                                !EXISTING FLAG 
	ISEC  = IF3(2)

	CALL RELFILL('$TSC',AREA ,1,ISEC,0)
	CALL RELFILL('$TSC',FM   ,2,ISEC,0)
	CALL RELFILL('$TSC',FL   ,3,ISEC,0)
	MATN = INT(FM)
	MATY = INT(FL) !MAT TYPE 0=STEEL 1=PRESTRESS 2=CABLE



	IF (IXIST.EQ. 0) GOTO 300 ! NEVER EXISTED & CURRENTLY REMOVED


	NPM(1:4)  = [N5,MFIB,MGAS,MPRT]
	NPI(1:4)  = [N5,1   ,1   ,1   ]
	CALL CALLREAL(AF5,AAX,NDX5,NPM,NPI,4,'READ')
	FORC	= AF5(1)
	FORN	= AF5(2)
	MCODEP= AF5(3)
	EMODP	= AF5(4)
	EMP	= AF5(5)  !TOTAL MECHA STRAIN
	ENP	= AF5(6)  !TOTAL NON-MECHA STRAIN
	EPSTN = AF5(7)  !TOTAL PLASTIC STRAIN
	RLXP  = AF5(8)  !TOTAL RELAXATION FORCE


	NPM(1:2)  = [N7,MGAS]
	NPI(1:2)  = [N7,1   ]
	CALL CALLREAL(AF7,AAX,NDX7,NPM,NPI,2,'READ') 
	N7_R = 1       !POINTER OF RIGIDITY
	N7_S = 2       !POINTER OF MECHANICAL STRESS
	N7_N = 3       !POINTER OF NON-MECHANICAL STRESS

	NPM(1:2) = [N4,MPRT]
	NPI(1:2) = [N4,1   ]
	CALL CALLREAL(AF4,AAX,NDX4,NPM,NPI,2,'READ')	
	DATE(1) = AF4(3) !CURRENT DAY
	DATE(2) = AF4(4) !INSTALLATION DAY
	FINI    = AF4(6) !PRETENSION

C	--------------------
	SELECTCASE(MATY)
	CASE(1)
	CALL RELFILL('%CPS',FPYD,1,MATN,0)     !YIELD STRENGTH
	CALL RELFILL('%CPS',RLAX,4,MATN,0)     !RELAXATION COEF.

	CASE(2)
	CALL RELFILL('%CBS',FPYD,1,MATN,0)     !YIELD STRENGTH
	CALL RELFILL('%CBS',RLAX,4,MATN,0)     !RELAXATION COEF.
	ENDSELECT
C	--------------------


	FORN = 0.0D0
	IF(LOPT2.NE.1) GOTO 100

C	--------------------
	SELECTCASE(MATY)
	CASE(1,2)
C     ------------------------------------------------------------
C     RELAXATION STRAIN
C     ------------------------------------------------------------
	TC = TODAY   - DATE(2)
	TP = DATE(1) - DATE(2)

	FORN = 0.0D0
C
C-----FIND FORCE RELAXATION OVER THIS TIME STEP-----
C
      IF(TODAY.EQ.DATE(2)) GO TO 30
      IF(TODAY.EQ.DATE(1)) GO TO 30
      IF(RLAX.EQ.0.0D+0) GO TO 30
      FPS   = FORC / AREA
	FSNI  = FORC / AREA  !FINI / AREA  MODIFIED
C
C-----FIND FICTITIOUS INITIAL STRESS-----
C
      IF(DATE(1).EQ.DATE(2)) THEN
	IF(FSNI/FPYD .LE. 0.55D0) GO TO 30
	GO TO 20
      ENDIF
      CR = DLOG10(TP*24.0D+0) / RLAX
      AR = CR / FPYD
      BR = 1.0D+0 + (0.55D+0 * CR)
      FPSI = (BR-DSQRT(BR*BR-4.D+0*AR*FPS))/(AR+AR)
      IF(FPSI/FPYD .LE. 0.55D0) GO TO 30
C
C-----RELAX OVER THIS TIME STEP-----
C
20	CR = DLOG10(TC*24.0D+0) / RLAX
      FPSR = FPSI * (1.0D+0-CR*(FPSI/FPYD-.55D+0))
      DRLX = (FPS - FPSR) * AREA
      RLXP = RLXP + DRLX
	FORN = DRLX
30	CONTINUE


      AF4(3) = TODAY	!UPDATE CURRENT DAY


	ENDSELECT
C	--------------------


100	CONTINUE


	AF7(N7_N) = FORN


	AF5(1) = FORC	
	AF5(2) = FORN		
	AF5(3) = MCODEP	
	AF5(4) = EMODP	
	AF5(5) = EMP	  !TOTAL MECHA STRAIN
	AF5(6) = ENP	  !TOTAL NON-MECHA STRAIN
	AF5(7) = EPSTN    !TOTAL PLASTIC STRAIN
	AF5(8) = RLXP	  !TOTAL RELAXATION FORCE



	NPM(1:2)  = [N7,MGAS]
	NPI(1:2)  = [N7,1   ]
	CALL CALLREAL(AF7,AAX,NDX7,NPM,NPI,2,'WRIT')  

	NPM(1:4)  = [N5,MFIB,MGAS,MPRT]
	NPI(1:4)  = [N5,1   ,1   ,1   ]
	CALL CALLREAL(AF5,AAX,NDX5,NPM,NPI,4,'WRIT') 

	NPM(1:2) = [N4,MPRT]
	NPI(1:2) = [N4,1   ]
	CALL CALLREAL(AF4,AAX,NDX4,NPM,NPI,2,'WRIT')	

300	CONTINUE



	DEALLOCATE(IF3,AF4,AF5,AF7)



	RETURN

	END



C	=======================================================================
C	=== CONSTRUCTION ANALYSIS =============== SONGSAK NOV2007 =============
C	=======================================================================

      SUBROUTINE TRSOPT3(IEG,IEL,COORD,S,RE,LSTF,LFOC,IAX,AAX)
	IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER*4 (I-N)

C	LTMOPT(3)
C	 0 = NO-ASSEMBLE OF RESISTING LOAD
C	 1 = ASSEMBLE OF NON-MECHANICAL INTERNAL LOAD
C	 2 = ASSEMBLE OF MECHANICAL INTERNAL LOAD
C	 3 = ASSEMBLE OF NON-MECHANICAL & MECHANICAL INTERNAL LOAD
C	 4 = ELEMENT FORCE + ASSEMBLE REACTION(FROM MECHANICAL) 


	DIMENSION VR(3,1)
	DIMENSION BBM(3,6),BBX(1,6)
	DIMENSION NPM(10),NPI(10),IAX(1),AAX(1)


	DIMENSION S(1),RE(1),COORD(3,1)
	DIMENSION AKG(6,6)

	ALLOCATABLE IF3(:),AF7(:)
C	----------------------------------------
C	GROUP DATA
C	----------------------------------------
	CALL INTFILL('%GRP',ITYPE,1 ,IEG,0) !
	CALL INTFILL('%GRP',ISTYP,2 ,IEG,0) !
	CALL INTFILL('%GRP',NELE ,3 ,IEG,0) !
	CALL INTFILL('%GRP',MPRT ,4 ,IEG,0) !
	CALL INTFILL('%GRP',MGAS ,5 ,IEG,0) !
	CALL INTFILL('%GRP',MFIB ,6 ,IEG,0) !
	CALL INTFILL('%GRP',NEF  ,7 ,IEG,0) !
	CALL INTFILL('%GRP',NNM  ,8 ,IEG,0) !
	CALL INTFILL('%GRP',NNF  ,9 ,IEG,0) !
	CALL INTFILL('%GRP',NGR  ,10,IEG,0) !
	CALL INTFILL('%GRP',NGS  ,11,IEG,0) !
	CALL INTFILL('%GRP',NGT  ,12,IEG,0) !
C	GROUP FILE
	CALL INTFILL('%GRF',N3   ,3 ,IEG,0) !
	CALL INTFILL('%GRF',N7   ,7 ,IEG,0) !

	CALL INTFILL('%GRF',NDX3 ,13,IEG,0) !
	CALL INTFILL('%GRF',NDX7 ,17,IEG,0) !
C	----------------------------------------
	ALLOCATE(IF3(N3),AF7(N7))


C	THIRD FILE INTG
	NPM(1) = N3
	NPI(1) = N3
	CALL CALLINTG(IF3,IAX,NDX3,NPM,NPI,1,'READ')
	IXIST = IF3(4)	                                !EXISTING FLAG 
	ISEC  = IF3(2)

	CALL RELFILL('$TSC',AREA ,1,ISEC,0)

	IF (IXIST.EQ. 0) GOTO 300 ! NEVER EXISTED & CURRENTLY REMOVED


C	CALCULATE ORIGINAL S BASE VECTOR
	DO I = 1,3
	VR(I,1) = COORD(I,2) - COORD(I,1)
	ENDDO
	CALL SCALEN(VR,VR,ELN,3)            !GET LENGTH OF ELEMENT HERE
	DO I = 1,3
	VR(I,1) = VR(I,1)/ELN  ! U2-U1/L
	ENDDO


	NPM(1:2)  = [N7,MGAS]
	NPI(1:2)  = [N7,1   ]
	CALL CALLREAL(AF7,AAX,NDX7,NPM,NPI,2,'READ')   !CALLING RIGIDITY AND STRESS (MCHA & NON-MCHA)
	N7_R = 1       !POINTER OF RIGIDITY
	N7_S = 2       !POINTER OF MECHANICAL STRESS
	N7_N = 3       !POINTER OF NON-MECHANICAL STRESS

	BBM = 0.0D0
	DO I = 1,3
	BBM(I,I  ) = -1.0D0
	BBM(I,I+3) =  1.0D0
	ENDDO
	BBX = MATMUL(TRANSPOSE(VR),BBM)   !OBTAIN B-MATRIX

	
C	---------------------------
	IF(LSTF.GT.0) THEN
	RIGD = AF7(N7_R) !RIGIDITY
	AKG  = RIGD*MATMUL(TRANSPOSE(BBX),BBX)
	ENDIF
	
	IF(LFOC.GT.0) THEN
	SELECTCASE(LFOC)

	CASE(1)
	FOR = AF7(N7_N)  !NON-MECHA
	
	CASE(2)
	FOR = AF7(N7_S)  !MECHA


	ENDSELECT
	ENDIF
C	---------------------------
	K = 0
	DO I = 1,6
	IF(LFOC.GT.0) RE(I) = RE(I) + ELN*FOR*BBX(1,I)
	DO J = I,6
	K = K + 1
	IF(LSTF.GT.0)  S(K) = S(K)  + AREA*ELN*AKG(I,J)
	ENDDO
	ENDDO


300	CONTINUE


	DEALLOCATE(IF3,AF7)


	RETURN

	END



C	=======================================================================
C	=== CONSTRUCTION ANALYSIS =============== SONGSAK NOV2007 =============
C	=======================================================================

	SUBROUTINE TRUSBIL(STSPS,DSTSZ,YOUNG,YIELD,YOUN2,EPSTN,MATN)
	IMPLICIT REAL*8 (A-H,O-Z)
	IMPLICIT INTEGER*4 (I-N)
C	==================================================================
C	ELASTIC & PLASTIC BEHAVIOR OF REINFORCING STEEL
C	TRUSS MODIFIED FOR HARDENING-SARA MARCH2005
C	==================================================================

	MATN = 1
	HARDS = YOUNG*YOUN2/(YOUNG-YOUN2)
	STREP = DSTSZ
	STRPP = STSPS
	STOTP = STRPP + STREP

	FUNSO = STRPP - HARDS*EPSTN
	FUNSN = STOTP - HARDS*EPSTN

	PREYS = YIELD
	IF(ABS(FUNSO).GE.PREYS) GO TO 20
	ESCUR = ABS(FUNSN) - PREYS
	IF(ESCUR.LE.0.0) GO TO 40
	RFACT = ESCUR/ABS(STREP)
	GO TO 30

20	IF(ABS(FUNSN).LT.ABS(FUNSO)) GO TO 40

	RFACT = 1.0

30	REDUC = 1.0 - RFACT
	STRPP = STRPP + REDUC*STREP + 
	1		RFACT*STREP*(1.0-YOUNG/(YOUNG+HARDS))
	EPSTN = EPSTN + RFACT*STREP/(YOUNG+HARDS)
	EPSTN = EPSTN
	MATN = 2
	GO TO 50

40	STRPP = STRPP + STREP
50	STSPS = STRPP

	RETURN
	END


C	==================================================================
C	==================================================================
C	==================================================================



C	==================================================================
C	==================================================================
C	==================================================================
C	PARABOLIC CABLE
	SUBROUTINE PCBUPD1(IEG,IEL,COORD,EDIS,IAX,AAX)
	IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER*4 (I-N)
C	LTMOPT(1)  WORKING ON MECHANICAL DATA
C	 0 = NO UPDATE STRESS & MATERIAL STATE
C	 1 = UPDATE STRESS & MATERIAL STATE
C	 2 = STIFFNESS ONLY

	DIMENSION VR(3,1),EDIS(1),IAX(1),AAX(1)
	DIMENSION BBM(3,6),BBX(1,6)
	DIMENSION NPM(10),NPI(10),COORD(3,1)


	ALLOCATABLE IF3(:),AF4(:),AF5(:),AF7(:)
	ALLOCATABLE FFPS(:,:),YCCUV(:,:)
C	----------------------------------------
C	GROUP DATA
C	----------------------------------------
	CALL INTFILL('%GRP',ITYPE,1 ,IEG,0) !
	CALL INTFILL('%GRP',ISTYP,2 ,IEG,0) !
	CALL INTFILL('%GRP',NELE ,3 ,IEG,0) !
	CALL INTFILL('%GRP',MPRT ,4 ,IEG,0) !MAX NUM OF TENDON POINT
	CALL INTFILL('%GRP',MGAS ,5 ,IEG,0) !
	CALL INTFILL('%GRP',MFIB ,6 ,IEG,0) !
	CALL INTFILL('%GRP',NEF  ,7 ,IEG,0) !
	CALL INTFILL('%GRP',NNM  ,8 ,IEG,0) !
	CALL INTFILL('%GRP',NNF  ,9 ,IEG,0) !
	CALL INTFILL('%GRP',NGR  ,10,IEG,0) !
	CALL INTFILL('%GRP',NGS  ,11,IEG,0) !
	CALL INTFILL('%GRP',NGT  ,12,IEG,0) !
C	GROUP FILE
	CALL INTFILL('%GRF',N3   ,3 ,IEG,0) !
	CALL INTFILL('%GRF',N4   ,4 ,IEG,0) !
	CALL INTFILL('%GRF',N5   ,5 ,IEG,0) !
	CALL INTFILL('%GRF',N7   ,7 ,IEG,0) !

	CALL INTFILL('%GRF',NDX3 ,13,IEG,0) !
	CALL INTFILL('%GRF',NDX4 ,14,IEG,0) !
	CALL INTFILL('%GRF',NDX5 ,15,IEG,0) !
	CALL INTFILL('%GRF',NDX7 ,17,IEG,0) !
C	----------------------------------------
	ALLOCATE(IF3(N3),AF4(N4),AF5(N5),AF7(N7))


C	CALLING LOPT1
      CALL INTFILL('%SOL',LOPT1,1,1,0)


C	THIRD FILE INTG
	NPM(1) = N3
	NPI(1) = N3
	CALL CALLINTG(IF3,IAX,NDX3,NPM,NPI,1,'READ')
	IXIST = IF3(4)	                                !EXISTING FLAG 
	ISEC  = IF3(2)

	CALL RELFILL('$CSP',AREA ,1,ISEC,0)
	CALL RELFILL('$CSP',FM   ,2,ISEC,0)
	CALL RELFILL('$CSP',FL   ,3,ISEC,0)
	MATN = INT(FM)
	MATY = INT(FL) !MAT TYPE 0=STEEL 1=PRESTRESS 2=CABLE



	IF (IXIST.EQ. 0) GOTO 300 ! NEVER EXISTED & CURRENTLY REMOVED


	NPM(1:4)  = [N5,MFIB,MGAS,MPRT]
	NPI(1:4)  = [N5,1   ,1   ,1   ]
	CALL CALLREAL(AF5,AAX,NDX5,NPM,NPI,4,'READ') 
	FORC	= AF5(1)
	FORN	= AF5(2)
	MCODEP= AF5(3)
	EMODP	= AF5(4)
	EMP	= AF5(5)  !TOTAL MECHA STRAIN
	ENP	= AF5(6)  !TOTAL NON-MECHA STRAIN
	EPSTN = AF5(7)  !TOTAL PLASTIC STRAIN
	RLXP  = AF5(8)  !TOTAL RELAXATION FORCE


	NPM(1:2) = [N4,MPRT]
	NPI(1:2) = [N4,1   ]
	CALL CALLREAL(AF4,AAX,NDX4,NPM,NPI,2,'READ')	
	FINI = AF4(6) !PRETENSION OR INITIAL LENGTH
	SIGMO = FINI/AREA

	NPM(1:2)  = [N7,MGAS]
	NPI(1:2)  = [N7,1   ]
	CALL CALLREAL(AF7,AAX,NDX7,NPM,NPI,2,'READ') 
	N7_R = 1       !POINTER OF RIGIDITY
	N7_S = 2       !POINTER OF MECHANICAL STRESS
	N7_N = 3       !POINTER OF NON-MECHANICAL STRESS


C     ------------------------------------------------------------
C     STRAIN TERMS 
C     ------------------------------------------------------------
C	CALCULATE ORIGINAL S BASE VECTOR
	DO I = 1,3
	VR(I,1) = (COORD(I,2)+EDIS(I+3)) - (COORD(I,1)+EDIS(I))
	ENDDO
	CALL SCALEN(VR,VR,ELN,3)            !GET LENGTH OF ELEMENT HERE
	DO I = 1,3
	VR(I,1) = VR(I,1)/ELN  ! U2-U1/L
	ENDDO

	BBM = 0.0D0
	DO I = 1,3
	BBM(I,I  ) = -1.0D0
	BBM(I,I+3) =  1.0D0
	ENDDO
	BBX = MATMUL(TRANSPOSE(VR),BBM)   !OBTAIN B-MATRIX


C     ------------------------------------------------------------
C	MATERIAL PROP
C     ------------------------------------------------------------
	SELECT CASE(MATY)

	CASE(0)
	CALL RELFILL('%MSL',YUNG,1,MATN,0)
	CALL RELFILL('%MSL',YUN2,2,MATN,0)
	CALL RELFILL('%MSL',FYLD,3,MATN,0)
	CALL RELFILL('%MSL',ESUP,4,MATN,0)
	CALL RELFILL('%MSL',WDEN,6,MATN,0)
	CALL RELFILL('%MSL',BILN,7,MATN,0)
	NBIL = INT(BILN)
	NSPT = 1
	IF(NBIL.EQ.2) NSPT = 2
	ALLOCATE(FFPS(3,NSPT),YCCUV(2,NSPT+1))
	IF(ESUP.LE.EY) ESUP = 2.0D0*EY
	EY = FYLD/YUNG
	FU = FYLD+YUN2*(ESUP-EY)
	FFPS(1,1:2) = [FYLD,FU  ]
	FFPS(2,1:2) = [EY  ,ESUP]
	FFPS(3,1:2) = [YUNG,YUN2]
	CALL STGCSA(FFPS,YCCUV,SIGMO,WDEN,ELN,NSPT,STRAO)

	CASE(1)
	CALL LOCATN ('%CPP',KCPP,MAX3,NMSL,2)  !STRESS-STRAIN-YOUNG
	CALL RELFILL('%CPS',WDEN,2,MATN,0)     !UNIT WEIGHT
	CALL RELFILL('%CPS',SNPT,7,MATN,0)     !STRESS-STRAIN POINTS
	NSPT = INT(SNPT)
	ALLOCATE(FFPS(3,NSPT),YCCUV(2,NSPT+1))
	MAX  = MAX3/3
	DO ISPT = 1,NSPT
	NUM = ISPT
	CALL RELFILL('%CPP',FFPS(1,ISPT),NUM,MATN,0)  !STRESS
	NUM = ISPT + MAX
	CALL RELFILL('%CPP',FFPS(2,ISPT),NUM,MATN,0)  !STRAIN
	NUM = ISPT + MAX + MAX
	CALL RELFILL('%CPP',FFPS(3,ISPT),NUM,MATN,0)  !YOUNG
	CALL STGCSA(FFPS,YCCUV,SIGMO,WDEN,ELN,NSPT,STRAO)
	ENDDO

	CASE(2)
	CALL LOCATN ('%CBP',KCPP,MAX3,NMSL,2)  !STRESS-STRAIN-YOUNG
	CALL RELFILL('%CBS',WDEN,2,MATN,0)     !UNIT WEIGHT
	CALL RELFILL('%CBS',SNPT,5,MATN,0)     !STRESS-STRAIN POINTS
	NSPT = INT(SNPT)
	ALLOCATE(FFPS(3,NSPT),YCCUV(2,NSPT+1))
	MAX  = MAX3/3
	DO ISPT = 1,NSPT
	NUM = ISPT
	CALL RELFILL('%CBP',FFPS(1,ISPT),NUM,MATN,0)  !STRESS
	NUM = ISPT + MAX
	CALL RELFILL('%CBP',FFPS(2,ISPT),NUM,MATN,0)  !STRAIN
	NUM = ISPT + MAX + MAX
	CALL RELFILL('%CBP',FFPS(3,ISPT),NUM,MATN,0)  !YOUNG
	CALL STGCSA(FFPS,YCCUV,SIGMO,WDEN,ELN,NSPT,STRAO)
	ENDDO

	ENDSELECT

	YUNG = FFPS(3,1)


	EC = 0.0D0             
	DO I = 1,6
	EC = EC + BBX(1,I)*EDIS(I)
	ENDDO

	EMC = EC  - ENP  !TOTAL CURRENT MECHANICAL STRAIN
	DMC = EMC - EMP  !INCR  CURRENT MECHANICAL STRAIN
	EMP = EMC        !UPDATE  TOTAL MECHANICAL STRAIN	

	CALL CSTCSA(FFPS,YCCUV,STRAO,EMC,WDEN,ELN,SIGA,NSPT,MCODEP,
	1			EMOD)
	FORC   = SIGA*AREA
	FORC   = FORC - RLXP                !ADJUST DUE TO RELAXATION

      IF (MCODEP.EQ.1) THEN
        ETAN  = 0.0D0
	  FORC = 0.0D0
        GOTO 50
      ELSEIF (MCODEP.EQ.2) THEN		
        ETAN  =  EMOD/ (1.0+ EMOD * (WDEN * ELN)**2.0
     1        / (12.0 * SIGA**3.0))
      END IF	
50	EMODP = ETAN
      IF(DMC.LT.0.0D0) EMODP = 0.0D0
C     ------------------------------------------------------------


	IF(LOPT1.EQ.1) THEN
	AF7(N7_R) = EMODP
	AF7(N7_S) = FORC
	AF5(1) = FORC	
	AF5(2) = FORN		
	AF5(3) = MCODEP	
	AF5(4) = EMODP	
	AF5(5) = EMP	  !TOTAL MECHA STRAIN
	AF5(6) = ENP	  !TOTAL NON-MECHA STRAIN
	AF5(7) = EPSTN    !TOTAL PLASTIC STRAIN
	AF5(8) = RLXP	  !TOTAL RELAXATION FORCE
	ENDIF
	IF(LOPT1.EQ.2) THEN
	AF7(N7_R) = EMODP
	AF7(N7_S) = FORC
	ENDIF


	NPM(1:2)  = [N7,MGAS]
	NPI(1:2)  = [N7,1   ]
	CALL CALLREAL(AF7,AAX,NDX7,NPM,NPI,2,'WRIT')  
	
	NPM(1:4)  = [N5,MFIB,MGAS,MPRT]
	NPI(1:4)  = [N5,1   ,1   ,1   ]
	CALL CALLREAL(AF5,AAX,NDX5,NPM,NPI,4,'WRIT') 


	DEALLOCATE(FFPS,YCCUV)

300	CONTINUE


	DEALLOCATE(IF3,AF4,AF5,AF7)


	RETURN

	END



C	=======================================================================
C	=== CONSTRUCTION ANALYSIS =============== SONGSAK NOV2007 =============
C	=======================================================================

	SUBROUTINE PCBUPD2(IEG,IEL,IAX,AAX)
	IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER*4 (I-N)
C	LTMOPT(2)  WORKING ON NON-MECHANICAL DATA
C	 0 = NO UPDATE DATA
C	 1 = UPDATE DATA AT START OF TIME STEP (THIS SUBROUTINE)
C	 2 = UPDATE DATA AT END OF TIME STEP
C	 3 = UPDATE DATA FOREACH ITERATION STEP

	DIMENSION DATE(2)
	DIMENSION NPM(10),NPI(10),IAX(1),AAX(1)


	ALLOCATABLE IF3(:),AF4(:),AF5(:),AF7(:)
C	----------------------------------------
C	GROUP DATA
C	----------------------------------------
	CALL INTFILL('%GRP',ITYPE,1 ,IEG,0) !
	CALL INTFILL('%GRP',ISTYP,2 ,IEG,0) !
	CALL INTFILL('%GRP',NELE ,3 ,IEG,0) !
	CALL INTFILL('%GRP',MPRT ,4 ,IEG,0) !MAX NUM OF TENDON POINT
	CALL INTFILL('%GRP',MGAS ,5 ,IEG,0) !
	CALL INTFILL('%GRP',MFIB ,6 ,IEG,0) !
	CALL INTFILL('%GRP',NEF  ,7 ,IEG,0) !
	CALL INTFILL('%GRP',NNM  ,8 ,IEG,0) !
	CALL INTFILL('%GRP',NNF  ,9 ,IEG,0) !
	CALL INTFILL('%GRP',NGR  ,10,IEG,0) !
	CALL INTFILL('%GRP',NGS  ,11,IEG,0) !
	CALL INTFILL('%GRP',NGT  ,12,IEG,0) !
C	GROUP FILE
	CALL INTFILL('%GRF',N3   ,3 ,IEG,0) !
	CALL INTFILL('%GRF',N4   ,4 ,IEG,0) !
	CALL INTFILL('%GRF',N5   ,5 ,IEG,0) !
	CALL INTFILL('%GRF',N7   ,7 ,IEG,0) !

	CALL INTFILL('%GRF',NDX3 ,13,IEG,0) !
	CALL INTFILL('%GRF',NDX4 ,14,IEG,0) !
	CALL INTFILL('%GRF',NDX5 ,15,IEG,0) !
	CALL INTFILL('%GRF',NDX7 ,17,IEG,0) !
C	----------------------------------------
	ALLOCATE(IF3(N3),AF4(N4),AF5(N5),AF7(N7))

C	CALLING LOPT2
      CALL INTFILL('%SOL',LOPT2,1,2,0)

C	CALL TODAY
	CALL RELFILL('-SOV',TODAY,1,1,0) 
	

C	THIRD FILE INTG
	NPM(1) = N3
	NPI(1) = N3
	CALL CALLINTG(IF3,IAX,NDX3,NPM,NPI,1,'READ')
	IXIST = IF3(4)	                                !EXISTING FLAG 
	ISEC  = IF3(2)

	CALL RELFILL('$CSP',AREA ,1,ISEC,0)
	CALL RELFILL('$CSP',FM   ,2,ISEC,0)
	CALL RELFILL('$CSP',FL   ,3,ISEC,0)
	MATN = INT(FM)
	MATY = INT(FL) !MAT TYPE 0=STEEL 1=PRESTRESS 2=CABLE



	IF (IXIST.EQ. 0) GOTO 300 ! NEVER EXISTED & CURRENTLY REMOVED

	NPM(1:4)  = [N5,MFIB,MGAS,MPRT]
	NPI(1:4)  = [N5,1   ,1   ,1   ]
	CALL CALLREAL(AF5,AAX,NDX5,NPM,NPI,4,'READ') 
	FORC	= AF5(1)
	FORN	= AF5(2)
	MCODEP= AF5(3)
	EMODP	= AF5(4)
	EMP	= AF5(5)  !TOTAL MECHA STRAIN
	ENP	= AF5(6)  !TOTAL NON-MECHA STRAIN
	EPSTN = AF5(7)  !TOTAL PLASTIC STRAIN
	RLXP  = AF5(8)  !TOTAL RELAXATION FORCE


	NPM(1:2)  = [N7,MGAS]
	NPI(1:2)  = [N7,1   ]
	CALL CALLREAL(AF7,AAX,NDX7,NPM,NPI,2,'READ') 
	N7_R = 1       !POINTER OF RIGIDITY
	N7_S = 2       !POINTER OF MECHANICAL STRESS
	N7_N = 3       !POINTER OF NON-MECHANICAL STRESS

	NPM(1:2) = [N4,MPRT]
	NPI(1:2) = [N4,1   ]
	CALL CALLREAL(AF4,AAX,NDX4,NPM,NPI,2,'READ')
	DATE(1) = AF4(3) !CURRENT DAY
	DATE(2) = AF4(4) !INSTALLATION DAY
	FINI = AF4(6) !PRETENSION OR INITIAL LENGTH

C	--------------------
	SELECTCASE(MATY)
	CASE(1)
	CALL RELFILL('%CPS',FPYD,1,MATN,0)     !YIELD STRENGTH
	CALL RELFILL('%CPS',RLAX,4,MATN,0)     !RELAXATION COEF.

	CASE(2)
	CALL RELFILL('%CBS',FPYD,1,MATN,0)     !YIELD STRENGTH
	CALL RELFILL('%CBS',RLAX,4,MATN,0)     !RELAXATION COEF.
	ENDSELECT
C	--------------------


	FORN = 0.0D0
	IF(LOPT2.NE.1) GOTO 100

C	--------------------
	SELECTCASE(MATY)
	CASE(1,2)
C     ------------------------------------------------------------
C     RELAXATION STRAIN
C     ------------------------------------------------------------
	TC = TODAY   - DATE(2)
	TP = DATE(1) - DATE(2)

	FORN = 0.0D0
C
C-----FIND FORCE RELAXATION OVER THIS TIME STEP-----
C
      IF(TODAY.EQ.DATE(2)) GO TO 30
      IF(TODAY.EQ.DATE(1)) GO TO 30
      IF(RLAX.EQ.0.0D+0) GO TO 30
      FPS   = FORC / AREA
	FSNI  = FORC / AREA  !FINI / AREA  MODIFIED
C
C-----FIND FICTITIOUS INITIAL STRESS-----
C
      IF(DATE(1).EQ.DATE(2)) THEN
	IF(FSNI/FPYD .LE. 0.55D0) GO TO 30
	GO TO 20
      ENDIF
      CR = DLOG10(TP*24.0D+0) / RLAX
      AR = CR / FPYD
      BR = 1.0D+0 + (0.55D+0 * CR)
      FPSI = (BR-DSQRT(BR*BR-4.D+0*AR*FPS))/(AR+AR)
      IF(FPSI/FPYD .LE. 0.55D0) GO TO 30
C
C-----RELAX OVER THIS TIME STEP-----
C
20	CR = DLOG10(TC*24.0D+0) / RLAX
      FPSR = FPSI * (1.0D+0-CR*(FPSI/FPYD-.55D+0))
      DRLX = (FPS - FPSR) * AREA
      RLXP = RLXP + DRLX
	FORN = DRLX
30	CONTINUE


      AF4(3) = TODAY	!UPDATE CURRENT DAY

	ENDSELECT
C	--------------------


100	CONTINUE


	AF7(N7_N) = FORN


	AF5(1) = FORC	
	AF5(2) = FORN		
	AF5(3) = MCODEP	
	AF5(4) = EMODP	
	AF5(5) = EMP	  !TOTAL MECHA STRAIN
	AF5(6) = ENP	  !TOTAL NON-MECHA STRAIN
	AF5(7) = EPSTN    !TOTAL PLASTIC STRAIN
	AF5(8) = RLXP	  !TOTAL RELAXATION FORCE


	NPM(1:2) = [N4,MPRT]
	NPI(1:2) = [N4,1   ]
	CALL CALLREAL(AF4,AAX,NDX4,NPM,NPI,2,'WRIT')

	NPM(1:4)  = [N5,MFIB,MGAS,MPRT]
	NPI(1:4)  = [N5,1   ,1   ,1   ]
	CALL CALLREAL(AF5,AAX,NDX5,NPM,NPI,4,'WRIT') 	

	NPM(1:2)  = [N7,MGAS]
	NPI(1:2)  = [N7,1   ]
	CALL CALLREAL(AF7,AAX,NDX7,NPM,NPI,2,'WRIT')  


300	CONTINUE


	DEALLOCATE(IF3,AF4,AF5,AF7)




	RETURN

	END



C	=======================================================================
C	=== CONSTRUCTION ANALYSIS =============== SONGSAK NOV2007 =============
C	=======================================================================

      SUBROUTINE PCBOPT3(IEG,IEL,COORD,S,RE,LSTF,LFOC,IAX,AAX)
	IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER*4 (I-N)

C	LTMOPT(3)
C	 0 = NO-ASSEMBLE OF RESISTING LOAD
C	 1 = ASSEMBLE OF NON-MECHANICAL INTERNAL LOAD
C	 2 = ASSEMBLE OF MECHANICAL INTERNAL LOAD
C	 3 = ASSEMBLE OF NON-MECHANICAL & MECHANICAL INTERNAL LOAD
C	 4 = ELEMENT FORCE + ASSEMBLE REACTION(FROM MECHANICAL) 


	DIMENSION VR(3,1)
	DIMENSION BBM(3,6),BBX(1,6)
	DIMENSION NPM(10),NPI(10),IAX(1),AAX(1)


	DIMENSION S(1),RE(1),COORD(3,1)
	DIMENSION AKG(6,6)

	ALLOCATABLE IF3(:),AF7(:)
C	----------------------------------------
C	GROUP DATA
C	----------------------------------------
	CALL INTFILL('%GRP',ITYPE,1 ,IEG,0) !
	CALL INTFILL('%GRP',ISTYP,2 ,IEG,0) !
	CALL INTFILL('%GRP',NELE ,3 ,IEG,0) !
	CALL INTFILL('%GRP',MPRT ,4 ,IEG,0) !
	CALL INTFILL('%GRP',MGAS ,5 ,IEG,0) !
	CALL INTFILL('%GRP',MFIB ,6 ,IEG,0) !
	CALL INTFILL('%GRP',NEF  ,7 ,IEG,0) !
	CALL INTFILL('%GRP',NNM  ,8 ,IEG,0) !
	CALL INTFILL('%GRP',NNF  ,9 ,IEG,0) !
	CALL INTFILL('%GRP',NGR  ,10,IEG,0) !
	CALL INTFILL('%GRP',NGS  ,11,IEG,0) !
	CALL INTFILL('%GRP',NGT  ,12,IEG,0) !
C	GROUP FILE
	CALL INTFILL('%GRF',N3   ,3 ,IEG,0) !
	CALL INTFILL('%GRF',N7   ,7 ,IEG,0) !

	CALL INTFILL('%GRF',NDX3 ,13,IEG,0) !
	CALL INTFILL('%GRF',NDX7 ,17,IEG,0) !
C	----------------------------------------
	ALLOCATE(IF3(N3),AF7(N7))


C	THIRD FILE INTG
	NPM(1) = N3
	NPI(1) = N3
	CALL CALLINTG(IF3,IAX,NDX3,NPM,NPI,1,'READ')
	IXIST = IF3(4)	                                !EXISTING FLAG 
	ISEC  = IF3(2)

	CALL RELFILL('$CSP',AREA ,1,ISEC,0)

	IF (IXIST.EQ. 0) GOTO 300 ! NEVER EXISTED & CURRENTLY REMOVED


C	CALCULATE ORIGINAL S BASE VECTOR
	DO I = 1,3
	VR(I,1) = COORD(I,2) - COORD(I,1)
	ENDDO
	CALL SCALEN(VR,VR,ELN,3)            !GET LENGTH OF ELEMENT HERE
	DO I = 1,3
	VR(I,1) = VR(I,1)/ELN  ! U2-U1/L
	ENDDO

	NPM(1:2)  = [N7,MGAS]
	NPI(1:2)  = [N7,1   ]
	CALL CALLREAL(AF7,AAX,NDX7,NPM,NPI,2,'READ')  !CALLING RIGIDITY AND STRESS (MCHA & NON-MCHA)
	N7_R = 1       !POINTER OF RIGIDITY
	N7_S = 2       !POINTER OF MECHANICAL STRESS
	N7_N = 3       !POINTER OF NON-MECHANICAL STRESS

	BBM = 0.0D0
	DO I = 1,3
	BBM(I,I  ) = -1.0D0
	BBM(I,I+3) =  1.0D0
	ENDDO
	BBX = MATMUL(TRANSPOSE(VR),BBM)   !OBTAIN B-MATRIX

	
C	---------------------------
	IF(LSTF.GT.0) THEN
	RIGD = AF7(N7_R) !RIGIDITY
	AKG  = RIGD*MATMUL(TRANSPOSE(BBX),BBX)
	FOR  = AF7(N7_S)  !MECHA
	AKG(1,1) = AKG(1,1)+ FOR/ELN
	AKG(2,2) = AKG(2,2)+ FOR/ELN
	AKG(3,3) = AKG(3,3)+ FOR/ELN
	AKG(4,4) = AKG(4,4)+ FOR/ELN
	AKG(5,5) = AKG(5,5)+ FOR/ELN
	AKG(6,6) = AKG(6,6)+ FOR/ELN
	AKG(1,4) = AKG(1,4)- FOR/ELN
	AKG(2,5) = AKG(2,5)- FOR/ELN
	AKG(3,6) = AKG(3,6)- FOR/ELN
	AKG(4,1) = AKG(4,1)- FOR/ELN
	AKG(5,2) = AKG(5,2)- FOR/ELN
	AKG(6,3) = AKG(6,3)- FOR/ELN
	ENDIF
	
	IF(LFOC.GT.0) THEN
	SELECTCASE(LFOC)

	CASE(1)
	FOR = AF7(N7_N)  !NON-MECHA
	
	CASE(2)
	FOR = AF7(N7_S)  !MECHA


	ENDSELECT
	ENDIF
C	---------------------------
	K = 0
	DO I = 1,6
	IF(LFOC.GT.0) RE(I) = RE(I) + ELN*FOR*BBX(1,I)
	DO J = I,6
	K = K + 1
	IF(LSTF.GT.0)  S(K) = S(K)  + AREA*ELN*AKG(I,J)
	ENDDO
	ENDDO


300	CONTINUE


	DEALLOCATE(IF3,AF7)


	RETURN

	END



C	=======================================================================
C	=== CONSTRUCTION ANALYSIS =============== SONGSAK NOV2007 =============
C	=======================================================================
      SUBROUTINE STGCSA(YMCUV,YCCUV,SIGMO,WDEN,WL,MP,STRAO)
      IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER*4 (I-N)
C	=================================================================
C	GENERATE THE STRESS-STRAIN CURVE FOR CABLE MATERIAL
C	GENERATE THE STRESS-APPARENT STRAIN CURVE FOR CABLE MATERIAL
C	=================================================================

	DIMENSION YMCUV(3,1),YCCUV(2,1)



C	STRESS-APPARENT STRAIN CURVE

	CONST = WDEN*WDEN*WL*WL/24.0

	YCCUV(1,1) = 0.0
	YCCUV(2,1) = 0.3*SIGMO


	S1 = 0.3*SIGMO
	DO I = 1,MP
	S2 = YMCUV(1,I)  !STRESS
	E  = YMCUV(3,I)  !YOUNG
	
	CN1 = (S2-S1)/E
	CN2 = (1.0/(S1*S1)) - (1.0/(S2*S2))

	YCCUV(1,I+1) = CN1 + (CONST*CN2) + YCCUV(1,I)
	YCCUV(2,I+1) = S2

	S1 = S2

	ENDDO


	CN1 = (SIGMO-0.3*SIGMO)/YMCUV(3,1)
	CN2 = (1.0/(0.3*SIGMO*0.3*SIGMO)) - (1.0/(SIGMO*SIGMO))
	STRAO = CN1 + (CONST*CN2)

	
	RETURN

	END


C	=======================================================================
C	=== CONSTRUCTION ANALYSIS =============== SONGSAK NOV2007 =============
C	=======================================================================
      SUBROUTINE CSTCSA(YMCUV,YCCUV,STRAO,DSTRN,WDEN,WL,STRESS,MP,MCODS,
	1				  EMODS)
      IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER*4 (I-N)

	DIMENSION YMCUV(3,1),YCCUV(2,1)

	CONST = WDEN*WDEN*WL*WL/24.0

	STRNC = STRAO + DSTRN


C	FOR CABLE IN COMPRESSION
	IF(STRNC.LT.0.0D0) THEN
	STRESS = 0.0D0
	MCODS = 1
	EMODS = 0.0D0
	GO TO 1000
	ENDIF

C	START OF CABLE IN TENSION
	MCODS = 2

C	THE FIRST ENTRY STEP
	IF(STRNC.EQ.0.0D0) THEN
	STRESS = YCCUV(2,1)
	EMODS  = YMCUV(3,1)
	GO TO 1000
	ENDIF


C	PICK THE POINT WHICH THE CURRENT STRAIN LAYING ON
	IE = 0
	DO 10 I = 1,MP+1
	IF(STRNC.GT.YCCUV(I,1)) GO TO 10
	IE = I-1
	E  = YMCUV(3,IE)
	E1 = YCCUV(1,IE)
	S1 = YCCUV(2,IE)
	SE = YCCUV(I ,2)
	EMODS = E
	GO TO 15
10	CONTINUE

15	CONTINUE
		
	
	IF(IE.EQ.0) THEN ! ASSUME PERFECT PLASTICITY FOR RANGE OVER THE DATA
	E  = 1.0E-20
	E1 = YCCUV(1,MP)
	S1 = YCCUV(2,MP)
	SE = S1
	EMODS = 1.0E-20
	ENDIF

	S12 = S1*S1

	DELTL = (STRNC - E1)

	

C	SOLVE THE CURRENT STRESS BY "BI-SECTION ITERATIVE METHOD"
	ITERM = 200
	TOL = 0.0000001
	S1I = S1
	S2I = SE
	STSO = 0.0
	DO I = 1,ITERM

	STS = 0.5*(S1I + S2I)

	CN1 = (STS-S1)/E
	CN2 = (1.0D0/(S1*S1)) - (1.0D0/(STS*STS)) 

	FUNC = CN1 + CONST*CN2 - DELTL

	TEST = ABS((STS-STSO)/STS)
	IF(TEST.LE.TOL) THEN
	STRESS = STS
	GO TO 1000
	ENDIF

	STSO = STS
	IF(FUNC.GT.0.0D0) S2I = STS
	IF(FUNC.LE.0.0D0) S1I = STS

	ENDDO
	
C	IF SOLUTION IS NOT CONVERGE USE THE LINEAR INTERPOLATION

	STRESS = (STRNC-E1)*E + S1


1000	CONTINUE
	

	RETURN

	END

C	=======================================================================
C	=== CONSTRUCTION ANALYSIS =============== SONGSAK NOV2007 =============
C	=======================================================================



C	==================================================================
C	==================================================================
C	==================================================================
C	CATENARY CABLE
	SUBROUTINE CTAUPD1(IEG,IEL,COORD,EDIS,IAX,AAX)
	IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER*4 (I-N)
C	LTMOPT(1)  WORKING ON MECHANICAL DATA
C	 0 = NO UPDATE STRESS & MATERIAL STATE
C	 1 = UPDATE STRESS & MATERIAL STATE
C	 2 = STIFFNESS ONLY



	DIMENSION EDIS(1),S(21),RE(6),SKR(6,6),CSTIF(6,6)
	DIMENSION FOC(4),FO1(4),FO2(4)
	DIMENSION VL(3),VH(3),VG(3),VT(3)
	DIMENSION TRANS(6,6),FCO(6)
	DIMENSION NPM(10),NPI(10),COORD(3,1),IAX(1),AAX(1)


	ALLOCATABLE IF3(:),AF4(:),AF5(:),AF7(:)
	ALLOCATABLE FFPS(:,:),YCCUV(:,:)
C	----------------------------------------
C	GROUP DATA
C	----------------------------------------
	CALL INTFILL('%GRP',ITYPE,1 ,IEG,0) !
	CALL INTFILL('%GRP',ISTYP,2 ,IEG,0) !
	CALL INTFILL('%GRP',NELE ,3 ,IEG,0) !
	CALL INTFILL('%GRP',MPRT ,4 ,IEG,0) !MAX NUM OF TENDON POINT
	CALL INTFILL('%GRP',MGAS ,5 ,IEG,0) !
	CALL INTFILL('%GRP',MFIB ,6 ,IEG,0) !
	CALL INTFILL('%GRP',NEF  ,7 ,IEG,0) !
	CALL INTFILL('%GRP',NNM  ,8 ,IEG,0) !
	CALL INTFILL('%GRP',NNF  ,9 ,IEG,0) !
	CALL INTFILL('%GRP',NGR  ,10,IEG,0) !
	CALL INTFILL('%GRP',NGS  ,11,IEG,0) !
	CALL INTFILL('%GRP',NGT  ,12,IEG,0) !
C	GROUP FILE
	CALL INTFILL('%GRF',N3   ,3 ,IEG,0) !
	CALL INTFILL('%GRF',N4   ,4 ,IEG,0) !
	CALL INTFILL('%GRF',N5   ,5 ,IEG,0) !
	CALL INTFILL('%GRF',N7   ,7 ,IEG,0) !

	CALL INTFILL('%GRF',NDX3 ,13,IEG,0) !
	CALL INTFILL('%GRF',NDX4 ,14,IEG,0) !
	CALL INTFILL('%GRF',NDX5 ,15,IEG,0) !
	CALL INTFILL('%GRF',NDX7 ,17,IEG,0) !
C	----------------------------------------
	ALLOCATE(IF3(N3),AF4(N4),AF5(N5),AF7(N7))

	CALL INTFILL('%NUB',NGRAV,1,9,0) !GRAVITY DIRECTION

C	CALLING LOPT1
      CALL INTFILL('%SOL',LOPT1,1,1,0)


C	THIRD FILE INTG
	NPM(1) = N3
	NPI(1) = N3
	CALL CALLINTG(IF3,IAX,NDX3,NPM,NPI,1,'READ')
	IXIST = IF3(4)	                                !EXISTING FLAG 
	ISEC  = IF3(2)

	CALL RELFILL('$CSC',AREA ,1,ISEC,0)
	CALL RELFILL('$CSC',FM   ,2,ISEC,0)
	CALL RELFILL('$CSC',FL   ,3,ISEC,0)
	MATN = INT(FM)
	MATY = INT(FL) !MAT TYPE 0=STEEL 1=PRESTRESS 2=CABLE


	IF (IXIST.EQ. 0) GOTO 300 ! NEVER EXISTED & CURRENTLY REMOVED

	NPM(1:4)  = [N5,MFIB,MGAS,MPRT]
	NPI(1:4)  = [N5,1   ,1   ,1   ]
	CALL CALLREAL(AF5,AAX,NDX5,NPM,NPI,4,'READ') 
	FORC	= AF5(1)
	FORN	= AF5(2)
	MCODEP= AF5(3)
	EMODP	= AF5(4)
	EMP	= AF5(5)  !TOTAL MECHA STRAIN
	ENP	= AF5(6)  !TOTAL NON-MECHA STRAIN
	EPSTN = AF5(7)  !TOTAL PLASTIC STRAIN
	RLXP  = AF5(8)  !TOTAL RELAXATION FORCE

	NPM(1:2) = [N4,MPRT]
	NPI(1:2) = [N4,1   ]
	CALL CALLREAL(AF4,AAX,NDX4,NPM,NPI,2,'READ')
	FHOR = AF4(6) !HORIZONTAL PRETENSION
	
	NPM(1:2)  = [N7,MGAS]
	NPI(1:2)  = [N7,1   ]
	CALL CALLREAL(AF7,AAX,NDX7,NPM,NPI,2,'READ') 
	N7_R1 = 1       !POINTER OF RIGIDITY
	N7_R2 = 21      !POINTER OF RIGIDITY
	N7_S1 = 22      !POINTER OF MECHANICAL STRESS
	N7_S2 = 27      !POINTER OF MECHANICAL STRESS
	N7_N1 = 28      !POINTER OF NON-MECHANICAL STRESS
	N7_N2 = 33      !POINTER OF NON-MECHANICAL STRESS


C     ------------------------------------------------------------
C     STRAIN TERMS 
C     ------------------------------------------------------------
	I = 1
	DX = (COORD(I,2)+EDIS(I+3)) - (COORD(I,1)+EDIS(I))
	I = 2
	DY = (COORD(I,2)+EDIS(I+3)) - (COORD(I,1)+EDIS(I))
	I = 3
	DZ = (COORD(I,2)+EDIS(I+3)) - (COORD(I,1)+EDIS(I))
	TOL = 1.0E-8
	IF(ABS(DX).EQ.0.0D0) DX = TOL
	IF(ABS(DY).EQ.0.0D0) DY = TOL
	IF(ABS(DZ).EQ.0.0D0) DZ = TOL
	IF(ABS(DX).LT.TOL) DX = TOL*DX/ABS(DX)
	IF(ABS(DY).LT.TOL) DY = TOL*DY/ABS(DY)
	IF(ABS(DZ).LT.TOL) DZ = TOL*DZ/ABS(DZ)

	ELN		= SQRT(DX*DX + DY*DY + DZ*DZ)

	VL(1:3) = [DX,DY,DZ]
	VH = VL
	VH(NGRAV) = 0.0D0
	CALL SCALEN (VH,VH,DUM,3)
	VG(1:3)   = 0.0D0
	VG(NGRAV) = 1.0D0

	CALL VECPRD (VH,VG,VT)

	CALL SCAPRD (VL,VH,Z,3)
	CALL SCAPRD (VL,VG,T,3)

	T = (COORD(NGRAV,2)+EDIS(NGRAV+3)) - 
	1	(COORD(NGRAV,1)+EDIS(NGRAV  ))

	TRANS = 0.0D0
	TRANS(1,1:3) = VH(1:3)
	TRANS(2,1:3) = VG(1:3)
	TRANS(3,1:3) = VT(1:3)
	TRANS(4,4:6) = VH(1:3)
	TRANS(5,4:6) = VG(1:3)
	TRANS(6,4:6) = VT(1:3)

C     ------------------------------------------------------------
C	MATERIAL PROP
C     ------------------------------------------------------------
	SELECT CASE(MATY)

	CASE(0)
	CALL RELFILL('%MSL',YUNG,1,MATN,0)
	CALL RELFILL('%MSL',YUN2,2,MATN,0)
	CALL RELFILL('%MSL',FYLD,3,MATN,0)
	CALL RELFILL('%MSL',ESUP,4,MATN,0)
	CALL RELFILL('%MSL',WDEN,6,MATN,0)
	CALL RELFILL('%MSL',BILN,7,MATN,0)
	NBIL = INT(BILN)
	NSPT = 1
	IF(NBIL.EQ.2) NSPT = 2
	ALLOCATE(FFPS(3,NSPT))
	IF(ESUP.LE.EY) ESUP = 2.0D0*EY
	EY = FYLD/YUNG
	FU = FYLD+YUN2*(ESUP-EY)
	FFPS(1,1:2) = [FYLD,FU  ]
	FFPS(2,1:2) = [EY  ,ESUP]
	FFPS(3,1:2) = [YUNG,YUN2]

	CASE(1)
	CALL LOCATN ('%CPP',KCPP,MAX3,NMSL,2)  !STRESS-STRAIN-YOUNG
	CALL RELFILL('%CPS',WDEN,2,MATN,0)     !UNIT WEIGHT
	CALL RELFILL('%CPS',SNPT,7,MATN,0)     !STRESS-STRAIN POINTS
	NSPT = INT(SNPT)
	ALLOCATE(FFPS(3,NSPT))
	MAX  = MAX3/3
	DO ISPT = 1,NSPT
	NUM = ISPT
	CALL RELFILL('%CPP',FFPS(1,ISPT),NUM,MATN,0)  !STRESS
	NUM = ISPT + MAX
	CALL RELFILL('%CPP',FFPS(2,ISPT),NUM,MATN,0)  !STRAIN
	NUM = ISPT + MAX + MAX
	CALL RELFILL('%CPP',FFPS(3,ISPT),NUM,MATN,0)  !YOUNG
	ENDDO

	CASE(2)
	CALL LOCATN ('%CBP',KCPP,MAX3,NMSL,2)  !STRESS-STRAIN-YOUNG
	CALL RELFILL('%CBS',WDEN,2,MATN,0)     !UNIT WEIGHT
	CALL RELFILL('%CBS',SNPT,5,MATN,0)     !STRESS-STRAIN POINTS
	NSPT = INT(SNPT)
	ALLOCATE(FFPS(3,NSPT))
	MAX  = MAX3/3
	DO ISPT = 1,NSPT
	NUM = ISPT
	CALL RELFILL('%CBP',FFPS(1,ISPT),NUM,MATN,0)  !STRESS
	NUM = ISPT + MAX
	CALL RELFILL('%CBP',FFPS(2,ISPT),NUM,MATN,0)  !STRAIN
	NUM = ISPT + MAX + MAX
	CALL RELFILL('%CBP',FFPS(3,ISPT),NUM,MATN,0)  !YOUNG
	ENDDO

	ENDSELECT


	YUNG = FFPS(3,1)  !FIRST YOUNG MODULUS******
	
C	CALCULATE THE INITIAL LENGTH FROM GIVEN PRETENSION FORCE
	CALL CNINLEN(ELN,Z,T,AREA,YUNG,WDEN,FHOR,CLNO)



	CALL PCAFX2 (Z,T,AREA,YUNG,CLNO,WDEN,FOC)

	ALPHA = 1.0E-6
	H = Z+ALPHA
	V = T
	CALL PCAFX2 (H,V,AREA,YUNG,CLNO,WDEN,FO1)

	V = T+ALPHA
	H = Z
	CALL PCAFX2 (H,V,AREA,YUNG,CLNO,WDEN,FO2)

	A1 = (FO1(3)-FOC(3))/(ALPHA)
	A2 = (FO1(4)-FOC(4))/(ALPHA)
	A3 = (FO2(3)-FOC(3))/(ALPHA)
	A4 = (FO2(4)-FOC(4))/(ALPHA)

	FCO = 0.0D0
	FCO(1:2) = FOC(1:2)
	FCO(4:5) = FOC(3:4)
	RE = MATMUL(TRANSPOSE(TRANS),FCO)


	CSTIF = 0.0D0

	CSTIF(1,1) = A1
	CSTIF(2,1) = A2
	CSTIF(1,2) = A3
	CSTIF(2,2) = A4

	CSTIF(4,4) = A1
	CSTIF(5,4) = A2
	CSTIF(4,5) = A3
	CSTIF(5,5) = A4

	CSTIF(1,4) = -A1
	CSTIF(2,4) = -A2
	CSTIF(1,5) = -A3
	CSTIF(2,5) = -A4

	CSTIF(4,1) = -A1
	CSTIF(5,1) = -A2
	CSTIF(4,2) = -A3
	CSTIF(5,2) = -A4


	TOL = 1.0e-6
	SMAX = 0.0D0
	DO I = 1,6
	IF(ABS(CSTIF(I,I)).GT.SMAX) SMAX = ABS(CSTIF(I,I))
	ENDDO
	DO I = 1,6
	IF(ABS(CSTIF(I,I)).LT.TOL) CSTIF(I,I) = CSTIF(I,I) + SMAX
	ENDDO

	SKR = MATMUL(TRANSPOSE(TRANS),MATMUL(CSTIF,TRANS))

	KK = 1
	DO I = 1,6
	DO J = I,6
	S(KK) = SKR(I,J)
	KK = KK+1
	ENDDO
	ENDDO


	AF7(N7_S1:N7_S2) = RE(1:6)
	AF7(N7_R1:N7_R2) =  S(1:21)
C     ------------------------------------------------------------


	AF5(1) = FORC	
	AF5(2) = FORN		
	AF5(3) = MCODEP	
	AF5(4) = EMODP	
	AF5(5) = EMP	  !TOTAL MECHA STRAIN
	AF5(6) = ENP	  !TOTAL NON-MECHA STRAIN
	AF5(7) = EPSTN    !TOTAL PLASTIC STRAIN
	AF5(8) = RLXP	  !TOTAL RELAXATION FORCE


	NPM(1:4)  = [N5,MFIB,MGAS,MPRT]
	NPI(1:4)  = [N5,1   ,1   ,1   ]
	CALL CALLREAL(AF5,AAX,NDX5,NPM,NPI,4,'WRIT') 	

	NPM(1:2)  = [N7,MGAS]
	NPI(1:2)  = [N7,1   ]
	CALL CALLREAL(AF7,AAX,NDX7,NPM,NPI,2,'WRIT')  


	DEALLOCATE(FFPS)

300	CONTINUE


	DEALLOCATE(IF3,AF4,AF5,AF7)


	RETURN

	END



C	=======================================================================
C	=== CONSTRUCTION ANALYSIS =============== SONGSAK NOV2007 =============
C	=======================================================================

	SUBROUTINE CTAUPD2(IEG,IEL,IAX,AAX)
	IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER*4 (I-N)
C	LTMOPT(2)  WORKING ON NON-MECHANICAL DATA
C	 0 = NO UPDATE DATA
C	 1 = UPDATE DATA AT START OF TIME STEP (THIS SUBROUTINE)
C	 2 = UPDATE DATA AT END OF TIME STEP
C	 3 = UPDATE DATA FOREACH ITERATION STEP

	DIMENSION DATE(2)
	DIMENSION NPM(10),NPI(10),IAX(1),AAX(1)


	ALLOCATABLE IF3(:),AF5(:),AF7(:)
C	----------------------------------------
C	GROUP DATA
C	----------------------------------------
	CALL INTFILL('%GRP',ITYPE,1 ,IEG,0) !
	CALL INTFILL('%GRP',ISTYP,2 ,IEG,0) !
	CALL INTFILL('%GRP',NELE ,3 ,IEG,0) !
	CALL INTFILL('%GRP',MPRT ,4 ,IEG,0) !MAX NUM OF TENDON POINT
	CALL INTFILL('%GRP',MGAS ,5 ,IEG,0) !
	CALL INTFILL('%GRP',MFIB ,6 ,IEG,0) !
	CALL INTFILL('%GRP',NEF  ,7 ,IEG,0) !
	CALL INTFILL('%GRP',NNM  ,8 ,IEG,0) !
	CALL INTFILL('%GRP',NNF  ,9 ,IEG,0) !
	CALL INTFILL('%GRP',NGR  ,10,IEG,0) !
	CALL INTFILL('%GRP',NGS  ,11,IEG,0) !
	CALL INTFILL('%GRP',NGT  ,12,IEG,0) !
C	GROUP FILE
	CALL INTFILL('%GRF',N3   ,3 ,IEG,0) !
	CALL INTFILL('%GRF',N5   ,5 ,IEG,0) !
	CALL INTFILL('%GRF',N7   ,7 ,IEG,0) !

	CALL INTFILL('%GRF',NDX3 ,13,IEG,0) !
	CALL INTFILL('%GRF',NDX5 ,15,IEG,0) !
	CALL INTFILL('%GRF',NDX7 ,17,IEG,0) !
C	----------------------------------------
	ALLOCATE(IF3(N3),AF5(N5),AF7(N7))


C	CALLING LOPT2
      CALL INTFILL('%SOL',LOPT2,1,2,0)

C	CALL TODAY
	CALL RELFILL('-SOV',TODAY,1,1,0) 

C	THIRD FILE INTG
	NPM(1) = N3
	NPI(1) = N3
	CALL CALLINTG(IF3,IAX,NDX3,NPM,NPI,1,'READ')
	IXIST = IF3(4)	                                !EXISTING FLAG 


	IF (IXIST.EQ. 0) GOTO 300 ! NEVER EXISTED & CURRENTLY REMOVED

	NPM(1:4)  = [N5,MFIB,MGAS,MPRT]
	NPI(1:4)  = [N5,1   ,1   ,1   ]
	CALL CALLREAL(AF5,AAX,NDX5,NPM,NPI,4,'READ') 
	FORC	= AF5(1)
	FORN	= AF5(2)
	MCODEP= AF5(3)
	EMODP	= AF5(4)
	EMP	= AF5(5)  !TOTAL MECHA STRAIN
	ENP	= AF5(6)  !TOTAL NON-MECHA STRAIN
	EPSTN = AF5(7)  !TOTAL PLASTIC STRAIN
	RLXP  = AF5(8)  !TOTAL RELAXATION FORCE

	NPM(1:2)  = [N7,MGAS]
	NPI(1:2)  = [N7,1   ]
	CALL CALLREAL(AF7,AAX,NDX7,NPM,NPI,2,'READ') 
	N7_R1 = 1       !POINTER OF RIGIDITY
	N7_R2 = 21      !POINTER OF RIGIDITY
	N7_S1 = 22      !POINTER OF MECHANICAL STRESS
	N7_S2 = 27      !POINTER OF MECHANICAL STRESS
	N7_N1 = 28      !POINTER OF NON-MECHANICAL STRESS
	N7_N2 = 33      !POINTER OF NON-MECHANICAL STRESS

	ENP  = 0.0D0    !NO NON-MECHANICAL FOR CATENARY
	FORN = 0.0D0
	AF7(N7_N1:N7_N2) = FORN


	AF5(1) = FORC	
	AF5(2) = FORN		
	AF5(3) = MCODEP	
	AF5(4) = EMODP	
	AF5(5) = EMP	  !TOTAL MECHA STRAIN
	AF5(6) = ENP	  !TOTAL NON-MECHA STRAIN
	AF5(7) = EPSTN    !TOTAL PLASTIC STRAIN
	AF5(8) = RLXP	  !TOTAL RELAXATION FORCE


	NPM(1:4)  = [N5,MFIB,MGAS,MPRT]
	NPI(1:4)  = [N5,1   ,1   ,1   ]
	CALL CALLREAL(AF5,AAX,NDX5,NPM,NPI,4,'WRIT') 	

	NPM(1:2)  = [N7,MGAS]
	NPI(1:2)  = [N7,1   ]
	CALL CALLREAL(AF7,AAX,NDX7,NPM,NPI,2,'WRIT')  

300	CONTINUE


	DEALLOCATE(IF3,AF5,AF7)


	RETURN

	END



C	=======================================================================
C	=== CONSTRUCTION ANALYSIS =============== SONGSAK NOV2007 =============
C	=======================================================================

      SUBROUTINE CTAOPT3(IEG,IEL,COORD,S,RE,LSTF,LFOC,IAX,AAX)
	IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER*4 (I-N)

C	LTMOPT(3)
C	 0 = NO-ASSEMBLE OF RESISTING LOAD
C	 1 = ASSEMBLE OF NON-MECHANICAL INTERNAL LOAD
C	 2 = ASSEMBLE OF MECHANICAL INTERNAL LOAD
C	 3 = ASSEMBLE OF NON-MECHANICAL & MECHANICAL INTERNAL LOAD
C	 4 = ELEMENT FORCE + ASSEMBLE REACTION(FROM MECHANICAL) 


	DIMENSION VR(3,1)
	DIMENSION BBM(3,6),BBX(1,6)
	DIMENSION NPM(10),NPI(10),IAX(1),AAX(1)


	DIMENSION S(1),RE(1),COORD(3,1)
	DIMENSION AKG(6,6)

	ALLOCATABLE IF1(:),IF2(:),IF3(:),AF4(:),AF5(:),AF6(:),AF7(:)
C	----------------------------------------
C	GROUP DATA
C	----------------------------------------
	CALL INTFILL('%GRP',ITYPE,1 ,IEG,0) !
	CALL INTFILL('%GRP',ISTYP,2 ,IEG,0) !
	CALL INTFILL('%GRP',NELE ,3 ,IEG,0) !
	CALL INTFILL('%GRP',MPRT ,4 ,IEG,0) !
	CALL INTFILL('%GRP',MGAS ,5 ,IEG,0) !
	CALL INTFILL('%GRP',MFIB ,6 ,IEG,0) !
	CALL INTFILL('%GRP',NEF  ,7 ,IEG,0) !
	CALL INTFILL('%GRP',NNM  ,8 ,IEG,0) !
	CALL INTFILL('%GRP',NNF  ,9 ,IEG,0) !
	CALL INTFILL('%GRP',NGR  ,10,IEG,0) !
	CALL INTFILL('%GRP',NGS  ,11,IEG,0) !
	CALL INTFILL('%GRP',NGT  ,12,IEG,0) !
C	GROUP FILE
	CALL INTFILL('%GRF',N3   ,3 ,IEG,0) !
	CALL INTFILL('%GRF',N7   ,7 ,IEG,0) !

	CALL INTFILL('%GRF',NDX3 ,13,IEG,0) !
	CALL INTFILL('%GRF',NDX7 ,17,IEG,0) !
C	----------------------------------------
	ALLOCATE(IF3(N3),AF7(N7))


C	THIRD FILE INTG
	NPM(1) = N3
	NPI(1) = N3
	CALL CALLINTG(IF3,IAX,NDX3,NPM,NPI,1,'READ')
	IXIST = IF3(4)	                                !EXISTING FLAG 
	ISEC  = IF3(2)

	CALL RELFILL('$CSC',AREA ,1,ISEC,0)

	IF (IXIST.EQ. 0) GOTO 300 ! NEVER EXISTED & CURRENTLY REMOVED

	NPM(1:2)  = [N7,MGAS]
	NPI(1:2)  = [N7,1   ]
	CALL CALLREAL(AF7,AAX,NDX7,NPM,NPI,2,'READ')   !CALLING RIGIDITY AND STRESS (MCHA & NON-MCHA)
	N7_R1 = 1       !POINTER OF RIGIDITY
	N7_R2 = 21      !POINTER OF RIGIDITY
	N7_S1 = 22      !POINTER OF MECHANICAL STRESS
	N7_S2 = 27      !POINTER OF MECHANICAL STRESS
	N7_N1 = 28      !POINTER OF NON-MECHANICAL STRESS
	N7_N2 = 33      !POINTER OF NON-MECHANICAL STRESS


C	---------------------------
	IF(LSTF.GT.0) THEN
	S(1:21) = AF7(N7_R1:N7_R2)   !RIGIDITY
	ENDIF
	
	IF(LFOC.GT.0) THEN
	SELECTCASE(LFOC)


	CASE(1)
	RE(1:6) = AF7(N7_N1:N7_N2)   !NON-MECHA

	CASE(2)
	RE(1:6) = AF7(N7_S1:N7_S2)   !MECHA


	ENDSELECT
	ENDIF
C	---------------------------


300	CONTINUE


	DEALLOCATE(IF3,AF7)


	RETURN

	END



C	=======================================================================
C	=== CONSTRUCTION ANALYSIS =============== SONGSAK NOV2007 =============
C	=======================================================================
 

