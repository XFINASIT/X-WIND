	SUBROUTINE NLDYNA(W,AA,BB,CC)

C	==================================================================
C	PURPOSE:	TO PERFORM NONLINEAR DYNAMIC ANALYSIS
C
C	RLV		= REFERENCE LOAD VECTOR
C	RT		= LOAD AT TIME T
C	RET		= EQUILIBRIUM LOAD AT TIME T
C	RET		= EQUILIBRIUM LOAD AT K-1
C	TK		= STIFFNESS MATRIX
C	DM		= DAMPING/MASS MATRIX
C	DISPT	= TOTAL DISPLACEMENT AT TIME T
C	DISPK1	= TOTAL DISPLACMENT AT K-1
C	VL1		= VELOVITY AT K-1
C	==================================================================

	IMPLICIT REAL*8 (A-H,O-Z)

      CHARACTER*2 MARK
	CHARACTER*6 IPO

      COMMON /NUMB/ HED(20),MODEX,NRE,NSN,NEG,NBS,NLS,NLA,
     +              NSC,NSF,IDOF(9),LCS,ISOLOP,LSYMM
      COMMON /LOCA/ LID,LDS,LEL,LDC,LXY,LCH,LNU,LMP,LGP,LMS,LGS,
     1              LCO,LEX,LLM,LES,LEC,LED,LEI,LEE,LMA,LLF,LLV,
     2              LRE,LDI,LDL,LDT,LDK,LER,LEV,LTT,LWV,LAR,LBR,
     3              LVE,LDD,LRT,LBU,LBC,LVL,LAL,LEF,LDU,LPR,LLO,
	4              LRV,LRT1,LRET,LRET1,LDM,LDPT,LVL1,LMV,LXI,LCM,LCC,
	5			    LCN,LDIM,LFRE,LSFC,LLOF
      COMMON /ELEM/ NAME(2),ITYPE,ISTYP,NLOPT,MTMOD,NSINC,ITOLEY,
     1              NELE,NMPS,NGPS,NMP,NGP,NNM,NEX,NCO,NNF,NWG,NEFC,
     2              NPT,NWA,NWS,KEG,MEL,NNO,NEF,NELTOT,NMV,MTYP,ISECT
      COMMON /INOU/ ITI,ITO,ISO,NDATI,NPLOT,NKFAC,NELEM,
     1              IFPR(10),IFPL(10)

      COMMON /SOLU/ NEQ,NEQ1,NBLOCK,MK,BM,NWK,NWM,ISTOR,NFAC,
     +              NRED,KPOSD,DETK,DET1,DAVR,STOL
      COMMON /DYNA/ CDEN,IMASS
      COMMON /INCO/ A0,A1,A2,A3,A4,A5,A6,A7,A8,ALFA,BETA,
	1              A11,A12,ALF,IOPT
      COMMON /TIME/ DDT,CTIM,NINC
      COMMON /EIGN/ NSEIG,NROOT,NC,NNC,NITEM,IFSS,SHIFT0,EPS,IEIG,NEIG,
     +              ISOLV,IVPRT
      COMMON /ITER/ RHO,RHOP,RHOPREV,RTOL,ETOL,DLMAX,ALP,
	1              NSTEP,NPRIN,NDRAW,
	2			  KONEQ,NIREF,ITOPT,ICONV,NOLIN,KSTEP,
     3              LIMEQ(2),ITEMAX,NUMREF,NUMITE,ITETOT,LIMET

C----	Next Common Block added 12Dec03 by NguyenDV 
	COMMON /SPBC/ NSS,NLSS
C
      COMMON /FTIM/ TIM(20),IDATE,ITIME
C      COMMON /FLAG/ IFPRI,ISPRI,IFPLO,IFREF,IFEIG,ITASK
      COMMON /FLAG/ IFPRI,ISPRI,IFPLO,IFREF,IFEIG,ITASK,IFFLAG

      COMMON A(9000000),IA(9000000)

C	NEW EARTHQUAKE ANALYSIS SONGSAK SEP2007
	COMMON /LNDEQK/ LDEK,LPR2,LDESTP
	COMMON /LNDEQR/ EQAMP(3),EQGAP(3)

C	The COMMON block NDAM added Jan28/03 by NguyenDV
C	--------------
	DIMENSION W(1),SEF(NEQ,3),PER(10000),RES(30000)
	DIMENSION LBACK(5)

	DIMENSION AA(1)
	DIMENSION BB(1)
	DIMENSION CC(1)

	DIMENSION RFV(NEQ),RFC(NEQ)
	
C     --------------
C     INITIALISATION
C     --------------
7100	KSTEP = 0
      KSTRA = NIREF
      KRECO = 0
      KPRIN = 0
      KPLOT = 0
      NUMITE = 0
      INDPD = KPOSD
      NEQ3 = NEQ*3

	CTIM = 0.0
	ISTEP = 0

C     -----------------
C     SET CONTROL FLAGS
C     -----------------
      IFPRI = 0
      IFPLO = 0
      
      IF (NOLIN.GT.0) CALL CLEARA (A(LDI),NEQ3)
C     ----------------
C     FORM MASS MATRIX
C     ----------------
      ITASK = 5
	IFREF = 1
      IFEIG = 0
      ISPRI = 1
      CALL GRLOOP (IA(LEL),KSC)

C	SONGSAK NEW EARTHQUAKE SEP2007
	IF(LDEK.NE.0) THEN
	CALL SEIFVEC(IA(LMA),IA(LID),IDOF,NSN,NSF,NEQ,NWM,SEF,
	1			 PER,RES,NUMT,NEAQ,BB,'MASS')
	ENDIF

C     -------------------------
C     FORM DAMPING MATRIX: 
C-----Added 16Nov03 by NguyenDV
C     -------------------------
      ITASK = 6
	IFREF = 1
	IFEIG = 0
      ISPRI = 1
      CALL GRLOOP (IA(LEL),KSC)

C     ----------------------------------
C	START TIME INCREMENTATION LOOP
C	ENTRY FOR NEXT TIME/LOAD INCREMENT
C     ----------------------------------
7200  KSTEP = KSTEP+1
      KPRIN = KPRIN+1
      KPLOT = KPLOT+1
	CTIM  = CTIM + DDT

C     -----------------
C     SET CONTROL FLAGS
C     -----------------
      IFPRI = NPRIN-KPRIN
      ISPRI = KPRIN-1
      IFPLO = NDRAW-KPLOT
      IFEIG = 1
      NUMREF = 0
C	NEXT LINE ADDED BY GILSON - JULY2002
	IFFLAG = 2

      IF (IFPRI.EQ.0) KPRIN = 0
      IF (IFPLO.EQ.0) KPLOT = 0
      IF (KSTEP.EQ.1) ISPRI = 1
      IF (KSTEP.EQ.1) IFEIG = 1
C     ---------------------------------------------------------
C     ENTRY FOR RETAKING A STEP IF CONVERGENCE FAILURE OCCURRED
C     ---------------------------------------------------------
7300  REWIND NPLOT

	CALL CLEROUT

      ITASK = 1
      IFREF = 1
      IF (KSTRA.GE.1) IFREF = 0
      IF (KSTEP.EQ.1) IFREF = 0
      IF (NOLIN.GT.0) CALL CLEARA (A(LDI),NEQ)
      IF (ICONV.LT.0 .AND. KSTRA.NE.1) GOTO 7800
C     ---------------------------------------------------------
C     CALCULATE EQUILIBRIUM LOADS CORRESPONDING TO DISPLACEMENT
C     FIELD AT STEP K-1 AND
C     FIND NEW TANGENTIAL STIFFNESS MATRIX (IFREF=0)
C     ---------------------------------------------------------
      IF (NOLIN.NE.0) CALL CLEARA (A(LRE),NEQ)
      CALL GRLOOP (IA(LEL),KSC)
      IF (IFPR(6).EQ.1) CALL MATOUT (A(LRE),NEQ,1,1,22,'E',
     1                               15,10,2,'STAT EQ LD')

	IF (ISTEP.NE.KSTEP) CALL MOVE(A(LRET),A(LRET1),NEQ)
	ISTEP = KSTEP
	CALL MOVE(A(LRE),A(LRET),NEQ)
C     --------------------------------------------------------
C     FORM RAYLEIGH DAMPING MATRIX (ALFA OR/AND BETA .NE. 0.0)
C     --------------------------------------------------------
	IF (IFREF.EQ.0) THEN

      LBACK(1) = IFEIG
      LBACK(2) = IFREF
      LBACK(3) = ISPRI
      LBACK(4) = ITASK
	IFEIG = 0
	IFREF = 1
      ISPRI = 1
      ITASK = 6
      CALL GRLOOP (IA(LEL),KSC) !DAMPING
      IFEIG = LBACK(1) 
      IFREF = LBACK(2) 
      ISPRI = LBACK(3) 
      ITASK = LBACK(4) 
      
	CALL RAYDAM (IA(LMA),ALFA,BETA,NWK,NWM,NEQ,AA,BB,CC,
	1			 'STIF','MASS','DAMP')

	ENDIF
C	---------------------------------------------
C	FORM CURRENT APPLIED FORCE VECTOR - TIME T+DT
C	---------------------------------------------
	IF(LDEK.EQ.0) THEN
	RFV(1:NEQ) = 0.0D0
	RFC(1:NEQ) = 0.0D0
      CALL OFFSHFORC(RFV,1,KSTEP,NEQ,'VARY','RADD') !VARY OFFSHORE LOAD -- LOADCASE 1
      CALL OFFSHFORC(RFC,1,KSTEP,NEQ,'CONT','RADD') !CONSTANT OFFSHORE LOAD -- LOADCASE 1	
      
      REXTERNAL = 0.
      CALL RHSDYNA (A(LLF),A(LLV),A(LLO),RFV,RFC,REXTERNAL,A(LEF),A(LPR),A(LRT1),NEQ,2)
	ENDIF

C	--------------------------------------------------------
C	SONGSAK NEW EARTHQUAKE SEP2007
	IF(LDEK.NE.0) THEN
	CALL SEIFNEW(CTIM,PER,RES,NUMT,NEQ,NEAQ,SEF,A(LEF))
	ENDIF

C     --------------------------------------
C	FORM EFFECTIVE INCREMENTAL LOAD VECTOR
C     --------------------------------------
7400  CALL CPU_TIME (TIM1)

	IF (ITYPE.NE.5) GOTO 7500
	IF (NLOPT.EQ.1) GOTO 7500
	CALL MOTRAN (IA(LID),A(LDT),A(LDI),A(LEF),NSF)

7500	CALL MOVE (A(LEF),A(LRV),NEQ)

	CALL IEFLD (IA(LMA),A(LRE),A(LRET),A(LEF),A(LDT),
	1			A(LDT),A(LVL),A(LAL),A(LDU),NEQ,NWM,
     2			BB,CC,'MASS','DAMP')
	CALL MOVE (A(LEF),A(LDL),NEQ)

7600  IF (IFPR(6).EQ.1) CALL MATOUT (A(LDL),NEQ,1,1,22,'E',
     1                               15,10,2,'LOAD VECT.')
      CALL CPU_TIME (TIM2)
      TIM(10) = TIM(10) + (TIM2-TIM1)
C	-------------------------------
C	FORM EFFECTIVE STIFFNESS MATRIX
C	-------------------------------
	CALL EFSTIF (IA(LMA),NWK,NWM,NEQ,AA,BB,CC,
	1			 'STIF','MASS','DAMP','EFTF')

C     -----------------------------------------------------
C     TRIANGULARIZE EFFECTIVE STIFFNESS MATRIX IF (IFREF=0)
C     AND SOLVE FOR INCREMENT IN DISPLACEMENT
C     -----------------------------------------------------
      IF (IFREF.GT.0) GOTO 7800
      NUMREF = NUMREF+1

      CALL COLSOL (IA(LMA),AA,A(LDK),A(LDL),1,INDPD,'EFTF','TEMP')

      LLAST = LDL+NEQ-1
      WRITE (NPLOT) (A(I),I=LDL,LLAST)

7800  CONTINUE
	CALL COLSOL (IA(LMA),AA,A(LDK),A(LDL),2,INDPD,'TEMP','TEMP')

7900  IF (NOLIN.EQ.0) GOTO 7925
      CALL VECADD (A(LDI),A(LDL),A(LDI),RHO,DINORM,NEQ)

7925  IF (IFPR(7).EQ.1) CALL MATOUT (A(LDL),NEQ,1D0,1D0,22,'E',
     +                               15,10,2,'DISPLACEM.')
C     -------------------------------------------
C     PERFORM EQUILIBRIUM ITERATIONS IF KSTRA<4
C     -------------------------------------------
      IF (ICONV.GE.0) NUMITE = 0
      ICONV = 0
      IF (KSTRA.GE.4 .OR. NOLIN.EQ.0) GOTO 7950
      CALL EQITD(A(LRV),A(LRE),A(LRET),A(LRET1),A(LDI),
	1		   A(LDL),A(LDT),A(LDT),A(LVL1),KSTRA,KITE,
     2		   AA,BB,CC,'STIF','MASS','DAMP')

7950  CALL RTKDYN (IA(LID),A(LLF),A(LDI),A(LDL),A(LDT),A(LDK),
     1             KRECO,KSTRA,KITE,NSF,MARK,LSTRA,KREF,NODE,IPO,AA)
      IF (ICONV.LT.0) GOTO 7300

C	NEXT LINE ADDED BY GILSON - JULY2002
	IF (IFFLAG.EQ.1.AND.KSTEP.LT.NINC) GOTO 7300

	IF (ITYPE .NE. 5 .OR. ITYPE .NE. 9) GOTO 7975
	IF (NLOPT .EQ. 1) GOTO 7975
	CALL ADDROT (IA(LID),A(LDT),A(LDI),A(LDL),NSF,ISO)
C     -----------------------------------------------
C     CALCULATE AND PRINT NEW DISPLACEMENTS (IFPRI=0)
C     -----------------------------------------------
7975  CALL NEWDIS (IA(LID),A(LDI),A(LDT),NSF)

C	NEXT LINE ADDED BY GILSON - JULY2002
	IF (IFFLAG.EQ.1.AND.KSTEP.GE.NINC) RETURN

C	NEW OUTPUT SONGSAK JUL2007
	CALL PRNFLAG('NONE','NONE','NONE','NONE','DISP','NONE','NONE')
	CALL PRNOUT('STND','PONE','NONE',KSTEP)

	IF(KSTEP.GT.1) THEN
	CALL PRNFLAG('ELEM','LINK','GSUP','LSUP','NONE','GSPG','LSPG')
	CALL PRNOUT('STND','PONE','NONE',KSTEP-1)
	ENDIF

C     ------------------------------------------
C     UPDATE DISP., VELO. AND ACCE. AT TIME T+DT
C     ------------------------------------------
	CALL MOVE (A(LVL),A(LVL1),NEQ)
      CALL CDVA (IA(LID),A(LDT),A(LVL),A(LAL),A(LDPT),NSF
	1		   ,LSTRA,KITE,MARK,KREF,NODE,IPO)
	CALL MOVE (A(LDT),A(LDPT),NEQ)

      IF (KSTEP.LT.NINC) GOTO 7200
C     ------------------------------------------
C     CALCULATE AND PRINT STRESSES FOR LAST STEP
C     SOLVE INITIAL EIGENVALUE PROBLEM (IEIG>0)
C     ------------------------------------------
      IFREF = 1
      ISPRI = 0
      IFEIG = 1
      IF (IEIG.GT.0 .AND. KSTEP.LE.1) IFEIG = 0
      ITASK = 3
      CALL GRLOOP (IA(LEL),KSC)

C	SONGSAK NEW OUTPUT JUL2007
	IF(KSTEP.GT.1) THEN
	CALL PRNFLAG('ELEM','LINK','GSUP','LSUP','NONE','GSPG','LSPG')
	CALL PRNOUT('STND','PONE','NONE',KSTEP)
	ENDIF

      IF (IFEIG.NE.0) RETURN

      RETURN
	END
C
C=====================================================================
	SUBROUTINE IEFLD (MAXA,RE,RET,EFLO,DISP,DISPK1,VELO,ACCE,
	1					DUMY,NEQ,NWM,BB,CC,TYP1,TYP2)
	IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER*4 (I-N)
	CHARACTER*4 TYP1,TYP2
C     ----------------------------------------------------------------
C     FORM EFFECTIVE INCREMENTAL RHS FORCE VECTOR
C		[EFLO]=[EFLO(T+ALF)]-(1+ALF)*RE+[M]{D,V,A}+[C]{D,V,A}
C	----------------------------------------------------------------
C	ALF			 = HHT ALPHA PARAMETER
C     AA(NWK)		 = STIFFNESS MATRIX STRORED IN COMPACTED FORM
C     BB(NWM)		 = MASS MATRIX STRORED IN COMPACTED FORM
C     MAXA(NEQ1)	 = DIAGONAL ADDRESSES
C     EFLO(NEQ)	 = EFFECTIVE LOAD VECTOR
C     DISP(NEQ)	 = TOTAL DISPLACEMENTS
C	DISPI(NEQ)	 = SUM OF DISPLACEMENT INC. FOR THE CURRENT STEP
C	DISPK1(NEQ)	 = TOTAL DISPLACEMENTS A ITERATION K-1
C     VELO(NEQ)	 = VELOCITIES
C     ACCE(NEQ)	 = ACCELERATIONS
C     DUMY(NEQ)	 = DYMMY VECTOR
C	TK(NWK)		 = STIFFNESS MATRIX (NOT EFFECTIVE STIFFNESS)
C	RE			 = EQUILIBRIUM FORCES AT TIME T+dT
C	RET			 = EQUILIBRIUM FORCES AT TIME T
C	RT			 = REFERENCE LOAD AT STEP (KSTEP - 1)
C     ----------------------------------------------------------------
      COMMON /INCO/ A0,A1,A2,A3,A4,A5,A6,A7,A8,ALFA,BETA,
	1              A11,A12,ALF,IOPT
C	-----------------------------------------------------
	DIMENSION MAXA(1),RE(1),RET(1),EFLO(1),DISP(1),
	1			DISPK1(1),VELO(1),ACCE(1),DUMY(1)
	DIMENSION BB(1),CC(1)

	GOTO (1,1,1,4), IOPT

1	WRITE (6,1000)
1000	FORMAT (1X,27HIMPROPER INTEGRATION OPTION)
	STOP
C	---------------------------
C	HILBER-HUGHES-TAYLOR METHOD
C	---------------------------
C	-----------------------------
C	CONTRIBUTION FROM MASS MATRIX
C	-----------------------------
4	DO I = 1,NEQ
	DUMY(I) = A0*(DISP(I)-DISPK1(I)) + A2*VELO(I)+ A3*ACCE(I)
	ENDDO

C	---------------------------
C	FOR CONSTISTENT MASS MATRIX
C	---------------------------
	CALL MAMULT (MAXA,BB,DUMY,EFLO,TYP1,'ADD')

C	--------------------------------
C	CONTRIBUTION FROM DAMPING MATRIX
C	--------------------------------
420	IF (ALFA.NE.0.0 .OR. BETA.NE.0.0) THEN

	FACT=1.0+ALF
	DO I = 1,NEQ
	DUMY(I)=FACT*A1*(DISP(I)-DISPK1(I))+(FACT*A4+ALF)*VELO(I)+
	1		FACT*A5*ACCE(I)
	ENDDO
C	---------------------------
C	FOR CONSTISTENT DAMP MATRIX
C	---------------------------
	CALL MAMULT (MAXA,CC,DUMY,EFLO,TYP2,'ADD')

	ENDIF
C	--------------------------
C	SUBTRACT EQUILIBIUM FORCES
C	--------------------------
	FACT = 1.0 + ALF
	DO I = 1,NEQ
	EFLO(I) = EFLO(I) + FACT*RE(I) - ALF*RET(I)
	ENDDO

900	RETURN
	END
C
C=====================================================================
      SUBROUTINE RTKDYN (ID,RFAC,DISPI,DISLI,DISP,DD,
     1                   KRECO,KSTRA,KITE,MSF,MARK,LSTRA,KREF,NODE,IPO,
     2				   AA)
	IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER*4 (I-N)
C     ----------------------------------------------------------------
C     CONTROLS CHANGE OF NONLINEAR SOLUTION METHOD
C     INITIALISES CONTROL FLAGS AND ARRAYS TO RETAKE A STEP IN CASE
C     CONVERGENCE FAILURE OCCURED
C     ---------------------------
C     INPUT, OUTPUT VARIABLES
C	-----------------------
C     RFAC(NSTEP) = LOAD OR DISPLACEMENT INCREMENTS
C     KRECO       = RECOVERY COUNTER
C     KSTRA       = RETURNS STRATEGY FOR NEXT STEP (ICONV > 0) OR
C                   FOR CURRENT STEP (ICONV < 0)
C     KITE        = NUMBER OF ITERATIONS USED TO ESTABLISH EQUILIBRIUM
C     ----------------------------------------------------------------
      LOGICAL PROMPT,ERROR

      CHARACTER*2 MARK
	CHARACTER*6 IFREE(7)
	CHARACTER*6 IPO

      COMMON /NUMB/ HED(20),MODEX,NRE,NSN,NEG,NBS,NLS,NLA,
     +              NSC,NSF,IDOF(9),LCS,ISOLOP,LSYMM
      COMMON /LOCA/ LID,LDS,LEL,LDC,LXY,LCH,LNU,LMP,LGP,LMS,LGS,
     1              LCO,LEX,LLM,LES,LEC,LED,LEI,LEE,LMA,LLF,LLV,
     2              LRE,LDI,LDL,LDT,LDK,LER,LEV,LTT,LWV,LAR,LBR,
     3              LVE,LDD,LRT,LBU,LBC,LVL,LAL,LEF,LDU,LPR,LLO,
	4              LRV,LRT1,LRET,LRET1,LDM,LDPT,LVL1,LMV,LXI,LCM,LCC,
	5			    LCN,LDIM,LFRE,LSFC,LLOF
      COMMON /LOGO/ PROMPT,ERROR,ITEST
      COMMON /INOU/ ITI,ITO,ISO,NDATI,NPLOT,NKFAC,NELEM,
     1              IFPR(10),IFPL(10)
C      COMMON /SOLU/ NEQ,NEQ1,NBLOCK,MK,BM,NWK,NWM,ISTOR,STOL,NFAC,
C     +              NRED,KPOSD,DETK,DET1,DAVR
      COMMON /SOLU/ NEQ,NEQ1,NBLOCK,MK,BM,NWK,NWM,ISTOR,NFAC,
     +              NRED,KPOSD,DETK,DET1,DAVR,STOL
      COMMON /ITER/ RHO,RHOP,RHOPREV,RTOL,ETOL,DLMAX,ALP,
	1              NSTEP,NPRIN,NDRAW,
	2			  KONEQ,NIREF,ITOPT,ICONV,NOLIN,KSTEP,
     3              LIMEQ(2),ITEMAX,NUMREF,NUMITE,ITETOT,LIMET
C      COMMON /FLAG/ IFPRI,ISPRI,IFPLO,IFREF,IFEIG,ITASK
      COMMON /FLAG/ IFPRI,ISPRI,IFPLO,IFREF,IFEIG,ITASK,IFFLAG
      COMMON /TIME/ DDT,CTIM,NINC

      COMMON A(9000000),IA(9000000)

      DIMENSION ID(MSF,1),RFAC(1),DISPI(1),DISLI(1),DISP(NEQ)
      DIMENSION DD(1),AA(1)
      DATA IFREE /'X-DISP','Y-DISP','Z-DISP','X-ROTA','Y-ROTA',
     +            'Z-ROTA','WARP. '/
C     --------------------------------------------
C     INITIALISATION, PRINT TITLE FOR JOB PROGRESS
C     --------------------------------------------
      LSTRA = KSTRA
      KREF  = KSTRA
      IF (KSTRA.EQ.0 .AND. KSTEP.EQ.1) KREF = 1
      IF (KSTRA.EQ.3) KREF = KITE +1
      IF (KSTRA.EQ.4) KREF = 1

      IF (KSTEP.GT.1 .OR. KRECO.NE.0) GOTO 10
      REWIND 1

      WRITE (100,1000)
      WRITE (ITO,1000)
      WRITE (10,1000)

      IF (ICONV.LT.0) KRECO = 4

C 10   IF (ICONV) 200,100,100
10	IF (IFFLAG.EQ.1) GOTO 200
	IF (ICONV) 200,100,100
C     -----------------------------------------------------
C     CONVERGENCE ACHIEVED, SELECT LOWER STRATEGY (KRECO=0)
C     ADJUST SIZE OF NEXT INCREMENT ACCORDING TO KITE
C     -----------------------------------------------------
100	RHOP = CTIM
      MARK = '  '
      IF (KRECO.EQ.4) MARK = '**'
      IF (KRECO.EQ.0 .OR. KITE.GE.ITEMAX/2) GOTO 400
      KRECO = KRECO-1
      IF (KRECO.GT.0 .OR. KSTRA.EQ.NIREF) GOTO 400
      KSTRA = KSTRA-1
      KRECO = 4
	GOTO 400
C     ------------------------------------------------------
C     INITIALISE TOTAL LOAD LEVEL RHO
C     REDUCE LOADING (DISPLACEMENT) INCREMENT AND CLEAR LOAD
C     FACTORS > KSTEP
C     ------------------------------------------------------
 200  FAC = 2.0
      IF (KRECO.EQ.4 .AND. NUMITE.EQ.KITE) FAC = 1.0
C	NEXT LINE ADDED BY GILSON - JULY2002
	IF (IFFLAG.EQ.1) FAC = 1.0
C	NEXT LINE CHANGED BY GILSON - JULY2002
C      KSTRA = KSTRA+1
	IF (IFFLAG.NE.1) KSTRA   = KSTRA  + 1				!IF NO COMPOSITE CHECK (STANDARD)
	IF (IFFLAG.NE.1) RTOL    = RTOL   + 10.0*RTOL		!IF NO COMPOSITE CHECK (STANDARD) ADD HERE BY SONGSAK TO INCREASE THE TOLERENCE IF CONVERGENCE FAILURE OCCURRED
	IF (RTOL.GT.0.1) RTOL = 0.1
	IF (IFFLAG.NE.1) ITEMAX  = ITEMAX + 2*ITEMAX		!IF NO COMPOSITE CHECK (STANDARD) ADD HERE BY SONGSAK TO INCREASE THE NUMBER OF ITERATION IF CONVERGENCE FAILURE OCCURRED

      KRECO = 4
      IFEIG = 1
      ISPRI = 1
C	CTIM  = CTIM - DDT + DDT/FAC
C	DDT   = DDT/FAC
      MARK  = '  '
      IF (NIREF.EQ.0) NIREF = 1
C     --------------------------------------------------------
C     PRINT JOB SUMMERY ONTO TAPE DATIN (TAPE 1)
C     --------------------------------------------------------
400	NODE = LIMEQ(1)
      IPOS = LIMEQ(2)
      IF (ITOPT.NE.3) GOTO 450

      DO 410  ISN=1,NSN
      DO 410  ISF=1,NSF
      IF (KONEQ.NE.ID(ISF,ISN)) GOTO 410
      IPOS = IDOF(ISF)
	IF (IPOS.LE.0.OR.IPOS.GT.3) GOTO 410
      NODE = ISN
      GOTO 450
410	CONTINUE

450	DELTA = 0.
      IPO   = IFREE(IPOS)
      IEQ   = ID(LIMEQ(2),LIMEQ(1))
      DELTA = DISP(IEQ)
      IF (NOLIN.NE.0) DELTA = DELTA + DISPI(IEQ)

C	NEXT LINE ADDED BY GILSON - JULY2002
	IF (IFFLAG.EQ.1) GOTO 505
500	IF (ICONV+1) 510,520,590

C	NEXT FOUR LINES ADDED BY GILSON - JULY2002
505	WRITE (100,1250) MARK,KSTEP,LSTRA,KREF,KITE,NODE,IPO,DETK
	WRITE (ITO,1250) MARK,KSTEP,LSTRA,KREF,KITE,NODE,IPO,DETK
      WRITE (10,1250) MARK,KSTEP,LSTRA,KREF,KITE,NODE,IPO,DETK
	IF (IFFLAG.EQ.1.AND.KSTEP.GE.NINC) GOTO 590
	GOTO 590

510	WRITE (100,1100) MARK,KSTEP,LSTRA,KREF,KITE,NODE,IPO,DETK
	WRITE (ITO,1100) MARK,KSTEP,LSTRA,KREF,KITE,NODE,IPO,DETK
      WRITE (10,1100) MARK,KSTEP,LSTRA,KREF,KITE,NODE,IPO,DETK
      GOTO 590
520	WRITE (100,1200) MARK,KSTEP,LSTRA,KREF,KITE,NODE,IPO,DETK
	WRITE (ITO,1200) MARK,KSTEP,LSTRA,KREF,KITE,NODE,IPO,DETK
      WRITE (10,1200) MARK,KSTEP,LSTRA,KREF,KITE,NODE,IPO,DETK

590	RETURN

1000	FORMAT (//32X,16(1H*)/32X,1H*,14X,1H*/
     1        32X,16H* JOB PROGRESS */32X,1H*,14X,1H*/32X,16(1H*)//
     2        35H   KSTEP KSTRA KREF KITE NODE  IPOS
     3        ,49H      DETK        TIME         RHO          DELTA
     4        ,26H         VEL         ACC  /1X,111(1H-)/)
1100	FORMAT (1X,A2,I4,I6,3I5,2X,A6,E11.3,2X
	1        ,24H * DIVERGENCE OCCURRED *)
1200	FORMAT (1X,A2,I4,I6,3I5,2X,A6,E11.3,2X
	1        ,24H * CONVERGENCE FAILURE *)
C	NEXT FORMAT LINE ADDED BY GILSON - JULY2002
 1250 FORMAT (1X,A1,I3,4I7,4X,A6,E11.3,2X,24H * PLY FAILURE OCCURRED*)

      END
C
C=====================================================================
	SUBROUTINE ENRM(DISPI,ENORM,R,RE,RE1,RINC,AC,VL,VL1,IFL,BB,CC,
	1				TYP1,TYP2)

C	----------------------------------------------------------------
C	PURPOSE
C		TO COMPUTE FOR THE INCREMENTAL CHANGE IN ENERGY USING THE
C		INITIAL INCREMENTAL DISPLACMENT
C	DESCRIPTION OF PARAMETERS
C		DM		-	DAMPING/MASS MATRIX
C		ENORM	-	INCREMENTAL CHANGE IN ENERGY
C		RINC	-	INCREMENTAL FORCE
C		AC		-	ACCELERATION
C		VL		-	VELOCITY
C	----------------------------------------------------------------
	IMPLICIT REAL*8 (A-H,O-Z)
	CHARACTER*4 TYP1,TYP2

      COMMON /LOCA/ LID,LDS,LEL,LDC,LXY,LCH,LNU,LMP,LGP,LMS,LGS,
     1              LCO,LEX,LLM,LES,LEC,LED,LEI,LEE,LMA,LLF,LLV,
     2              LRE,LDI,LDL,LDT,LDK,LER,LEV,LTT,LWV,LAR,LBR,
     3              LVE,LDD,LRT,LBU,LBC,LVL,LAL,LEF,LDU,LPR,LLO,
	4              LRV,LRT1,LRET,LRET1,LDM,LDPT,LVL1,LMV,LXI,LCM,LCC,
	5			    LCN,LDIM,LFRE,LSFC,LLOF

      COMMON /SOLU/ NEQ,NEQ1,NBLOCK,MK,BM,NWK,NWM,ISTOR,NFAC,
     +              NRED,KPOSD,DETK,DET1,DAVR,STOL
      COMMON /INCO/ A0,A1,A2,A3,A4,A5,A6,A7,A8,ALFA,BETA,
	1              A11,A12,ALF,IOPT
      COMMON A(9000000),IA(9000000)
C	--------------------------------------------------
	DIMENSION RINC(NEQ),R(NEQ),RE(1),RE1(NEQ),
	1			DISPI(1),AC(1),VL(1),VL1(1),DUM(NEQ)
	DIMENSION CC(1),DM(1)

	RINC = 0.0
C	------------------------------------------
C	CONTRIBUTION FROM CONSTISTENT MASS MATRIX
C	------------------------------------------
	CALL MAMULT (IA(LMA),BB,AC(1),RINC,TYP1,'ADD')

C	--------------------------------
C	CONTRIBUTION FORM DAMPING MATRIX
C	--------------------------------
20	IF (ALFA.NE.0.0 .OR. BETA.NE.0.0) THEN

C	---------------------------
C	FOR CONSTISTENT DAMP MATRIX
C	---------------------------
		FACT = 1.0 + ALF
		DUM = FACT*VL

		CALL MAMULT (IA(LMA),CC,DUM(1),RINC,TYP2,'ADD')

		DUM = -ALF*VL1

		CALL MAMULT (IA(LMA),CC,DUM(1),RINC,TYP2,'ADD')


	ENDIF
C	---------------------------------
C	CONTRIBUTION OF EQUILIBRIUM LOADS
C	---------------------------------
	FACT = 1.0 + ALF
	DO I = 1,NEQ
		RINC(I) = RINC(I) - FACT*RE(I) + ALF*RE1(I)
	ENDDO
C	------------------------------
C	CONTRIBUTION OF REFERENCE LOAD
C	------------------------------
	DO I = 1,NEQ
		RINC(I) = R(I) - RINC(I)
	ENDDO
C	-------------------
C	ENERGY NORM - ENORM
C	-------------------
	IF (IFL.EQ.1)
	1	CALL VENORM (DISPI(1),RINC(1),RINC(1),RHO,ENORM,NEQ)

	RETURN
	END
C
C======================================================================
      SUBROUTINE CDVA (ID,DISP,VELO,ACCE,DUMY,NSF,
	1				 LSTRA,KITE,MARK,KREF,NODE,IPO)
      IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER*4 (I-N)

      CHARACTER*2 MARK
	CHARACTER*6 IPO

C	---------------------------------------------------------
C	CALCULATE CURRENT DISP., VELO. & ACCE. AT TIME T+DT(KITE)
C	---------------------------------------------------------
      COMMON /ITER/ RHO,RHOP,RHOPREV,RTOL,ETOL,DLMAX,ALP,
	1              NSTEP,NPRIN,NDRAW,
	2			  KONEQ,NIREF,ITOPT,ICONV,NOLIN,KSTEP,
     3              LIMEQ(2),ITEMAX,NUMREF,NUMITE,ITETOT,LIMET
      COMMON /TIME/ DDT,CTIM,NINC
      COMMON /INCO/ A0,A1,A2,A3,A4,A5,A6,A7,A8,ALFA,BETA,
	1              A11,A12,ALF,IOPT
      COMMON /INOU/ ITI,ITO,ISO,NDATI,NPLOT,NKFAC,NELEM,
     1              IFPR(10),IFPL(10)
C      COMMON /SOLU/ NEQ,NEQ1,NBLOCK,MK,BM,NWK,NWM,ISTOR,STOL,NFAC,
C     +              NRED,KPOSD,DETK,DET1,DAVR
      COMMON /SOLU/ NEQ,NEQ1,NBLOCK,MK,BM,NWK,NWM,ISTOR,NFAC,
     +              NRED,KPOSD,DETK,DET1,DAVR,STOL

      DIMENSION ID(NSF,1),DISP(1),VELO(1),ACCE(1),DUMY(1)

C	-----------------------
C	NEWMARK AND HHT METHODS
C	-----------------------
2	DO I = 1,NEQ
		VEL = VELO(I)
		ACC = ACCE(I)
		ACCE(I) = A0*(DISP(I)-DUMY(I)) - A2*VEL - A3*ACC
		VELO(I) = VEL + A6*ACC + A7*ACCE(I)
	ENDDO 
	IF (LSTRA.EQ.0) GOTO 1000

900   IEQ   = ID(LIMEQ(2),LIMEQ(1))

	WRITE (100,1100) MARK,KSTEP,LSTRA,KREF,KITE,NODE,IPO,DETK,
	1				 CTIM,RHO,DISP(IEQ),VELO(IEQ),ACCE(IEQ)
	WRITE (ITO,1100) MARK,KSTEP,LSTRA,KREF,KITE,NODE,IPO,DETK,
	1				 CTIM,RHO,DISP(IEQ),VELO(IEQ),ACCE(IEQ)
      WRITE (10,1100) MARK,KSTEP,LSTRA,KREF,KITE,NODE,IPO,DETK,
	1				 CTIM,RHO,DISP(IEQ),VELO(IEQ),ACCE(IEQ)
                                                                       
1000	RETURN
1100	FORMAT (1X,A2,I4,I6,3I5,2X,A6,E11.3,5E13.4)

      END
C
C=====================================================================
      SUBROUTINE EQITD (R,RE,RET,RET1,DISPI,DISLI,DISP,DISPK1,
	1				  VL1,KSTRA,KITE,AA,BB,CC,TYP1,TYP2,TYP3)
	IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER*4 (I-N)
	CHARACTER*4 TYP1,TYP2,TYP3
C     ----------------------------------------------------------------
C     ITERATES FOR EQUILIBRIUM
C	------------------------
C     VARIABLES IN ARGUMENT LIST
C	--------------------------
C     R(NEQ)      = REFERENCE LOAD VECTOR
C     RFAC(NSTEP) = LOAD FACTORS TO DEFINE LOADING LEVEL
C     RE(NEQ)     = EQUILIBRIUM LOADS BALANCED IN CURRENT DISP.FIELD
C     DISPI(NEQ)  = SUM OF DISPL.INCREMENTS AT CURRENT LOAD STEP
C     DISLI(NEQ)  = 1.  NON-CONSERVATIVE AND TOTAL VECTOR
C                   2.  RESIDUAL LOAD VECTOR
C                   3.  ADDITIONAL LAST INCREMENT IN DISPLACEMENT
C     DISP(NEQ)   = TOTAL DISPLACEMENT VECTOR
C     KSTEP       = STEP NUMBER
C	-------------------------------------------
C     VARIABLES IN COMMON BLOCK /ITER/ AND /FLAG/
C	-------------------------------------------
C     NIREF       = NUMBER OF ITERATIONS BETWEEN REFORMING STIFFNESS
C     ITEMAX      = MAXIMUM NUMBER OF ITERATIONS PERMITTED
C     RTOL        = RELATIVE TOLERANCE TO MEASURE CONVERGENCE
C     ITOPT       = ITERATION OPTION (1=LOAD CONTROLED,LOAD FIXED,
C                                     2=LOAD INITIATED,LOAD FREE,
C                                     3=DISPLACEMENT CONTROLED)
C     NUMREF      = NUMBER OF STIFFNESS REFORMATIONS
C     NUMITE      = NUMBER OF PERFORMED EQUILIBRIUM ITERATIONS
C     RHO         = LOAD FACTOR WHICH DEFINES LOADING LEVEL WHICH
C                   IS BEST ADAPTED TO CURRENT DISP.FIELD (DISP)
C     ICONV       = FLAG FOR CONVERGENCE (1) OR DIVERGENCE (-1)
C     NOLIN       = FLAG FOR TYPE OF NONLINEAR ANALYSIS
C                   1 = MATERIALLY NONLINEAR ONLY
C                   2 = GEOMETRICALLY NONLINEAR ONLY
C                   3 = MATERIALLY AND GEOMETRICALLY NONLINEAR
C     ISPRI       = FLAG TO SUPPRESS STRESS OUTPUT (ISPRI=1)
C     IFREF       = FLAG FOR STIFFNESS REFORMATION (IFREF=0)
C	---------------
C     LOCAL VARIABLES
C	---------------
C     TOL         = RTOL*DNORM MAXIMUM ADMISSIBLE NORM OF DISPI
C     RRNORM      = NORM OF REFERENCE LOAD VECTOR
C     RENORM      = NORM OF RESIDUAL- TIMES REFERENCE LOAD VECTOR
C     DNORM       = NORM OF TOTAL DISPLACEMENT VECTOR DISP(ITE)
C     DINORM      = NORM OF LAST INCREMENT IN DISPLACEMENT (DISLI)
C     DISNRM      = NORM OF INITIAL FIRST DISPLACEMENT INCREMENT
C     -----------------------------------------------------------------

      CHARACTER*2 MARK
	CHARACTER*6 IPO

      COMMON /NUMB/ HED(20),MODEX,NRE,NSN,NEG,NBS,NLS,NLA,
     +              NSC,NSF,IDOF(9),LCS,ISOLOP,LSYMM
      COMMON /LOCA/ LID,LDS,LEL,LDC,LXY,LCH,LNU,LMP,LGP,LMS,LGS,
     1              LCO,LEX,LLM,LES,LEC,LED,LEI,LEE,LMA,LLF,LLV,
     2              LRE,LDI,LDL,LDT,LDK,LER,LEV,LTT,LWV,LAR,LBR,
     3              LVE,LDD,LRT,LBU,LBC,LVL,LAL,LEF,LDU,LPR,LLO,
	4              LRV,LRT1,LRET,LRET1,LDM,LDPT,LVL1,LMV,LXI,LCM,LCC,
	5			    LCN,LDIM,LFRE,LSFC,LLOF
      COMMON /ELEM/ NAME(2),ITYPE,ISTYP,NLOPT,MTMOD,NSINC,ITOLEY,
     1              NELE,NMPS,NGPS,NMP,NGP,NNM,NEX,NCO,NNF,NWG,NEFC,
     2              NPT,NWA,NWS,KEG,MEL,NNO,NEF,NELTOT,NMV,MTYP,ISECT
      COMMON /INOU/ ITI,ITO,ISO,NDATI,NPLOT,NKFAC,NELEM,
     1              IFPR(10),IFPL(10)
C      COMMON /SOLU/ NEQ,NEQ1,NBLOCK,MK,BM,NWK,NWM,ISTOR,STOL,NFAC,
C     +              NRED,KPOSD,DETK,DET1,DAVR
      COMMON /SOLU/ NEQ,NEQ1,NBLOCK,MK,BM,NWK,NWM,ISTOR,NFAC,
     +              NRED,KPOSD,DETK,DET1,DAVR,STOL
      COMMON /ITER/ RHO,RHOP,RHOPREV,RTOL,ETOL,DLMAX,ALP,
	1              NSTEP,NPRIN,NDRAW,
	2			  KONEQ,NIREF,ITOPT,ICONV,NOLIN,KSTEP,
     3              LIMEQ(2),ITEMAX,NUMREF,NUMITE,ITETOT,LIMET
      COMMON /FTIM/ TIM(20),IDATE,ITIME
C      COMMON /FLAG/ IFPRI,ISPRI,IFPLO,IFREF,IFEIG,ITASK
      COMMON /FLAG/ IFPRI,ISPRI,IFPLO,IFREF,IFEIG,ITASK,IFFLAG
      COMMON A(9000000),IA(9000000)

C
      DIMENSION R(NEQ),RE(1),RET(NEQ),RET1(NEQ),
	1			DISPI(NEQ),DISLI(NEQ),DISP(NEQ),DISPK1(NEQ),
	2			RINC(NEQ),DT(NEQ),DI(NEQ),VL1(NEQ),
     3			AC(NEQ),VL(NEQ),
	4			DMT(NEQ),DMI(NEQ),DML(NEQ)
	DIMENSION AA(1),BB(1),CC(1)
C     --------------
C     INITIALISATION
C     --------------
      CALL CPU_TIME (TIM1)
      KITE  = 0
      ITASK = 2
      ISPRI = 1
      INDPD = KPOSD
      IFREF = 1
      IF (KSTRA.GE.2)  IFREF = 0
	RINC  = 0.0
	CALL MOVE(A(LDT),DT(1),NEQ)
C	-------------------------------------
C	COMPUTE FOR DISPLACMENT NORM - DISNRM
C	-------------------------------------
      CALL VENORM (DISPI,DISPI,DISPI,RHO,DISNRM,NEQ)
C	----------------------------------------------
C	COMPUTE FOR INITIAL INC. ENERGY CHANGE - ENORM
C	----------------------------------------------
	CALL ENRM(DISPI(1),ENORM,R,RET(1),RET1,RINC,A(LAL),A(LVL),
	1		  VL1(1),1,BB,CC,TYP2,TYP3)
C	------------------------------
C	COMPUTE FOR FORCE NORM - RNORM
C	------------------------------
	CALL VENORM (RINC,RINC,RINC,RHO,RNORM,NEQ)
	RNORM = DSQRT(RNORM)

      GOTO 110
C     -----------------------
C     START OF ITERATION LOOP
C     -----------------------
100	IFREF = 1
      IF (KSTRA.GE.3)  IFREF = 0
110	KITE = KITE+1
      IF (IFPR(9).GE.1)  WRITE (ISO,1000)  KSTEP,KITE
C	--------------------------------------------------
C	CALCULATE (KITE-1)st APPX TO ACC., VEL., AND DISP.
C	--------------------------------------------------
	CALL MOVE (A(LAL),AC(1),NEQ)
	CALL MOVE (A(LVL),VL(1),NEQ)

	IF (ITYPE .NE. 5 .OR. ITYPE .NE. 9) GOTO 115
	IF (NLOPT .EQ. 1) GOTO 115
	CALL ADDROT (IA(LID),DISP,DISPI,DISLI,NSF,ISO)
115	CALL VECADD (DISP,DISPI,DT,RHO,DNORM,NEQ)
	CALL CDVA (IA(LID),DT(1),VL(1),AC(1),A(LDT),NSF
	1		   ,0,KITE,MARK,KREF,NODE,IPO)
C	-------------------------------------------------------
C	CALCULATE (KITE-1)st EFFECTIVE OUT OF BALANCE LOADS AND
C	REFORMULATE EFFECTIVE STIFFNESS AS REQUIRED BY KSTRA
C	-------------------------------------------------------
C     -----------------------------------------------
C     FIND EQUIL.LOADS BALANCED IN DISPL.FIELD KITE-1
C     FIND NEW TANGENTIAL STIFFNESS MATRIX (IFREF=0)
C     -----------------------------------------------
120	CALL CLEARA (RE,NEQ)
	CALL GRLOOP (IA(LEL),KSC)

      IF (IFPR(6)+IFPR(9).EQ.2) CALL MATOUT (RE,NEQ,1,1,22,'E',
	1									   15,10,2,'STAT*EQ LD')
C	-------------------------------------------
C	COMPUTE FOR UNBALANCED INC. FORCE AT KITE-1
C	-------------------------------------------
200	CALL ENRM(DISPI(1),ENORM,R,A(LRE),RET,RINC,AC(1),VL(1),
	1		  A(LVL),2,BB,CC,TYP2,TYP3)
	CALL MOVE (RINC(1),DISLI(1),NEQ)

      IF (IFPR(6)+IFPR(9).EQ.2) CALL MATOUT (DISLI,NEQ,1,1,22,'E',
	1									   15,10,2,'RESID LOAD')
      CALL CPU_TIME (TIM2)
      TIM(16) = TIM(16) + (TIM2-TIM1)
C     ------------------------------------------------------
C     ASSEMBLE GLOBAL COMPACTED STIFFNESS BLOCKS (IFREF=0)
C     TRIANGULARIZE EFFECTIVE STIFFNESS MATRIX (IFREF=0)
C     CALCULATE ADDITIONAL INCREMENT IN DISPLACEMENT (DISLI)
C     ------------------------------------------------------
      IF (IFREF.NE.0)  GOTO 310
      NUMREF = NUMREF+1
	CALL EFSTIF (IA(LMA),NWK,NWM,NEQ,AA,BB,CC,
	1			 'STIF','MASS','DAMP','EFTF')

      CALL COLSOL (IA(LMA),AA,A(LDK),DISLI,1,INDPD,'EFTF','TEMP')

310	CONTINUE
	CALL COLSOL (IA(LMA),AA,A(LDK),DISLI,2,INDPD,'TEMP','TEMP')

	CALL CPU_TIME (TIM1)
	IF (IFPR(7)+IFPR(9).EQ.2) CALL MATOUT (DISLI,NEQ,1,1,22,'E',
	1									   15,10,2,'DISPL INCR')
C     -----------------------------------------------
C     UPDATE DISP.INCR.(DISPI,DI) AND TOTAL DISPL.(DT)
C     -----------------------------------------------
      CALL VECADD (DISLI,DISPI,DISPI,RHO,DNORM,NEQ)
C	-----------------------------------
C     CHECK FOR CONVERGENCE OR DIVERGENCE
C	-----------------------------------
C	---------------
C	SOLVE FOR NORMS
C	---------------
      CALL ADDNRM (DISP,DISPI,DISPI,RHO,DNORM,NEQ)
      CALL VENORM (DISLI,DISLI,DISLI,RHO,DINORM,NEQ)


	CALL VENORM (DISLI,RINC,RINC,RHO,ENNORM,NEQ)
	CALL VENORM (RINC,RINC,RINC,RHO,RFNORM,NEQ)
	RTOL1  = DSQRT(RFNORM)/RNORM
	ETOL1  = ENNORM/ENORM

      IF (IFPR(9).LT.1)  GOTO 350
      CALL VENORM (DISPI,DISPI,DISPI,RHO,DINRM,NEQ)
      DTNRM = DSQRT(DNORM)
      DANRM = DSQRT(DISNRM)
      DLNRM = DSQRT(DINORM)
      DINRM = DSQRT(DINRM)
      WRITE (ISO,2000) RHO,DTNRM,DANRM,DLNRM,DINRM
C
 350  TOL        = DNORM*RTOL
C	IF (DINORM.LT.TOL.AND.RTOL1.LT.RTOL.AND.ETOL1.LT.ETOL)  GOTO 500
	IF (DINORM.LT.TOL)  GOTO 500
C
      IF (DINORM.GT.500.*DISNRM)  GOTO 360
      IF (KITE.LT.4)   GOTO 400
      IF (DINORM.LT.DISNRM)      GOTO 400
 360  ICONV = -2
      GOTO 900
C
 400  IF (KITE.LT.ITEMAX)  GOTO 100
      ICONV = -1
      GOTO 900
C
 500  ICONV = 1
C
 900  NUMITE = NUMITE+KITE
      ITETOT = ITETOT+KITE
      CALL CPU_TIME (TIM2)
      TIM(16) = TIM(16) + (TIM2-TIM1)
C
 1000 FORMAT (/////,22X,31HL O A D   S T E P   N U M B E R,I4//
     1        22X,31HI T E R A T I O N   N U M B E R,I4//22X,35(1H*)//)
 2000 FORMAT (//25X,30HNORMS TO CHECK FOR CONVERGENCE/25X,30(1H-)//
     1        5X,40HFACTOR TO DEFINE LOADING LEVEL    RHO = ,E20.12/
     2         5X,40HTOTAL DISPLACEMENT VECTOR . . . DTNRM = ,E20.12/
     3          5X,40HAPPLIED DISPLACEMENT VECTOR . . DANRM = ,E20.12/
     4           5X,40HLAST DISPLACEMENT INCREMENT . . DLNRM = ,E20.12/
     5            5X,40HSUM OF DISP.INC. FOR STEP . . . DINRM = ,E20.12)
      RETURN
      END
