

      SUBROUTINE NONCONSO(W,AA)
	IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER*4 (I-N)

C     ---------------------------------
C     NONLINEAR CONSOLIDATION ALGORITHM
C	---------------------------------

      COMMON /NUMB/ HED(20),MODEX,NRE,NSN,NEG,NBS,NLS,NLA,
     +              NSC,NSF,IDOF(9),LCS,ISOLOP,LSYMM
      COMMON /LOCA/ LID,LDS,LEL,LDC,LXY,LCH,LNU,LMP,LGP,LMS,LGS,
     1              LCO,LEX,LLM,LES,LEC,LED,LEI,LEE,LMA,LLF,LLV,
     2              LRE,LDI,LDL,LDT,LDK,LER,LEV,LTT,LWV,LAR,LBR,
     3              LVE,LDD,LRT,LBU,LBC,LVL,LAL,LEF,LDU,LPR,LLO,
	4              LRV,LRT1,LRET,LRET1,LDM,LDPT,LVL1,LMV,LXI,LCM,LCC,
	5			    LCN,LDIM,LFRE,LSFC,LLOF
      COMMON /ELEM/ NAME(2),ITYPE,ISTYP,NLOPT,MTMOD,NSINC,ITOLEY,
     1              NELE,NMPS,NGPS,NMP,NGP,NNM,NEX,NCO,NNF,NWG,NEFC,
     2              NPT,NWA,NWS,KEG,MEL,NNO,NEF,NELTOT,NMV,MTYP
      COMMON /INOU/ ITI,ITO,ISO,NDATI,NPLOT,NKFAC,NELEM,
     1              IFPR(10),IFPL(10)
      COMMON /SOLU/ NEQ,NEQ1,NBLOCK,MK,BM,NWK,NWM,ISTOR,NFAC,
     +              NRED,KPOSD,DETK,DET1,DAVR,STOL
      COMMON /DYNA/ CDEN,IMASS
      COMMON /INCO/ A0,A1,A2,A3,A4,A5,A6,A7,A8,ALFA,BETA,
	1              A11,A12,ALF,IOPT
      COMMON /TIME/ DDT,CTIM,NINC
      COMMON /EIGN/ NSEIG,NROOT,NC,NNC,NITEM,IFSS,SHIFT0,EPS,IEIG,NEIG,
     +              ISOLV,IVPRT
     
      COMMON /ITER/ RHO,RHOP,RHOPREV,RTOL,ETOL,DLMAX,ALP,
	1              NSTEP,NPRIN,NDRAW,
	2			  KONEQ,NIREF,ITOPT,ICONV,NOLIN,KSTEP,
     3              LIMEQ(2),ITEMAX,NUMREF,NUMITE,ITETOT

      COMMON /FTIM/ TIM(20),IDATE,ITIME
      COMMON /FLAG/ IFPRI,ISPRI,IFPLO,IFREF,IFEIG,ITASK,IFFLAG

C	NEXT LINE ADDED BY GILSON - MARCH2004 (GRID ANALYSIS)
	COMMON /MEMO/ MEMA,MEMI,LASTA,LASTI,NELEA,NELEI
C	THIS COMMON LINE ADDED BY DE SILVA FOR SEEPAGE 30/04/2004
	COMMON /SEEP/ NTSTEP,KTSTEP,CTIME,DTINC,KFRES

      COMMON /LOCO/ LOP,LOS,LSS,LSS2,LSS3,LHG,LHGN

	COMMON /EXCV/ NEXC,IEXC,NNODFI
	COMMON /BIOT/ TIMFAC,NBIOT

	COMMON /TFAC/ DFTIM,TIME0,TIMEF

C	###BB
	COMMON /BIOT2/ TIMO
	COMMON /CONSO/ NCONSO

      COMMON A(9000000),IA(9000000)

C	========================
C	DIMENSION ARRAY VARIABLE
C	========================

C	VARIABLE					DESCRIPTIONS


C	ALOAD(NEQ)			ADDITIONAL PREVIOUS APPLIED LOADING						
C	REFLOAD(NEQ)		REFERENCE LOADING INPUT 
C	PDISP(NEQ)			PURE DISPLACEMENT (EXCEPT DISPACEMENT = 0.0)
C						SETTING 0.0 FOR PRESSURE

C	PDISPI(NEQ)			PURE OF CUMULATIVE INCREMENTAL DISPLACEMENT
C	PDISPT(NEQ)			PURE OF TOTAL DISPLACEMENT
C	PDISPL(NEQ)			PURE OF LAST UPDATING DISPLACEMENT

C	DISPI(NEQ)			PURE OF INCREMENTAL DISPLACEMENT
C	PRLOAD(NEQ)			PURE OF INTERNAL LOADING

C	NCONSO				NONLINEAR CONSOLIDATION INDEX (1 NONLINEAR)
C	TIMO				TIME AT FULL CONTACT LOADING APPLIED
C	DTINC				DIFFERNTIAL TIME INCREMENT

C	CTIME				CURRENT TIME AT CONSIDERATION


C	----------------------

	DIMENSION W(1),RT(NEQ)

C	--------------------------------------
C	NEXT BLOCK RESERVED FOR NONLINEAR BIOT
C	CONSOLIDATION
C	-------------

	DIMENSION ALOAD(NEQ)
	DIMENSION PDISP(NEQ)

	DIMENSION PDISPI(NEQ)
	DIMENSION PDISPT(NEQ)
	DIMENSION PDISPL(NEQ)

	DIMENSION DISPI(NEQ)
	DIMENSION REFLOAD(NEQ)

C	PRLOAD : PURE INTERNAL LOADING
	DIMENSION PRLOAD(NEQ)
	DIMENSION DUM(NEQ)

	DIMENSION AA(1),DIAM(NEQ)
C     --------------
C     INITIALISATION
C     --------------
      CALL CPU_TIME (TIM1)


	DFTIM = DTINC
	TIME0 = TIMO


      NUMITE = 0
      NUMREF = 0
      INDPD  = KPOSD

C	================================
C	NONLINEAR CONSOLIDATION ANALYSIS
C	COUPLING  BIOT'S CONSOLIDATION
C     ==============================
C     INITIALISATION

200   CONTINUE
C	------------------------------------
C	SETTING DIFFERENCTIAL TIME INCREMENT
C	SETTING TIME STEP INTEGRATION
C	-----------------------------

	PRLOAD = 0.0

	NOLIN = 1
	DTINC = DTINC
	NSTEP = NTSTEP
	CTIME = 0.0


	KSTEP  = 0
	KTSTEP = 0
	

      KSTRA  = NIREF
      KRECO  = 0
	KPRIN  = 0
      KPLOT  = 0

	KITE   = 0

      NUMITE = 0
      INDPD  = KPOSD

	ALOAD = 0.0

	CALL CLEARA (A(LDT),NEQ)
	CALL CLEARA (A(LDI),NEQ)
	CALL CLEARA (A(LDL),NEQ)

C     ------------------------
C     LOAD INCREMENTATION LOOP
C     ------------------------

1100  CONTINUE

	KSTEP = KSTEP+1 ! LOAD STEP LOOPING 

	KTSTEP= KTSTEP + 1

      KPRIN = KPRIN+1
      KPLOT = KPLOT+1

C     -----------------
C     SET CONTROL FLAGS
C     -----------------

      IFPRI = NPRIN-KPRIN
      ISPRI = KPRIN-1
      IFPLO = NDRAW-KPLOT
      IFEIG = 1
      NUMREF = 0

C	NEXT LINE ADDED BY GILSON - JULY2002
	IFFLAG = 2

      IF (IFPRI.EQ.0) KPRIN = 0
      IF (IFPLO.EQ.0) KPLOT = 0
      IF (KSTEP.EQ.1) ISPRI = 1
      IF (KSTEP.EQ.1) IFEIG = 1


C     ---------------------------------------------------------
C     ENTRY FOR RETAKING A STEP IF CONVERGENCE FAILURE OCCURRED
C     ---------------------------------------------------------
1200  CALL CLEROUT

      ITASK = 1
      IFREF = 1

      IF (KSTRA.GE.1) IFREF = 0
      IF (KSTEP.EQ.1) IFREF = 0
C	------------------------
C	INITIALIZED DISPLACEMENT
C	------------------------
	CALL CLEARA (A(LDI),NEQ)

      IF (ICONV.LT.0 .AND. KSTRA.NE.1) GOTO 1520
C     -----------------------------
C	FORMED TANGENT STIFFNESS
C	FORMED ELEMENT INTERNAL FORCE 
C     -----------------------------
      CALL CLEARA (A(LRE),NEQ)
	CALL GRLOOP (IA(LEL),KSC)


	IF (NSTEP.EQ.0) GOTO 1500
C     ---------------------------------------------------------
C     FIND CURRENT LOAD VECTOR FOR STEP KSTEP
C     SUBTRACT EQUILIBRIUM LOADS TO GET INCREMENTAL LOAD VECTOR
C     ---------------------------------------------------------

1400  CALL CPU_TIME (TIM1)

C	-----------------------------------
C	CALLING LOAD VECTOR AT CURRENT TIME
C	----------------------------------- 
	CALL CLEARA (A(LDL),NEQ)

	IF(KSTEP.EQ.1)THEN
	DO IEQ = 1,NEQ
	REFLOAD(IEQ) = A(LLV+IEQ-1)  !TRANSFER REFERNCE LOAD
	END DO
	END IF

	CALL VECADD (REFLOAD,A(LDL),A(LDL),1.0,DINORM,NEQ)
C	-----------------------------------
C     ### FORM CONSOLIDATION LOAD VECTORS
C	-----------------------------------

	RHO = 1.0 ! RHO MULTIPLY IS EQUAL TO 1.0
	CTIME = CTIME + DTINC
	DO I=1,NEQ
	IF(CTIME.LE.TIMO) THEN
	A(LDL+I-1) = CTIME*A(LDL+I-1)/TIMO
	ELSE
	A(LDL+I-1) = A(LDL+I-1)
	END IF
	END DO

C	--------------------------
C	TRANSFER REFERENCE LOADING
C	--------------------------  
	CALL CLEARA (ALOAD,NEQ)
	DO I=1,NEQ
	ALOAD(I) = A(LDL+I-1)
	END DO

C	----------------------
C	COMPUTE RESIDUAL FORCE
C	----------------------
	CALL VECADD (A(LDL),A(LRE),A(LDL),RHO,DINORM,NEQ)


      CALL CPU_TIME (TIM2)
      TIM(10) = TIM(10) + (TIM2-TIM1)
C     -----------------------------------------------------
C     TRIANGULARIZE EFFECTIVE STIFFNESS MATRIX IF (IFREF=0)
C     AND SOLVE FOR INCREMENT IN DISPLACEMENT
C     -----------------------------------------------------

	IF (IFREF.GT.0) GOTO 1520
      NUMREF = NUMREF+1
1500	IF (NSTEP.EQ.0) RETURN


	CALL COLSOL (IA(LMA),AA,A(LDK),A(LDL),1,INDPD,'STIF','TEMP')

1520	CONTINUE
C	--------------------------------------
C	SOLUTION FOR INITIAL TANGENT [Ko] HERE
C	--------------------------------------

	CALL COLSOL (IA(LMA),AA,A(LDK),A(LDL),2,INDPD,'TEMP','TEMP')

C	----------------------------------
C	A(LDL) : SOLUTION FROM LOAD VECTOR
C	A(LDI) : DISPLACEMENT AT u0
C	---------------------------
	CALL VECADD (A(LDI),A(LDL),A(LDI),RHO,DINORM,NEQ)

C     -------------------------------------------
C     PERFORM EQUILIBRIUM ITERATIONS IF KSTRA<4
C     -------------------------------------------
      IF (ICONV.GE.0) NUMITE = 0
      ICONV = 0
      IF (KSTRA.GE.4 .OR. NOLIN.EQ.0) GOTO 1650

C	==========================<EQUILIBRIUM BLOCK>======================================

      KITE  = 0
      ITASK = 2
      ISPRI = 1
      INDPD = KPOSD
      IFREF = 1

      IF (KSTRA.GE.2) IFREF = 0
C	------------------------------
C	NORMALIZED DISPLACEMENT VECTOR
C	------------------------------
	CALL CLEARA(PDISPI,NEQ)

C	CHANGED BY SACHARUCK MAR2007 (SONGSAK IMPLEMENTOR)
	CALL DISVECTOR(IA(LID),NSN,NSF,NEQ,A(LDI),PDISPI)
		
	CALL VENORM (PDISPI,PDISPI,PDISPI,RHO,DISNRM,NEQ)

      GOTO 11
C     -----------------------
C     START OF ITERATION LOOP
C     -----------------------

10    IFREF = 1
      IF (KSTRA.GE.3)  IFREF = 0

11    KITE = KITE+1
C     -------------------------------------------------------
C     FIND EQUIL.LOADS BALANCED IN CURRENT DISPL.FIELD (DISP)
C     FIND NEW TANGENTIAL STIFFNESS MATRIX (IFREF=0)
C     -------------------------------------------------------

	CALL CLEARA (A(LDL),NEQ)
      CALL CLEARA (A(LRE),NEQ) 

	CALL GRLOOP (IA(LEL),KSC)

C	-----------------------
C	EQUILIBRIUM REQUIREMENT
C	-----------------------
C	CHANGED BY SACHARUCK MAR2007 (SONGSAK IMPLEMENTOR)
	CALL DISVECTOR(IA(LID),NSN,NSF,NEQ,A(LRE),PRLOAD)

C	-------------------------------------------
C	RECALLING REFERENCE LOAD BIOT CONSOLIDATION
C	-------------------------------------------
      CALL CLEARA (A(LDL),NEQ)
	DO I=1,NEQ
	A(LDL+I-1) = ALOAD(I)
	END DO

C     ------------------------------------------------------------
C     CALCULATE RESIDUAL LOAD VECTOR DISLI(I) = RHO*DISLI(I)-RE(I)
C     ------------------------------------------------------------
	CALL VECADD (A(LDL),PRLOAD,A(LDL),RHO,RRNORM,NEQ)

C     ------------------------------------------------------
C     ASSEMBLE GLOBAL COMPACTED STIFFNESS BLOCKS (IFREF=0)
C     TRIANGULARIZE EFFECTIVE STIFFNESS MATRIX (IFREF=0)
C     CALCULATE ADDITIONAL INCREMENT IN DISPLACEMENT (DISLI)
C     ------------------------------------------------------
      IF (IFREF.NE.0)  GOTO 31
      NUMREF = NUMREF+1

	CALL COLSOL (IA(LMA),AA,A(LDK),A(LDL),1,INDPD,'STIF','TEMP')

31	CONTINUE

	CALL COLSOL (IA(LMA),AA,A(LDK),A(LDL),2,INDPD,'TEMP','TEMP')

C     -----------------------------------------------
C     UPDATE DISP.INCR.(DISPI) AND TOTAL DISPL.(DISP)
C     CHECK FOR CONVERGENCE OR DIVERGENCE
C	COMPUTE NORM VECTOR FOR BIOT CONSOLIDATION
C	------------------------------------------

C	-----------------------------------
C	ADDITIONAL INCREMENTAL DISPLACEMENT
	CALL VECADD (A(LDI),A(LDL),A(LDI),RHO,DNORM,NEQ)

C	FOR A(LDI)
	CALL CLEARA(PDISPI,NEQ)
C	CHANGED BY SACHARUCK MAR2007 (SONGSAK IMPLEMENTOR)
	CALL DISVECTOR(IA(LID),NSN,NSF,NEQ,A(LDI),PDISPI)

C	FOR A(LDT)
	CALL CLEARA(PDISPT,NEQ)
C	CHANGED BY SACHARUCK MAR2007 (SONGSAK IMPLEMENTOR)
	CALL DISVECTOR(IA(LID),NSN,NSF,NEQ,A(LDT),PDISPT)

C	FOR A(LDL)
	CALL CLEARA(PDISPL,NEQ)
C	CHANGED BY SACHARUCK MAR2007 (SONGSAK IMPLEMENTOR)
	CALL DISVECTOR(IA(LID),NSN,NSF,NEQ,A(LDL),PDISPL)

C	--------------------------
C	EVALUATE NORMALIZED VECTOR
C	--------------------------

      CALL VECADD (PDISPL,PDISPI,PDISPI,RHO,DNORM,NEQ)
      CALL ADDNRM (PDISPT,PDISPI,PDISPI,RHO,DNORM,NEQ)

      CALL VENORM (PDISPL,PDISPL,PDISPL,RHO,DINORM,NEQ)

C	-----------------------------------
C	CONVERGENCE OR DIVERGENCE CONDITION
C	-----------------------------------

	TOL   = DNORM*RTOL

	GOTO 50
      IF (DINORM.LT.TOL)			GOTO 50
      IF (DINORM.GT.500.*DISNRM)  GOTO 36
      IF (KITE.LT.4)				GOTO 40
      IF (DINORM.LT.DISNRM)		GOTO 40

 36   CONTINUE

	ICONV = -2
 
      GOTO 90

 40   IF (KITE.LT.ITEMAX)  GOTO 10


      ICONV = -1

      GOTO 90

 50   CONTINUE

	ICONV = 1

 90   NUMITE = NUMITE+KITE
      ITETOT = ITETOT+KITE
      CALL CPU_TIME (TIM2)
      TIM(16) = TIM(16) + (TIM2-TIM1)


 1001 FORMAT (/////,22X,31HL O A D   S T E P   N U M B E R,I4//
     1        22X,31HI T E R A T I O N   N U M B E R,I4//22X,35(1H*)//)
 2002 FORMAT (//25X,30HNORMS TO CHECK FOR CONVERGENCE/25X,30(1H-)//
     1        5X,40HFACTOR TO DEFINE LOADING LEVEL    RHO = ,E20.12/
     2         5X,40HTOTAL DISPLACEMENT VECTOR . . . DTNRM = ,E20.12/
     3          5X,40HAPPLIED DISPLACEMENT VECTOR . . DANRM = ,E20.12/
     4           5X,40HLAST DISPLACEMENT INCREMENT . . DLNRM = ,E20.12/
     5            5X,40HSUM OF DISP.INC. FOR STEP . . . DINRM = ,E20.12)


C	====================<END OF EQUILIBRIUM ITERATION>========================

1650	CONTINUE

	
C	-------------------------------------
C	PRINT OUTPUT ON SCREEN AND OUTJOB.OUT
C	-------------------------------------
	CALL RETAKEC (IA(LID),A(LLF),A(LDI),A(LDL),A(LDT),A(LDK),
	1             KRECO,KSTRA,KITE,NSF,AA)



	IF (ICONV.LT.0) CTIME = CTIME - DTINC  !BACK THE TOTAL TIME TO PREVIOUS FOR CONVERGENCE RECOVERING 
	IF (ICONV.LT.0) GOTO 1200

C     ----------------------------------------------
C     UPDATING AND PRINT NEW DISPLACEMENTS (IFPRI=0)
C     ----------------------------------------------
	IFPRI = 0

C	CALL MOVE(A(LDI),A(LDT),NEQ)
C	CALL MOVE(A(LDI),PRLOAD,NEQ)
C	CALL VECADD (A(LDI),A(LDT),A(LDT),RHO,DNORM,NEQ)
C	CALL CLEARA(A(LDI),NEQ)
	CALL NEWDIS (IA(LID),A(LDI),A(LDT),NSF)


C	NEW OUTPUT SONGSAK JUL2007
	CALL PRNFLAG('NONE','NONE','NONE','NONE','DISP','NONE','NONE')
	CALL PRNOUT('STND','PONE','NONE',KSTEP)

	IF(KSTEP.GT.1) THEN
	CALL PRNFLAG('ELEM','LINK','GSUP','LSUP','NONE','GSPG','LSPG')
	CALL PRNOUT('STND','PONE','NONE',KSTEP-1)
	ENDIF


      IF (KSTEP.LT.NTSTEP) GOTO 1100
C     ------------------------------------------
C     CALCULATE AND PRINT STRESSES FOR LAST STEP
C     SOLVE INITIAL EIGENVALUE PROBLEM (IEIG>0)
C     ------------------------------------------
      IFREF = 1
      ISPRI = 0
      IFEIG = 1
      IF (IEIG.GT.0 .AND. KSTEP.LE.1) IFEIG = 0
      ITASK = 3
	IF (NSTEP.GT.1) KSTEP = KSTEP+1 
      CALL GRLOOP (IA(LEL),KSC)

C	SONGSAK NEW OUTPUT JUL2007
	IF(KSTEP.GT.1) THEN
	CALL PRNFLAG('ELEM','LINK','GSUP','LSUP','NONE','GSPG','LSPG')
	CALL PRNOUT('STND','PONE','NONE',KSTEP-1)
	ENDIF

      IF (IFEIG.NE.0) RETURN
C
C
      RETURN
	END

C	=====================================================================
C	=====================================================================
C	=====================================================================
      SUBROUTINE RETAKEC (ID,RFAC,DISPI,DISLI,DISP,DD,
     +                   KRECO,KSTRA,KITE,MSF,AA)

	IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER*4 (I-N)
C     ----------------------------------------------------------------
C     CONTROLS CHANGE OF NONLINEAR SOLUTION METHOD
C     INITIALISES CONTROL FLAGS AND ARRAYS TO RETAKE A STEP IN CASE
C     CONVERGENCE FAILURE OCCURED
C     ---------------------------
C     INPUT, OUTPUT VARIABLES
C	-----------------------
C     RFAC(NSTEP) = LOAD OR DISPLACEMENT INCREMENTS
C     KRECO       = RECOVERY COUNTER
C     KSTRA       = RETURNS STRATEGY FOR NEXT STEP (ICONV > 0) OR
C                   FOR CURRENT STEP (ICONV < 0)
C     KITE        = NUMBER OF ITERATIONS USED TO ESTABLISH EQUILIBRIUM
C     ----------------------------------------------------------------
      LOGICAL PROMPT,ERROR
C
      CHARACTER*2 MARK
	CHARACTER*6 IFREE(7)

C	CHANGED BY SACHARUCK MAR2007 (SONGSAK IMPLEMENTOR)
	CHARACTER*6 IFREEC(9)

	CHARACTER*6 IPO
C
      COMMON /NUMB/ HED(20),MODEX,NRE,NSN,NEG,NBS,NLS,NLA,
     +              NSC,NSF,IDOF(9),LCS,ISOLOP,LSYMM
      COMMON /LOCA/ LID,LDS,LEL,LDC,LXY,LCH,LNU,LMP,LGP,LMS,LGS,
     1              LCO,LEX,LLM,LES,LEC,LED,LEI,LEE,LMA,LLF,LLV,
     2              LRE,LDI,LDL,LDT,LDK,LER,LEV,LTT,LWV,LAR,LBR,
     3              LVE,LDD,LRT,LBU,LBC,LVL,LAL,LEF,LDU,LPR,LLO,
	4              LRV,LRT1,LRET,LRET1,LDM,LDPT,LVL1,LMV,LXI,LCM,LCC,
	5			    LCN,LDIM,LFRE,LSFC,LLOF
      COMMON /LOGO/ PROMPT,ERROR,ITEST
      COMMON /INOU/ ITI,ITO,ISO,NDATI,NPLOT,NKFAC,NELEM,
     1              IFPR(10),IFPL(10)
C      COMMON /SOLU/ NEQ,NEQ1,NBLOCK,MK,BM,NWK,NWM,ISTOR,STOL,NFAC,
C     +              NRED,KPOSD,DETK,DET1,DAVR
      COMMON /SOLU/ NEQ,NEQ1,NBLOCK,MK,BM,NWK,NWM,ISTOR,NFAC,
     +              NRED,KPOSD,DETK,DET1,DAVR,STOL
C      COMMON /ITER/ NSTEP,DLMAX,NPRIN,NDRAW,KONEQ,NIREF,ITEMAX,RTOL,
C     1              ITOPT,NUMREF,NUMITE,ITETOT,RHO,RHOP,ICONV,NOLIN,
C     2              LIMEQ(2),KSTEP,ETOL,RHOPREV

      COMMON /ITER/ RHO,RHOP,RHOPREV,RTOL,ETOL,DLMAX,ALP,
	1              NSTEP,NPRIN,NDRAW,
	2			  KONEQ,NIREF,ITOPT,ICONV,NOLIN,KSTEP,
     3              LIMEQ(2),ITEMAX,NUMREF,NUMITE,ITETOT

      COMMON /FLAG/ IFPRI,ISPRI,IFPLO,IFREF,IFEIG,ITASK,IFFLAG


C	THIS COMMON LINE ADDED BY DE SILVA FOR SEEPAGE 30/04/2004

	COMMON /SEEP/ NTSTEP,KTSTEP,CTIME,DTINC,KFRES
      COMMON A(9000000),IA(9000000)
C

C	###BOHR
	COMMON /CONSO/ NCONSO

      DIMENSION ID(MSF,1),RFAC(1),DISPI(1),DISLI(1),DISP(NEQ)
      DIMENSION DD(1),AA(1)
      DATA IFREE /'X-DISP','Y-DISP','Z-DISP','X-ROTA','Y-ROTA',
     +            'Z-ROTA','WARP. '/

C	CHANGED BY SACHARUCK MAR2007 (SONGSAK IMPLEMENTOR)
C	+            'Z-ROTA','WARP. '/
      DATA IFREEC /'X-DISP','Y-DISP','Z-DISP','X-ROTA','Y-ROTA',
     +            'Z-ROTA','WARP. ','TEMP. ','PRES. '/

C     --------------------------------------------
C     INITIALISATION, PRINT TITLE FOR JOB PROGRESS
C     --------------------------------------------


      LSTRA = KSTRA
      KREF  = KSTRA
      IF (KSTRA.EQ.0 .AND. KSTEP.EQ.1) KREF = 1
      IF (KSTRA.EQ.3) KREF = KITE +1
      IF (KSTRA.EQ.4) KREF = 1
C
      IF (KSTEP.GT.1 .OR. KRECO.NE.0) GOTO 10

	IF (KTSTEP.GT.1) GOTO 50

C	SUNIL 06/01/01 CHAHGE THE UNINT # OF OUTPUT 1 TO 100
      WRITE (100,1000)
C	NEXT LINE ADDED BY GILSON - AUG2002
      WRITE (ITO,1000)
      WRITE (10,1000)

 50   IF (ICONV.LT.0) KRECO = 4


 10	IF (ICONV) 200,100,100
C     -----------------------------------------------------
C     CONVERGENCE ACHIEVED, SELECT LOWER STRATEGY (KRECO=0)
C     ADJUST SIZE OF NEXT INCREMENT ACCORDING TO KITE
C     -----------------------------------------------------

 100  RHOP = RHO
      MARK = '  '
      IF (KRECO.EQ.4) MARK = '**'
      IF (KRECO.EQ.0 .OR. KITE.GE.ITEMAX/2) GOTO 110
      KRECO = KRECO-1
      IF (KRECO.GT.0 .OR. KSTRA.EQ.NIREF) GOTO 110
      KSTRA = KSTRA-1
      KRECO = 4
C
 110  RSCALE = 1.0
      IF (RFAC(KSTEP+1).NE.0.0.OR.FLOAT(KSTEP).EQ.FLOAT(NSTEP))GOTO 400
      IF (ICONV.EQ.0)  GOTO 120
      RSCALE = SQRT(0.4*FLOAT(ITEMAX)/FLOAT(KITE))
 120  DRHO = RFAC(KSTEP)*RSCALE
      DRHOMX = RFAC(1)*DLMAX
      IF (DABS(DRHO).GT.DABS(DRHOMX)) DRHO = DRHOMX
	RFAC(KSTEP+1) = DRHO
      GOTO 400
C     ------------------------------------------------------
C     INITIALISE TOTAL LOAD LEVEL RHO
C     REDUCE LOADING (DISPLACEMENT) INCREMENT AND CLEAR LOAD
C     FACTORS > KSTEP
C     ------------------------------------------------------
 200  FAC = 4.0
      IF (KRECO.EQ.4 .AND. NUMITE.EQ.KITE) FAC = 1.0

	KSTRA   = KSTRA  + 1				!IF NO COMPOSITE CHECK (STANDARD)
	RTOL    = RTOL   + 10.0*RTOL		!IF NO COMPOSITE CHECK (STANDARD) ADD HERE BY SONGSAK TO INCREASE THE TOLERENCE IF CONVERGENCE FAILURE OCCURRED
	IF (RTOL.GT.0.1) RTOL = 0.1
	ITEMAX  = ITEMAX + 2*ITEMAX			!IF NO COMPOSITE CHECK (STANDARD) ADD HERE BY SONGSAK TO INCREASE THE NUMBER OF ITERATION IF CONVERGENCE FAILURE OCCURRED

      KRECO = 4
      IFEIG = 1
      ISPRI = 1
      RHO   = RHOP
      MARK  = '  '
	RFAC(KSTEP) = RFAC(KSTEP)/FAC

      IF (NIREF.EQ.0) NIREF = 1
      IF (KSTEP.EQ.NSTEP) GOTO 400
      KSTEP1 = KSTEP+1

      DO 350  ISTEP=KSTEP1,NSTEP
 350  RFAC(ISTEP) = 0.0
C     --------------------------------------------------------
C     PRINT JOB SUMMERY ONTO TAPE DATIN (TAPE 1)
C     --------------------------------------------------------

 400  NODE = LIMEQ(1)
      IPOS = LIMEQ(2)

      IF (ITOPT.NE.3) GOTO 450
C
      DO 410  ISN=1,NSN
      DO 410  ISF=1,NSF
      IF (KONEQ.NE.ID(ISF,ISN)) GOTO 410
      IPOS = IDOF(ISF)
	IF (IPOS.LE.0.OR.IPOS.GT.3) GOTO 410
      NODE = ISN
      GOTO 450
 410  CONTINUE
C

 450  DELTA = 0.0D0
      IPO   = IFREE(IPOS)
	IF(NCONSO.EQ.1)THEN
C	IPO   = IFREEC(IPOS)                !CHANGED BY SACHARUCK MAR2007 (SONGSAK IMPLEMENTOR)
      IPO   = IFREEC(IDOF(LIMEQ(2)))
	ELSE
      IPO   = IFREE(IPOS)
	END IF
      IEQ   = ID(LIMEQ(2),LIMEQ(1))

      DELTA = DISP(IEQ)
	DELTA = DELTA + DISPI(IEQ)

 500  IF (ICONV+1) 510,520,530

 510  WRITE (100,1100) MARK,KSTEP,LSTRA,KREF,KITE,NODE,IPO,DETK
	WRITE (ITO,1100) MARK,KSTEP,LSTRA,KREF,KITE,NODE,IPO,DETK
      WRITE (10,1100) MARK,KSTEP,LSTRA,KREF,KITE,NODE,IPO,DETK
      GOTO 590
 520  WRITE (100,1200) MARK,KSTEP,LSTRA,KREF,KITE,NODE,IPO,DETK
	WRITE (ITO,1200) MARK,KSTEP,LSTRA,KREF,KITE,NODE,IPO,DETK
      WRITE (10,1200) MARK,KSTEP,LSTRA,KREF,KITE,NODE,IPO,DETK
      GOTO 590

C	----------------------------------------
C	WRITE OUTPUT FILE FOR CONSOLIDATION HERE
C	----------------------------------------

 530  CONTINUE



	TIME = DTINC*FLOAT(KSTEP)

	WRITE (100,1305) MARK,TIME,LSTRA,KREF,KITE,NODE,IPO,
     1                 DETK,DELTA,RHO

	WRITE (ITO,1305) MARK,TIME,LSTRA,KREF,KITE,NODE,IPO,
     1                 DETK,DELTA,RHO
      WRITE (10,1305) MARK,TIME,LSTRA,KREF,KITE,NODE,IPO,
     1                 DETK,DELTA,RHO

1305  FORMAT (A1,1F8.3,4I7,2X,A6,E11.3,2E12.3)





 590  RETURN

C
 1000 FORMAT (//32X,16(1H*)/32X,1H*,14X,1H*/
     1        32X,16H* JOB PROGRESS */32X,1H*,14X,1H*/32X,16(1H*)//
     2        42H KSTEP  KSTRA   KREF   KITE   NODE    IPOS
     3        ,38H      DETK        DELTA           RHO /1X,79(1H-)/)
 1100 FORMAT (1X,A1,I3,4I7,4X,A6,E11.3,2X,24H * DIVERGENCE OCCURRED *)
 1200 FORMAT (1X,A1,I3,4I7,4X,A6,E11.3,2X,24H * CONVERGENCE FAILURE *)

C
      END



C	======================================================================
C	======================================================================
C	======================================================================
