C	=======================================================================
C	=== CONSTRUCTION ANALYSIS =============== SONGSAK NOV2007 =============
C	=======================================================================
      SUBROUTINE SUPBUL
	IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER*4 (I-N)
      DIMENSION IDOFB(9)
	ALLOCATABLE IOP(:),DIS(:)
C	SUPPORT OPERATION

C	LSUPC SUPPORT COMMAND
C		  = 0 FREE
C		  = 1 FIX CURRENT
C		  = 2 FIX ORIGINAL
C		  = 3 FIX WITH SPECIFIX VALUE


C	FILE FOR PRINTING  NOT=ISO
	CALL INTFILL('%IOL',NOT,1,3,0)


	CALL INTFILL('%NUB',NSN,1,1,0)
	CALL INTFILL('%NUB',NSF,1,2,0)
	ALLOCATE(IOP(NSF),DIS(NSF))
C	-----------------------------------------------------
C	READ COMMAND
C	CALL FREBUF
C	CALL FREECH

C	----------------------------------------
C	CALLING IDOFB
C	----------------------------------------
	DO I = 1,9
	CALL INTFILL('%DOB',IDOFB(I),1,I,0)
	ENDDO

      CALL FREINT('N',ISN,1)	  !NODE NUMBER

      IOP(1:NSF) = 0
      CALL FREINT('O',IOP,NSF)  !OPERATION FLAG

      LNS = 0
      CALL FREINT('L',LNS,1)    !LOCAL SUPPORT SET
			
      DIS(1:NSF) = 0.0D0 
      CALL FREREL('D',DIS,NSF)  !DISP VALUE

	CALL INTFILL('$NBC',LAX,1,ISN,0)  !CALLING LAX SET FOR THIS NODE

	IF(LAX.NE.0.OR.LNS.NE.0) THEN
	DO ISF = 1,NSF
	CALL INTFILL('$MBC',0   ,ISF,ISN,1)  !CLEAR SUPPORT CONDITION IF LAX EXISTED
	IF(ISF.GT.6.AND.IDOFB(ISF).NE.0) CALL INTFILL('$MBC',2,ISF,ISN,1)  
	ENDDO
	ENDIF
	CALL INTFILL('$NBC',LNS,1,ISN,1)  !BACK UP NEW LAX


	DO 1000 ISF = 1,NSF

	IF(LAX.NE.0.OR.LNS.NE.0) THEN
      IF(ISF.LE.6) GOTO 500
      ENDIF
      
      IF(IDOFB(ISF).NE.0) GOTO 1000 
500   CONTINUE
      
	IO   = IOP(ISF)
	DISP = DIS(ISF)
	IBC = 1
C	-------------------------------------------------
	SELECTCASE(IO)
C	-------------------------------------------------
	
	CASE(0)  !REMOVE
C	===============================================
	CALL INTFILL('$MBC',0   ,ISF,ISN,1)  !FREE SUPPORT CONDITION
      

	CASE(1)  !CURRENT
C	===============================================
	CALL INTFILL('$MBC',IBC ,ISF,ISN,2)  !ACCUMULATE SUPPORT CONDITION


	CASE(2)  !ORIGINAL
C	===============================================
	CALL INTFILL('$MBC',IBC ,ISF,ISN,2)  !ACCUMULATE SUPPORT CONDITION
	CALL RELFILL('$XDS',DISO,ISF,ISN,0)  !CALLING TOTAL NODAL DISP
	DISP = -1.0D0*DISO
	CALL RELFILL('$XDI',DISP,ISF,ISN,1)  !STORE INCREMENTAL NODAL DISP

	CASE(3)  !FIX WITH SPECIFIED AMOUNT OF DISP.
C	===============================================
	CALL INTFILL('$MBC',IBC ,ISF,ISN,2)  !ACCUMULATE SUPPORT CONDITION
	CALL RELFILL('$XDS',DISO,ISF,ISN,0)  !CALLING TOTAL NODAL DISP
	DISP = -1.0D0*DISO + DISP
	CALL RELFILL('$XDI',DISP,ISF,ISN,1)  !STORE INCREMENTAL NODAL DISP


C	-------------------------------------------------
	ENDSELECT
C	-------------------------------------------------

1000	CONTINUE


	DEALLOCATE(IOP,DIS)

	RETURN

	END


C	=======================================================================
C	=== CONSTRUCTION ANALYSIS =============== SONGSAK NOV2007 =============
C	=======================================================================
      SUBROUTINE NODACT
	IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER*4 (I-N)
	ALLOCATABLE IOP(:),FOR(:)
C	JOINT LOAD


C	LLODC LOAD COMMAND
C		  = 0 REMOVE
C		  = 1 ADDED
C		  = 2 REPLACE

	CALL INTFILL('%NUB',NSN,1,1,0)
	CALL INTFILL('%NUB',NSF,1,2,0)
	ALLOCATE(IOP(NSF),FOR(NSF))


C	READ COMMAND
C	CALL FREBUF
C	CALL FREECH


      CALL FREINT('N',ISN,1)	  !NODE NUMBER

      IOP(1:NSF) = 0
      CALL FREINT('O',IOP,NSF)  !OPERATION FLAG
		
      FOR(1:NSF) = 0.0D0 
      CALL FREREL('F',FOR,NSF)  !FORCE VALUE

      LDAP = 0  !LOAD APPLY TYPE  0 = CONSTRUCTION LOAD  1 = DEAD LOAD  
      CALL FREINT('D',LDAP,1)  !LOAD APPLIED TYPE
      

	DO 1000 ISF = 1,NSF

	IO   = IOP(ISF)
	FOC  = FOR(ISF)
C	-------------------------------------------------
	SELECTCASE(IO)
C	-------------------------------------------------
	
	CASE(0)  !REMOVE
C	===============================================
	CALL RELFILL('$XLD',FOO,ISF,ISN,0)  
	FOC = -1.0D0*FOO
	CALL RELFILL('$XLI',FOC,ISF,ISN,1) 
	CALL RELFILL('#LCT',FOC,ISF,ISN,2)   !CONSTRUCTION LOAD

	CASE(1)  !ADD
C	===============================================
	CALL RELFILL('$XLI',FOC,ISF,ISN,2)   !ADD TO INCREMENTAL NODAL LOAD

	SELECTCASE(LDAP)
	CASE(0)
	CALL RELFILL('#LCT',FOC,ISF,ISN,2)   !ADD TO CONSTRUCTION LOAD
      CASE(1)
	CALL RELFILL('#LDD',FOC,ISF,ISN,2)   !ADD TO DEAD LOAD 
	ENDSELECT
	
	CASE(2)  !REPLACE
C	===============================================
	CALL RELFILL('$XLD',FOO,ISF,ISN,0)  
	FOC = -1.0D0*FOO + FOC
	CALL RELFILL('$XLI',FOC,ISF,ISN,1)   !REPLACE TO INCREMENTAL NODAL LOAD  
	CALL RELFILL('#LCT',FOC,ISF,ISN,2)   !ADD TO CONSTRUCTION LOAD

C	-------------------------------------------------
	ENDSELECT
C	-------------------------------------------------

1000	CONTINUE



	DEALLOCATE(IOP,FOR)

	RETURN

	END


C	=======================================================================
C	=== CONSTRUCTION ANALYSIS =============== SONGSAK NOV2007 =============
C	=======================================================================

      SUBROUTINE NODPRE
	IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER*4 (I-N)
	ALLOCATABLE IOP(:),SET(:)
C	PRESCRIBED DISPLACEMENT AT SUPPORT

C	LSETC SETTLEMENT COMMAND
C		  = 0 ADDED
C		  = 1 REPLACE

	CALL INTFILL('%NUB',NSN,1,1,0)
	CALL INTFILL('%NUB',NSF,1,2,0)
	ALLOCATE(IOP(NSF),SET(NSF))


C	READ COMMAND
C	CALL FREBUF
C	CALL FREECH

 
      CALL FREINT('N',ISN,1)	  !NODE NUMBER

      IOP(1:NSF) = 0
      CALL FREINT('O',IOP,NSF)  !OPERATION FLAG
		
      SET(1:NSF) = 0.0D0 
      CALL FREREL('D',SET,NSF)  !DISP VALUE


	DO 1000 ISF = 1,NSF

	CALL INTFILL('$MBC',IBC,ISF,ISN,0)  !SUPPORT CONDITION
	IF(IBC.LE.0) GOTO 1000 !JUMP HERE IF IT IS FREE NODE

	IO   = IOP(ISF)
	DIS  = SET(ISF)

C	-------------------------------------------------
	SELECTCASE(IO)
C	-------------------------------------------------
	
	CASE(0)  !ADD
C	===============================================
	CALL RELFILL('$XDI',DIS,ISF,ISN,2)  

	CASE(1)  !REPLACE
C	===============================================
	CALL RELFILL('$XDS',DIO,ISF,ISN,0)  !CALLING TOTAL NODAL DISP
	DIS = -1.0D0*DIO + DIS
	CALL RELFILL('$XDI',DIS,ISF,ISN,1)  

C	-------------------------------------------------
	ENDSELECT
C	-------------------------------------------------

1000	CONTINUE


	DEALLOCATE(IOP,SET)

	RETURN

	END


C	=======================================================================
C	=== CONSTRUCTION ANALYSIS =============== SONGSAK NOV2007 =============
C	=======================================================================
      SUBROUTINE GRLLOD
	IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER*4 (I-N)
	DIMENSION FORC(20)
C	------------------------------
C     ELEMENT OPERATION
C	------------------------------
C	LEODC ELEMENT LOAD COMMAND
C		  = 0 ADD
C		  = 1 REPLACE

	CALL INTFILL('%IOL',ITI,1,1,0)   !ITI FILE	
C	FILE FOR PRINTING  NOT=ISO
	CALL INTFILL('%IOL',NOT,1,3,0)


C	TEMPORARY ARRAY FOR LOAD DATA                                      
      CALL DEFNINT('GRLI',KRLI,1,5 )  !5  IS MAXIMUM NUMBER OF INTG DATA 
	CALL INTZERO('GRLI')



C	-----------------------------------------------------
C     FRAME ELEMENT EXISTENCE CODE:
C      = 0 ELEMENT HAS NEVER EXISTED & CURRENTLY REMOVED
C      = 1 CURRENTLY INSTALLED

C	READ COMMAND
C	CALL FREBUF
C	CALL FREECH

      NL = 0
      CALL FREINT('N',NL  ,1)	  !ELEMENT NUMBER
	CALL INTFILL('GRLI',NL,1,1,1)

      IO = 0
      CALL FREINT('O',IO  ,1)	  !ELEMENT OPERATION
	CALL INTFILL('GRLI',IO,1,2,1)
		
      LTYP = 1 
      CALL FREINT('T',LTYP,1)   !LOAD TYPE 
	CALL INTFILL('GRLI',LTYP,1,3,1)
      
	IMDT = 1
      CALL FREINT('M',IMDT,1)   !NUMBER OF DATA REQUIRED FOR THIS LOAD
	CALL INTFILL('GRLI',IMDT,1,4,1)

      LDAP = 0  !LOAD APPLY TYPE  0 = CONSTRUCTION LOAD  1 = DEAD LOAD  
      CALL FREINT('D',LDAP,1)  !LOAD APPLIED TYPE
	CALL INTFILL('GRLI',LDAP,1,5,1)
      
	IBIG = 0
      CALL FREINT('B',IBIG,1)   !IBIG    0 = SMALL DATA  1 = BIG DATA


C	TEMPORARY ARRAY FOR LOAD DATA 
      CALL DEFNREL('GRLR',KRLR,1,IMDT)  !MMDT IS MAXIMUM NUMBER OF REAL DATA 
	CALL RELZERO('GRLR')


	IF(IBIG.EQ.0) THEN

	FORC(1:IMDT) = 0.0D0
      CALL FREREL('F',FORC,IMDT)   !ELEMENT FORCE DATA
	DO I = 1,IMDT
	CALL RELFILL('GRLR',FORC(I),1,I,1)
	ENDDO

	ELSE						!NEGATIVE IMDT,   IT MEANS THAT THE DATA IS VERY BIG

	DO I = 1,IMDT
	READ(ITI,*) FDATA
	CALL RELFILL('GRLR',FDATA,1,I,1)
	ENDDO

	ENDIF

C	-----------------------------------------------------
	IF(NL.LE.0) GOTO 2000

C	----------------------------------------------------
C	GET GROUP & ELEMENT NUMBER DUE TO INPUT GID NUMBER
C	----------------------------------------------------
	CALL INTFILL('%GDM',IEG,1,NL,0)
	CALL INTFILL('%GDM',IEL,2,NL,0)

		
	IF(IEG.EQ.0.OR.IEL.EQ.0) GOTO 2000
C	-------------------------------------------


	CALL ELMACT(IEG,IEL)


2000	CONTINUE


	CALL DELTINT('GRLI') 
	CALL DELTREL('GRLR')


      RETURN
      END

C	=======================================================================
C	=== CONSTRUCTION ANALYSIS =============== SONGSAK NOV2007 =============
C	=======================================================================
      SUBROUTINE ELMACT(IEG,IEL)
	IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER*4 (I-N)
C     ELEMENT LOAD


	CALL MDUACT(IEG,IEL)


	RETURN
	END



C	=======================================================================
C	=== CONSTRUCTION ANALYSIS =============== SONGSAK NOV2007 =============
C	=======================================================================

      SUBROUTINE MDUACT(IEG,IEL)
	IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER*4 (I-N)
C     ELEMENT LOAD

	CALL INTFILL('%GRP',ITYPE,1 ,IEG,0) !

	SELECTCASE(ITYPE)


	CASE(2)  ! TRUSS LOAD
	CALL LIEACT(IEG,IEL)

	CASE(5)  ! FRAME LOAD
	CALL FMEACT(IEG,IEL)

	CASE(9)  ! SHELL LOAD
	CALL SHLACT(IEG,IEL)

	CASE(10) ! SOLID LOAD
	CALL SODACT(IEG,IEL)


	ENDSELECT



	RETURN
	END




C	=======================================================================
C	=== CONSTRUCTION ANALYSIS =============== SONGSAK NOV2007 =============
C	=======================================================================
      SUBROUTINE LIEACT(IEG,IEL)
	IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER*4 (I-N)
C	TRUSS ELEMENT LOAD


	DIMENSION VR(3),VS(3),VT(3)
	DIMENSION NPM(10),NPI(10),WW1(3)


	ALLOCATABLE IF1(:),IF2(:),IF3(:),AF4(:),AF5(:),AF6(:),AF7(:)
	ALLOCATABLE AF8(:)
	ALLOCATABLE COORD(:,:),FIXE(:),FDAT(:)
	ALLOCATABLE IAX(:),AAX(:)
C	----------------------------------------
C	GROUP DATA
C	----------------------------------------
	CALL INTFILL('%GRP',ITYPE,1 ,IEG,0) !
	CALL INTFILL('%GRP',ISTYP,2 ,IEG,0) !
	CALL INTFILL('%GRP',NELE ,3 ,IEG,0) !
	CALL INTFILL('%GRP',MPRT ,4 ,IEG,0) ! MAXP
	CALL INTFILL('%GRP',MGAS ,5 ,IEG,0) !
	CALL INTFILL('%GRP',MFIB ,6 ,IEG,0) !
	CALL INTFILL('%GRP',NEF  ,7 ,IEG,0) !
	CALL INTFILL('%GRP',NNM  ,8 ,IEG,0) !
	CALL INTFILL('%GRP',NNF  ,9 ,IEG,0) !
	CALL INTFILL('%GRP',NGR  ,10,IEG,0) !
	CALL INTFILL('%GRP',NGS  ,11,IEG,0) !
	CALL INTFILL('%GRP',NGT  ,12,IEG,0) !
C	GROUP FILE
	CALL INTFILL('%GRF',N1   ,1 ,IEG,0) !
	CALL INTFILL('%GRF',N2   ,2 ,IEG,0) !
	CALL INTFILL('%GRF',N3   ,3 ,IEG,0) !
	CALL INTFILL('%GRF',N4   ,4 ,IEG,0) !
	CALL INTFILL('%GRF',N5   ,5 ,IEG,0) !
	CALL INTFILL('%GRF',N6   ,6 ,IEG,0) !
	CALL INTFILL('%GRF',N7   ,7 ,IEG,0) !
	CALL INTFILL('%GRF',N8   ,8 ,IEG,0) !

	CALL INTFILL('%GRF',NDX1 ,11,IEG,0) !
	CALL INTFILL('%GRF',NDX2 ,12,IEG,0) !
	CALL INTFILL('%GRF',NDX3 ,13,IEG,0) !
	CALL INTFILL('%GRF',NDX4 ,14,IEG,0) !
	CALL INTFILL('%GRF',NDX5 ,15,IEG,0) !
	CALL INTFILL('%GRF',NDX6 ,16,IEG,0) !
	CALL INTFILL('%GRF',NDX7 ,17,IEG,0) !
	CALL INTFILL('%GRF',NDX8 ,18,IEG,0) !
	
	CALL INTFILL('%GRF',NFLI ,21,IEG,0) !
	CALL INTFILL('%GRF',NFLR ,22,IEG,0) !
	
	CALL INTFILL('%GRF',LASI ,23,IEG,0) !
	CALL INTFILL('%GRF',LASR ,24,IEG,0) !
C	----------------------------------------
	ALLOCATE(IF1(N1),IF2(N2),IF3(N3),AF4(N4),AF5(N5),AF6(N6),AF7(N7))
	ALLOCATE(AF8(N8))
	ALLOCATE(COORD(3,NNM),FIXE(NEF))
	ALLOCATE(IAX(LASI),AAX(LASR))

      READ(NFLI,REC=IEL) IAX
      READ(NFLR,REC=IEL) AAX
      
	FIXE(1:NEF) = 0.0D0

	CALL INTFILL('%NUB',NSC,1,4,0)   !NSC
	CALL INTFILL('%NUB',NGRAV,1,9,0) !GRAVITY DIRECTION

C	---------------------------------------------------------
	NPM(1) = N3
	NPI(1) = N3
	CALL CALLINTG(IF3,IAX,NDX3,NPM,NPI,1,'READ') !ELEMENT DATA
	IXIST = IF3(4)     !TOTAL EXISTING FLAG 
	ISEC  = IF3(2)     !SECTION SET
	NPRT  = IF3(6)     !NUMBER OF PART
	
C	TURN OF TO INCLUDE WET CONCRETE LOAD
C	IF(IXIST.EQ.0) RETURN  !(ALL LOAD ARE ALREADY CLEAR AT REMOVE COMMAND)

C	--------------------------
C	EXTRACT NODAL COORDINATE
	NPM(1) = N1
	NPI(1) = N1
	CALL CALLINTG(IF1,IAX,NDX1,NPM,NPI,1,'READ')
	DO INM = 1,NNM
	NOD = IF1(INM)
	COORD(1:3,INM) = 0.0D0
	DO ISC = 1,NSC
	CALL RELFILL('$XYZ',COORD(ISC,INM),ISC,NOD,0)  !GETTING HERE NODAL COORDINATE
	ENDDO
	ENDDO
C	--------------------------

	NPM(1) = N2
	NPI(1) = N2
	CALL CALLINTG(IF2,IAX,NDX2,NPM,NPI,1,'READ')  !CALLING ELEMENT ORIGINAL EQUATION NUMBER


	NPM(1) = N6
	NPI(1) = N6
	CALL CALLREAL(AF6,AAX,NDX6,NPM,NPI,1,'READ')  !CALLING AF6 FOR ELEMENT LOAD

	NPM(1) = N8
	NPI(1) = N8
	CALL CALLREAL(AF8,AAX,NDX8,NPM,NPI,1,'READ')   !CALLING AF8 FOR FIXEND

C	----------------------------------------------------------
C	CALCULATE ORIGINAL S BASE VECTOR
	DO I = 1,3
	VR(I) = COORD(I,2) - COORD(I,1)
	ENDDO
	CALL SCALEN(VR,VR,ELN,3)            !GET LENGTH OF ELEMENT HERE
	CALL FMVEVR(VR,VS,VT)


C	SECTION PROP MASS DENSITY
	SELECT CASE(ISTYP)
	CASE(3)
	CALL RELFILL('$TSC',AREA ,1,ISEC,0)
	CALL RELFILL('$TSC',FM   ,2,ISEC,0)
	CALL RELFILL('$TSC',FL   ,3,ISEC,0)
	CASE(4)
	CALL RELFILL('$CSP',AREA ,1,ISEC,0)
	CALL RELFILL('$CSP',FM   ,2,ISEC,0)
	CALL RELFILL('$CSP',FL   ,3,ISEC,0)
	CASE(7)
	CALL RELFILL('$CSC',AREA ,1,ISEC,0)
	CALL RELFILL('$CSC',FM   ,2,ISEC,0)
	CALL RELFILL('$CSC',FL   ,3,ISEC,0)
	ENDSELECT

	MATN = INT(FM)
	MATY = INT(FL) !MAT TYPE 0=STEEL 1=PRESTRESS 2=CABLE
	SELECTCASE(MATY)
	CASE(0)
	CALL RELFILL('%MSL',DDEN,9,MATN,0)     !MASS DENSITY
	CASE(1)
	CALL RELFILL('%CPS',DDEN,7,MATN,0)     !MASS DENSITY
	CASE(2)
	CALL RELFILL('%CBS',DDEN,8,MATN,0)     !MASS DENSITY
	ENDSELECT

C	--------------------------------------------------------
C	GET LOAD COMMAND
	CALL INTFILL('GRLI',IO  ,1,2,0) !0=ADD (NO REPLACE---IT WILL CREATE PROBLEM WITH DEAD LOAD)    
	CALL INTFILL('GRLI',LTYP,1,3,0) !LOAD TYPE
	CALL INTFILL('GRLI',NMDT,1,4,0) !NUMBER OF LOAD DATA
	CALL INTFILL('GRLI',LDAP,1,5,0) !LOAD APPLY TYPE  0 = CONSTRUCTION LOAD  1 = DEAD LOAD 
	ALLOCATE(FDAT(NMDT))
	DO IMDT = 1,NMDT
	CALL RELFILL('GRLR',FDAT(I),1,I,0)
	ENDDO

	SELECTCASE(LTYP)

	CASE(0,1) !SELF WEIGHT LOAD  AND BODY LOAD
	WW1(1) = FDAT(1)
	WW1(2) = FDAT(2)
	WW1(3) = FDAT(3)

	WT = 0.5*ELN
      DO INM=1,NNM
      DO I = 1,NNF
	GLOAD = WW1(I)
	FIXE(I+NNF*(INM-1)) = FIXE(I+NNF*(INM-1)) + WT*DDEN*GLOAD*AREA
	ENDDO
	ENDDO

C     ------------------------------------
C	BACK UP AF8 FOR ELEMENT LOAD FIXEND
	DO IEF = 1,NEF
	IEQ  = IF2(IEF)						   !IF2(1:NEF) = ORIGINAL ELEMENT EQAUATION
		
	SELECTCASE(LDAP) !LOAD APPLY TYPE  0 = CONSTRUCTION LOAD  1 = DEAD LOAD 
	CASE(0)
	    CALL RELFILL('#LCT',FIXE(IEF),IEQ,1,2) !ADD TO CONSTRUCTION LOAD	
	    NUM = IEF+NEF*4
	    AF8(NUM) = AF8(NUM)+FIXE(IEF)          !ACCUMULATE FIXEND CONSTRUCTION FORCES.					(IO = 0 ADD)
      CASE(1)
	    CALL RELFILL('#LDD',FIXE(IEF),IEQ,1,2) !ADD TO DEAD LOAD 
	    NUM = IEF
	    AF8(NUM) = AF8(NUM)+FIXE(IEF)          !ACCUMULATE FIXEND DEAD LOAD FORCES.					(IO = 0 ADD)
	ENDSELECT

	ENDDO
C     ------------------------------------

C	BACK UP AF6 FOR ELEMENT LOAD FIXEND
	DO IEF = 1,NEF
	IEQ  = IF2(IEF)						   !IF2(1:NEF) = ORIGINAL ELEMENT EQAUATION
	CALL RELFILL('$XLI',FIXE(IEF),IEQ,1,2) !ADD TO INCREMENTAL EXTERNAL LOAD			(IO = 0 ADD)
	NUM = IEF+NEF+NEF+NEF
	AF6(NUM) = AF6(NUM)+FIXE(IEF)          !ACCUMULATE FIXEND FORCES.					(IO = 0 ADD)
	ENDDO


	CASE(2) !THERMAL LOAD
	CONT = FDAT(1)

C	BACK UP AF8 FOR ELEMENT LOAD FIXEND
	DO IEF = 1,NEF
	IEQ  = IF2(IEF)						   !IF2(1:NEF) = ORIGINAL ELEMENT EQAUATION
	CALL RELFILL('#LTM',FIXE(IEF),IEQ,1,2) !ADD TO INCREMENTAL TEMP. LOAD			
	NUM = IEF+NEF*3
	AF8(NUM) = AF8(NUM)+FIXE(IEF)          !ACCUMULATE FIXEND TEMP. FORCES.				
	ENDDO


	ENDSELECT
C	--------------------------------------------------------

	NPM(1) = N6
	NPI(1) = N6
	CALL CALLREAL(AF6,AAX,NDX6,NPM,NPI,1,'WRIT')  !CALLING AF6 FOR ELEMENT LOAD

	NPM(1) = N8
	NPI(1) = N8
	CALL CALLREAL(AF8,AAX,NDX8,NPM,NPI,1,'WRIT')   !CALLING AF8 FOR FIXEND


      WRITE(NFLI,REC=IEL) IAX
      WRITE(NFLR,REC=IEL) AAX
      
	DEALLOCATE(IAX,AAX)
	DEALLOCATE(IF1,IF2,IF3,AF4,AF5,AF6,AF7)
	DEALLOCATE(AF8)
	DEALLOCATE(COORD,FIXE)

	DEALLOCATE(FDAT)


	RETURN

	END



C	=======================================================================
C	=== CONSTRUCTION ANALYSIS =============== SONGSAK NOV2007 =============
C	=======================================================================
      SUBROUTINE FMEACT(IEG,IEL)
	IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER*4 (I-N)
C	FRAME ELEMENT LOAD

	COMMON /GASEC/  GAUSP(10,10),GAUSW(10,10)


	DIMENSION VR(3),VS(3),VT(3)
	DIMENSION LREAS(14)
	DIMENSION BPG(10),BWG(10)
	DIMENSION NPM(10),NPI(10),WW1(3),WW2(3)


	ALLOCATABLE IF1(:),IF2(:),IF3(:),AF4(:),AF5(:),AF6(:),AF7(:)
	ALLOCATABLE AF8(:)
	ALLOCATABLE COORD(:,:),FIXE(:),FIXL(:),FDAT(:)
	ALLOCATABLE GPL(:),GPW(:)
	ALLOCATABLE IAX(:),AAX(:)
C	----------------------------------------
C	GROUP DATA
C	----------------------------------------
	CALL INTFILL('%GRP',ITYPE,1 ,IEG,0) !
	CALL INTFILL('%GRP',ISTYP,2 ,IEG,0) !
	CALL INTFILL('%GRP',NELE ,3 ,IEG,0) !
	CALL INTFILL('%GRP',MPRT ,4 ,IEG,0) ! MAXP
	CALL INTFILL('%GRP',MGAS ,5 ,IEG,0) !
	CALL INTFILL('%GRP',MFIB ,6 ,IEG,0) !
	CALL INTFILL('%GRP',NEF  ,7 ,IEG,0) !
	CALL INTFILL('%GRP',NNM  ,8 ,IEG,0) !
	CALL INTFILL('%GRP',NNF  ,9 ,IEG,0) !
	CALL INTFILL('%GRP',NGR  ,10,IEG,0) !
	CALL INTFILL('%GRP',NGS  ,11,IEG,0) !
	CALL INTFILL('%GRP',NGT  ,12,IEG,0) !
C	GROUP FILE
	CALL INTFILL('%GRF',N1   ,1 ,IEG,0) !
	CALL INTFILL('%GRF',N2   ,2 ,IEG,0) !
	CALL INTFILL('%GRF',N3   ,3 ,IEG,0) !
	CALL INTFILL('%GRF',N4   ,4 ,IEG,0) !
	CALL INTFILL('%GRF',N5   ,5 ,IEG,0) !
	CALL INTFILL('%GRF',N6   ,6 ,IEG,0) !
	CALL INTFILL('%GRF',N7   ,7 ,IEG,0) !
	CALL INTFILL('%GRF',N8   ,8 ,IEG,0) !

	CALL INTFILL('%GRF',NDX1 ,11,IEG,0) !
	CALL INTFILL('%GRF',NDX2 ,12,IEG,0) !
	CALL INTFILL('%GRF',NDX3 ,13,IEG,0) !
	CALL INTFILL('%GRF',NDX4 ,14,IEG,0) !
	CALL INTFILL('%GRF',NDX5 ,15,IEG,0) !
	CALL INTFILL('%GRF',NDX6 ,16,IEG,0) !
	CALL INTFILL('%GRF',NDX7 ,17,IEG,0) !
	CALL INTFILL('%GRF',NDX8 ,18,IEG,0) !
	
	CALL INTFILL('%GRF',NFLI ,21,IEG,0) !
	CALL INTFILL('%GRF',NFLR ,22,IEG,0) !
	
	CALL INTFILL('%GRF',LASI ,23,IEG,0) !
	CALL INTFILL('%GRF',LASR ,24,IEG,0) !
C	----------------------------------------
	ALLOCATE(IF1(N1),IF2(N2),IF3(N3),AF4(N4),AF5(N5),AF6(N6),AF7(N7))
	ALLOCATE (AF8(N8))
	ALLOCATE(COORD(3,NNM),FIXE(NEF),FIXL(NEF))
	ALLOCATE(IAX(LASI),AAX(LASR))

      READ(NFLI,REC=IEL) IAX
      READ(NFLR,REC=IEL) AAX
      
	FIXE(1:NEF) = 0.0D0
	FIXL(1:NEF) = 0.0D0

	CALL INTFILL('%NUB',NSC,1,4,0)   !NSC
	CALL INTFILL('%NUB',NGRAV,1,9,0) !GRAVITY DIRECTION

C	---------------------------------------------------------
	NPM(1) = N3
	NPI(1) = N3
	CALL CALLINTG(IF3,IAX,NDX3,NPM,NPI,1,'READ') !ELEMENT DATA
	IXIST = IF3(4)  !TOTAL EXISTING FLAG 
	ISEC = IF3(2)     !SECTION SET
	LSTY = IF3(5)     !SEC TYPE FLAG
	NPRT = IF3(6)     !NUMBER OF PART

C	TURN OF TO INCLUDE WET CONCRETE LOAD	
C	IF(IXIST.EQ.0) RETURN  !(ALL LOAD ARE ALREADY CLEAR AT REMOVE COMMAND)

C	GET RELEASE FLAG
	DO I = 1,14
	LREAS(I) = IF3(7+I)
	ENDDO

C	--------------------------
C	EXTRACT NODAL COORDINATE
	NPM(1) = N1
	NPI(1) = N1
	CALL CALLINTG(IF1,IAX,NDX1,NPM,NPI,1,'READ')
	DO INM = 1,NNM
	NOD = IF1(INM)
	COORD(1:3,INM) = 0.0D0
	DO ISC = 1,NSC
	CALL RELFILL('$XYZ',COORD(ISC,INM),ISC,NOD,0)  !GETTING HERE NODAL COORDINATE
	ENDDO
	ENDDO
C	--------------------------

	NPM(1) = N2
	NPI(1) = N2
	CALL CALLINTG(IF2,IAX,NDX2,NPM,NPI,1,'READ')  !CALLING ELEMENT ORIGINAL EQUATION NUMBER


	NPM(1) = N6
	NPI(1) = N6
	CALL CALLREAL(AF6,AAX,NDX6,NPM,NPI,1,'READ')  !CALLING AF6 FOR ELEMENT LOAD

	NPM(1) = N8
	NPI(1) = N8
	CALL CALLREAL(AF8,AAX,NDX8,NPM,NPI,1,'READ')   !CALLING AF8 FOR FIXEND
C	----------------------------------------------------------
C	CALCULATE ORIGINAL S BASE VECTOR
	DO I = 1,3
	VR(I) = COORD(I,2) - COORD(I,1)
	ENDDO
	CALL SCALEN(VR,VR,ELN,3)            !GET LENGTH OF ELEMENT HERE
	CALL FMVEVR(VR,VS,VT)
	CALL RELFILL('$RNG',RANG,1,ISEC,0)  !SECTION ROTATION
	CALL ROMBAC(VR,VS,VT,RANG)


C	DETERMINE GAUSS POINT POSITION AND WEIGHT
	ALLOCATE(GPL(NGR),GPW(NGR))

	DO IGR = 1,NGR
	IF(IGR.EQ.1  ) GPL(IGR) = -1.0D0
	IF(IGR.EQ.NGR) GPL(IGR) =  1.0D0 
	IF(IGR.NE.1.AND.IGR.NE.NGR) GPL(IGR) =  GAUSP(IGR-1,NGR-2)
	IF(IGR.EQ.1  ) GPW(IGR) =  0.0D0
	IF(IGR.EQ.NGR) GPW(IGR) =  0.0D0 
	IF(IGR.NE.1.AND.IGR.NE.NGR) GPW(IGR) =  GAUSW(IGR-1,NGR-2)
	ENDDO

	DO IGR = 1,NGR
	RI = GPL(IGR)  !GAUSP(IGR,NGR)
	RW = GPW(IGR)  !GAUSW(IGR,NGR)
	BPG(IGR) = 0.5*ELN*(1.0 + RI)
	BWG(IGR) = 0.5*ELN*RW
	ENDDO

C	GET LOAD COMMAND
	CALL INTFILL('GRLI',IO  ,1,2,0) !0=ADD (NO REPLACE---IT WILL CREATE PROBLEM WITH DEAD LOAD)    
	CALL INTFILL('GRLI',LTYP,1,3,0) !LOAD TYPE
	CALL INTFILL('GRLI',NMDT,1,4,0) !NUMBER OF LOAD DATA
	CALL INTFILL('GRLI',LDAP,1,5,0) !LOAD APPLY TYPE  0 = CONSTRUCTION LOAD  1 = DEAD LOAD 
	ALLOCATE(FDAT(NMDT))
	DO IMDT = 1,NMDT
	CALL RELFILL('GRLR',FDAT(IMDT),1,IMDT,0)
	ENDDO



	SELECTCASE(LTYP)

	CASE(0) !SELF WEIGHT LOAD
	LPRT = INT(FDAT(1))
	WW1(1) = FDAT(2)
	WW1(2) = FDAT(3)
	WW1(3) = FDAT(4)

	LOC  = 0 !LOCAL LOAD FLAG 0=GLOBAL 1=LOCAL  DEFAULT TO GLOBAL FOR SELFWEIGHT
	LOE  = 0 !LOCAL ECC  FLAG 0=GLOBAL 1=LOCAL
	IMOM = 0 !MOMENT LOAD FLAG 0=FORCE 1=MOMENT
	ECR = 0.0D0 ; ECS = 0.0D0 ; ECT = 0.0D0 !ECCENTRICITY (NOTHING FOR SELFWEIGHT LOAD)
	
	CASE(1) !UNIFORM LOAD
	WW1(1) = FDAT(1)
	WW1(2) = FDAT(2)
	WW1(3) = FDAT(3)
	ECR    = FDAT(4)
	ECS    = FDAT(5)
	ECT    = FDAT(6)
	LOC    = INT(FDAT(7)) !LOCAL LOAD FLAG 0=GLOBAL 1=LOCAL
	LOE    = INT(FDAT(8)) !LOCAL ECC  FLAG 0=GLOBAL 1=LOCAL
	IMOM   = INT(FDAT(9)) !MOMENT LOAD FLAG 0=FORCE 1=MOMENT
		
	AL   = 0.0D0
	BL   = ELN
	IPRO = 0
	DO IDR = 1,3
	W1 = WW1(IDR)
	W2 = W1
	CALL CSAFFIX(W1,W2,AL,BL,ECR,ECT,ECS,IDR,IPRO,VR,VS,VT,
	1			 ELN,FIXE,NNF,LOC,LOE,IMOM,LREAS,FIXL)
	ENDDO


	CASE(2) !DISTRIBUTED PARTIAL GLOBAL LOAD
	WW1(1)   = FDAT(1)
	WW1(2)   = FDAT(3)
	WW1(3)   = FDAT(5)
	WW2(1)   = FDAT(2)
	WW2(2)   = FDAT(4)
	WW2(3)   = FDAT(6)
	AL       = FDAT(7)*ELN
	BL       = FDAT(8)*ELN
	ECR      = FDAT(9)
	ECS      = FDAT(10)
	ECT      = FDAT(11)
	LOC      = INT(FDAT(12)) !LOCAL LOAD FLAG 0=GLOBAL 1=LOCAL
	LOE      = INT(FDAT(13)) !LOCAL ECC  FLAG 0=GLOBAL 1=LOCAL
	IMOM     = INT(FDAT(14)) !MOMENT LOAD FLAG 0=FORCE 1=MOMENT

	IPRO = 0
	DO IDR = 1,3
	W1 = WW1(IDR)
	W2 = WW2(IDR)
	CALL CSAFFIX(W1,W2,AL,BL,ECR,ECT,ECS,IDR,IPRO,VR,VS,VT,
	1			 ELN,FIXE,NNF,LOC,LOE,IMOM,LREAS,FIXL)
	ENDDO

	CASE(3) !DISTRIBUTED PARTIAL GLOBAL PROJECT LOAD
	WW1(1)   = FDAT(1)
	WW1(2)   = FDAT(3)
	WW1(3)   = FDAT(5)
	WW2(1)   = FDAT(2)
	WW2(2)   = FDAT(4)
	WW2(3)   = FDAT(6)
	AL       = FDAT(7)*ELN
	BL       = FDAT(8)*ELN
	ECR      = FDAT(9)
	ECS      = FDAT(10)
	ECT      = FDAT(11)
	LOC      = INT(FDAT(12)) !LOCAL LOAD FLAG 0=GLOBAL 1=LOCAL
	LOE      = INT(FDAT(13)) !LOCAL ECC  FLAG 0=GLOBAL 1=LOCAL
	IMOM     = INT(FDAT(14)) !MOMENT LOAD FLAG 0=FORCE 1=MOMENT

	IPRO = 1
	DO IDR = 1,3
	W1 = WW1(IDR)
	W2 = WW2(IDR)
	CALL CSAFFIX(W1,W2,AL,BL,ECR,ECT,ECS,IDR,IPRO,VR,VS,VT,
	1			 ELN,FIXE,NNF,LOC,LOE,IMOM,LREAS,FIXL)
	ENDDO

	CASE(4) !LINEAR VARYING GLOBAL LOAD
	LDIR = INT(FDAT(1))
	CC   = FDAT(2)
	TX   = FDAT(3)
	TY   = FDAT(4)
	TZ   = FDAT(5)
	ECR  = FDAT(6)
	ECS  = FDAT(7)
	ECT  = FDAT(8)
	LOC  = INT(FDAT(9 )) !LOCAL LOAD FLAG 0=GLOBAL 1=LOCAL
	LOE  = INT(FDAT(10)) !LOCAL ECC  FLAG 0=GLOBAL 1=LOCAL
	IMOM = INT(FDAT(11)) !MOMENT LOAD FLAG 0=FORCE 1=MOMENT
C	-----------------------------------------------------
	TEST1 = CC - COORD(LDIR,1)
	TEST2 = CC - COORD(LDIR,2)
	IF(TEST1.GE.0.0.AND.TEST2.GE.0.0) THEN
	AL = 0.0D0
	BL = ELN
	WW1(1) = TX*TEST1
	WW2(1) = TX*TEST2
	WW1(2) = TY*TEST1
	WW2(2) = TY*TEST2
	WW1(3) = TZ*TEST1
	WW2(3) = TZ*TEST2
	ENDIF
	IF(TEST1.LT.0.0.AND.TEST2.GE.0.0) THEN
	X1 = COORD(LDIR,1)
	X2 = COORD(LDIR,2)
	AL = ELN*(1.0-(CC-X2)/(X1-X2))
	BL = ELN
	WW1(1) = 0.0D0
	WW2(1) = TX*TEST2
	WW1(2) = 0.0D0
	WW2(2) = TY*TEST2
	WW1(3) = 0.0D0
	WW2(3) = TZ*TEST2
	ENDIF
	IF(TEST1.GE.0.0.AND.TEST2.LT.0.0) THEN
	X1 = COORD(LDIR,1)
	X2 = COORD(LDIR,2)
	AL = 0.0D0
	BL = ELN*((CC-X1)/(X2-X1))
	WW1(1) = TX*TEST1
	WW2(1) = 0.0D0
	WW1(2) = TY*TEST1
	WW2(2) = 0.0D0
	WW1(3) = TZ*TEST1
	WW2(3) = 0.0D0
	ENDIF
	IF(TEST1.LT.0.0.AND.TEST2.LT.0.0) THEN
	AL = 0.0D0
	BL = ELN
	WW1(1) = 0.0D0
	WW2(1) = 0.0D0
	WW1(2) = 0.0D0
	WW2(2) = 0.0D0
	WW1(3) = 0.0D0
	WW2(3) = 0.0D0
	ENDIF
C	-----------------------------------------------------
	IPRO = 0
	DO IDR = 1,3
	W1 = WW1(IDR)
	W2 = WW2(IDR)
	CALL CSAFFIX(W1,W2,AL,BL,ECR,ECT,ECS,IDR,IPRO,VR,VS,VT,
	1			 ELN,FIXE,NNF,LOC,LOE,IMOM,LREAS,FIXL)

	ENDDO

	CASE(5) !GLOBAL POINT LOAD
	WW1(1)   = FDAT(1)
	WW1(2)   = FDAT(2)
	WW1(3)   = FDAT(3)
	AL   = FDAT(4)*ELN
	ECR  = FDAT(5)
	ECS  = FDAT(6)
	ECT  = FDAT(7)
	LOC  = INT(FDAT(8 )) !LOCAL LOAD FLAG 0=GLOBAL 1=LOCAL
	LOE  = INT(FDAT(9 )) !LOCAL ECC  FLAG 0=GLOBAL 1=LOCAL
	IMOM = INT(FDAT(10)) !MOMENT LOAD FLAG 0=FORCE 1=MOMENT

	
	IPRO = 0
	DO IDR = 1,3
	W1 = WW1(IDR)
	W2 = W1
	BL = AL
	CALL CSAFFIX(W1,W2,AL,BL,ECR,ECT,ECS,IDR,IPRO,VR,VS,VT,
	1			 ELN,FIXE,NNF,LOC,LOE,IMOM,LREAS,FIXL)
	ENDDO

	CASE(6) !BODY LOAD
	LPRT = INT(FDAT(1))
	WW1(1) = FDAT(2)
	WW1(2) = FDAT(3)
	WW1(3) = FDAT(4)
	LOC    = INT(FDAT(5)) !LOCAL LOAD FLAG 0=GLOBAL 1=LOCAL  
	LOE    = 0 !LOCAL ECC  FLAG 0=GLOBAL 1=LOCAL
	IMOM   = 0 !MOMENT LOAD FLAG 0=FORCE 1=MOMENT
	ECR    = 0.0D0 ; ECS = 0.0D0 ; ECT = 0.0D0 !ECCENTRICITY (NOTHING FOR BODY LOAD)
	
	CASE(7) !THERMAL LOAD
	LPAT = INT(FDAT(1))
	TEMP = FDAT(2)

	ENDSELECT


	SELECTCASE(LTYP)

	CASE(0,6,7) !SELF WEIGHT AND BODY AND TEMP LOAD ARE NEED TO LOOP OVER GAUSS AND PART

C     ----------------------------------------------------------
C     LOOP OVER GAUSS TO DET. STIFFNESS & FORCE VECTOR
C     ----------------------------------------------------------
      DO 400 IGR = 1,NGR

C     GAUSS LOCATION ALONG ELEMENT AXIS
	BXD = BPG(IGR)
	BXW = BWG(IGR)

	DO 300 IPRT = 1,NPRT
C     ------------------------------------------------------------
	IF(LPRT.NE.-1) THEN  !(-1 IS FOR ALL PART)
	IF(IPRT.NE.LPRT) GOTO 300   
	ENDIF

	NPM(1:2) = [N4,MPRT]
	NPI(1:2) = [N4,IPRT]
	CALL CALLREAL(AF4,AAX,NDX4,NPM,NPI,2,'READ')
	IXIST   = INT(AF4(1))   !EXISTING FLAG
	NPIB    = INT(AF4(2))   !NUM FIBER FOR THIS PART


	SELECTCASE(LSTY)

	CASE(0) !READY PROP
	NPM(1:4) = [N5,MFIB,MGAS,MPRT]
	NPI(1:4) = [N5,1   ,IGR ,IPRT]
	CALL CALLREAL(AF5,AAX,NDX5,NPM,NPI,4,'READ')    !CALLING DATA OF THIS PART
	IF(LTYP.EQ.0.OR.LTYP.EQ.6) THEN       !SELF AND BODY LOAD
	CALL SEFRED(FIXE,AF5,ELN,BXD,BXW,VR,VS,VT,NNF,
	1LREAS,WW1,FIXL,LOC,LOE,IMOM)
	ENDIF

	CASE(1) !FIBER PROP
	NPM(1:4) = [N5,MFIB,MGAS,MPRT]
	NPI(1:4) = [N5,   0,IGR ,IPRT]   !NFIB TO BE MODIFIED IN NEXT SUBRUTINE
	IF(LTYP.EQ.0.OR.LTYP.EQ.6) THEN       !SELF AND BODY LOAD
	CALL SEFFIB(NPM,NPI,NPIB,FIXE,ELN,BXD,BXW,
	1			VR,VS,VT,NNF,LREAS,WW1,FIXL,LOC,LOE,IMOM,AAX,NDX5)
	ENDIF

	ENDSELECT


300	CONTINUE

C     ----------------------------------------------------------
400	CONTINUE
C     ----------------------------------------------------------

	ENDSELECT

	IF(LTYP.NE.7) THEN  !IF NOT TEMP. LOAD
C	BACK UP AF6 FOR ELEMENT LOAD FIXEND
	DO IEF = 1,NEF
	IEQ  = IF2(IEF)						            !IF2(1:NEF) = ORIGINAL ELEMENT EQAUATION
	CALL RELFILL('$XLI',FIXE(IEF),IEQ,1,2)            !ADD TO INCREMENTAL EXTERNAL LOAD			(IO = 0 ADD)
	NUM = IEF+NEF+NEF+NEF
	AF6(NUM) = AF6(NUM)+FIXL(IEF)                     !ACCUMULATE FIXEND FORCES.					(IO = 0 ADD)	
	NPM(1) = N6
	NPI(1) = N6
	CALL CALLREAL(AF6,AAX,NDX6,NPM,NPI,1,'WRIT')      !BACKUP AF6 FOR ELEMENT LOAD
	ENDDO
	ENDIF

	IF(LTYP.NE.7) THEN  !IF NOT TEMP. LOAD
C	BACK UP AF8 FOR ELEMENT LOAD FIXEND
	DO IEF = 1,NEF
	IEQ  = IF2(IEF)						            !IF2(1:NEF) = ORIGINAL ELEMENT EQAUATION
	SELECTCASE(LDAP) !LOAD APPLY TYPE  0 = CONSTRUCTION LOAD  1 = DEAD LOAD 
	CASE(0)
	    CALL RELFILL('#LCT',FIXE(IEF),IEQ,1,2)            !ADD TO CONSTRUCTION LOAD			
	    NUM = IEF+NEF*4
	    AF8(NUM) = AF8(NUM)+FIXL(IEF)                     !ACCUMULATE FIXEND CONSTRUCTION FORCES.					(IO = 0 ADD)
      CASE(1)
	    CALL RELFILL('#LDD',FIXE(IEF),IEQ,1,2)            !ADD TO DEAD LOAD 
	    NUM = IEF
	    AF8(NUM) = AF8(NUM)+FIXL(IEF)                     !ACCUMULATE FIXEND DEAD LOAD FORCES.					(IO = 0 ADD)
	ENDSELECT
	ENDDO
	NPM(1) = N8
	NPI(1) = N8
	CALL CALLREAL(AF8,AAX,NDX8,NPM,NPI,1,'WRIT')      !BACKUP AF8 FOR FIXEND
	ENDIF

	IF(LTYP.EQ.7) THEN  !IF TEMP. LOAD
C	BACK UP AF8 FOR ELEMENT LOAD FIXEND
	DO IEF = 1,NEF
	IEQ  = IF2(IEF)						            !IF2(1:NEF) = ORIGINAL ELEMENT EQAUATION
	CALL RELFILL('#LTM',FIXE(IEF),IEQ,1,2)            !ADD TO CONSTRUCTION LOAD			
	NUM = IEF+NEF*3
	AF8(NUM) = AF8(NUM)+FIXL(IEF)                     !ACCUMULATE FIXEND CONSTRUCTION FORCES.					(IO = 0 ADD)
	ENDDO
	NPM(1) = N8
	NPI(1) = N8
	CALL CALLREAL(AF8,AAX,NDX8,NPM,NPI,1,'WRIT')      !BACKUP AF8 FOR FIXEND
	ENDIF


      WRITE(NFLI,REC=IEL) IAX
      WRITE(NFLR,REC=IEL) AAX
      
	DEALLOCATE(IAX,AAX)
	DEALLOCATE(IF1,IF2,IF3,AF4,AF5,AF6,AF7)
	DEALLOCATE(AF8)
	DEALLOCATE(COORD,FIXE,FIXL)
	DEALLOCATE(GPL,GPW)
	DEALLOCATE(FDAT)

	RETURN

	END


C	=======================================================================
C	=== CONSTRUCTION ANALYSIS =============== PRAMIN OCT 2010 =============
C	=======================================================================
C     SOLID ELEMENT
      SUBROUTINE SODACT(IEG,IEL)
	IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER*4 (I-N)
C	LTMOPT(1)  WORKING ON MECHANICAL DATA
C	 0 = NO UPDATE STRESS & MATERIAL STATE
C	 1 = UPDATE STRESS & MATERIAL STATE
C	 2 = STIFFNESS ONLY

	COMMON /GASEC/  GAUSP(10,10),GAUSW(10,10)
C	NEXT LINE ADDED BY GILSON - MARCH2004 (LOAD INPUT)
	COMMON /LCSS/ ILCN,ILCC	
	
	DIMENSION NPM(10),NPI(10)
	DIMENSION WW1(3),FW(3)
	DIMENSION XJ(3,3),XJI(3,3) 
	DIMENSION H(21),HD(3,21)
	DIMENSION VT(3)

	ALLOCATABLE IF1(:),IF2(:),IF3(:),AF6(:),AF8(:)
	ALLOCATABLE COORD(:,:),FDAT(:),FIXE(:)
	ALLOCATABLE IAX(:),AAX(:)
	ALLOCATABLE NODEX(:)

C	----------------------------------------
C	GROUP DATA
C	----------------------------------------
	CALL INTFILL('%GRP',ITYPE,1 ,IEG,0) !
	CALL INTFILL('%GRP',ISTYP,2 ,IEG,0) !
	CALL INTFILL('%GRP',NELE ,3 ,IEG,0) !
	CALL INTFILL('%GRP',MPRT ,4 ,IEG,0) ! MAXP
	CALL INTFILL('%GRP',MGAS ,5 ,IEG,0) !
	CALL INTFILL('%GRP',MFIB ,6 ,IEG,0) !
	CALL INTFILL('%GRP',NEF  ,7 ,IEG,0) !
	CALL INTFILL('%GRP',NNM  ,8 ,IEG,0) !
	CALL INTFILL('%GRP',NNF  ,9 ,IEG,0) !
	CALL INTFILL('%GRP',NGR  ,10,IEG,0) !
	CALL INTFILL('%GRP',NGS  ,11,IEG,0) !
	CALL INTFILL('%GRP',NGT  ,12,IEG,0) !
C	GROUP FILE
	CALL INTFILL('%GRF',N1   ,1 ,IEG,0) !
	CALL INTFILL('%GRF',N2   ,2 ,IEG,0) !
	CALL INTFILL('%GRF',N3   ,3 ,IEG,0) !
	CALL INTFILL('%GRF',N6   ,6 ,IEG,0) !
	CALL INTFILL('%GRF',N8   ,8 ,IEG,0) !

	CALL INTFILL('%GRF',NDX1 ,11,IEG,0) !
	CALL INTFILL('%GRF',NDX2 ,12,IEG,0) !
	CALL INTFILL('%GRF',NDX3 ,13,IEG,0) !
	CALL INTFILL('%GRF',NDX6 ,16,IEG,0) !
	CALL INTFILL('%GRF',NDX8 ,18,IEG,0) !
	
	CALL INTFILL('%GRF',NFLI ,21,IEG,0) !
	CALL INTFILL('%GRF',NFLR ,22,IEG,0) !
	
	CALL INTFILL('%GRF',LASI ,23,IEG,0) !
	CALL INTFILL('%GRF',LASR ,24,IEG,0) !
C	----------------------------------------

	ALLOCATE(IF1(N1),IF2(N2),IF3(N3),AF6(N6),AF8(N8))
	ALLOCATE(COORD(3,NNM),FIXE(NEF))
	ALLOCATE(IAX(LASI),AAX(LASR))

      READ(NFLI,REC=IEL) IAX
      READ(NFLR,REC=IEL) AAX
C	---------------------------------------- 

	FIXE(1:NEF) = 0.0D0

C	CALLING GRAVITY
	DO I = 1,3
	CALL RELFILL('%GRV',WW1(I),1,I,0)
	ENDDO

	CALL INTFILL('%NUB',NSC,1,4,0)
C	IF1 -------------------------------------
C	EXTRACT NODAL COORDINATE
	NPM(1) = N1
	NPI(1) = N1
	CALL CALLINTG(IF1,IAX,NDX1,NPM,NPI,1,'READ')
C	-----------------------------------------	
	DO INM = 1,NNM
	NOD = IF1(INM)
	COORD(1:3,INM) = 0.0D0
	DO ISC = 1,NSC
	CALL RELFILL('$XYZ',COORD(ISC,INM),ISC,NOD,0)  !GETTING HERE NODAL COORDINATE
	ENDDO
	ENDDO

C	IF2 -------------------------------------
	NPM(1) = N2
	NPI(1) = N2
	CALL CALLINTG(IF2,IAX,NDX2,NPM,NPI,1,'READ')  !CALLING ELEMENT ORIGINAL EQUATION NUMBER
C	-----------------------------------------	

C	AF6 -------------------------------------
	NPM(1) = N6
	NPI(1) = N6
	CALL CALLREAL(AF6,AAX,NDX6,NPM,NPI,1,'READ')  !CALLING AF6 FOR ELEMENT LOAD
C	-----------------------------------------	

C	AF8 -------------------------------------
	NPM(1) = N8
	NPI(1) = N8
	CALL CALLREAL(AF8,AAX,NDX8,NPM,NPI,1,'READ')   !CALLING AF8 FOR FIXEND
C	-----------------------------------------

C	IF3 -------------------------------------
	NPM(1) = N3
	NPI(1) = N3
	CALL CALLINTG(IF3,IAX,NDX3,NPM,NPI,1,'READ')   !ELEMENT DATA
C	-----------------------------------------	

	ISEC = IF3(2)     !SECTION SET
	NPRT = IF3(6)     !NUMBER OF PART (EQUAL TO 1 FOR SHELL)
	
	CALL RELFILL('$SOC',FMAT,1,ISEC,0)       !MAT NO
	CALL RELFILL('$SOC',FTYP,2,ISEC,0)       !MAT TYPE  0=CONCRETE 1=STEEL
	
	MATN = INT(FMAT)
	MTYP = INT(FTYP)
	IF(MTYP.EQ.0) CALL RELFILL('%FNC',RHO,4,MATN,0)
	IF(MTYP.EQ.1) CALL RELFILL('%MSL',RHO,9,MATN,0)

C	---------------------------------------------------------

C	GET LOAD COMMAND
	CALL INTFILL('GRLI',IO  ,1,2,0) !0=ADD (NO REPLACE---IT WILL CREATE PROBLEM WITH DEAD LOAD)    
	CALL INTFILL('GRLI',LTYP,1,3,0) !LOAD TYPE
	CALL INTFILL('GRLI',NMDT,1,4,0) !NUMBER OF LOAD DATA
	CALL INTFILL('GRLI',LDAP,1,5,0) !LOAD APPLY TYPE  0 = CONSTRUCTION LOAD  1 = DEAD LOAD 

C     ----------------------------------------------------------	
     	!BODY LOAD        : FDAT = [BF(1)  BF(2)  BF(3)]
     	!TRACTION LOAD    : FDAT = [IFACE  TF(1)  TF(2)  TF(3)]
     	!PRESSURE LOAD    : FDAT = [IFACE  PRES ] 
     	!HYDROSTATIC LOAD : FDAT = [IFACE  RHOW   WLEV   IGV  ]
C     ---------------------------------------------------------- 	
	ALLOCATE(FDAT(NMDT))
	DO IMDT = 1,NMDT
	CALL RELFILL('GRLR',FDAT(IMDT),1,IMDT,0)
	ENDDO  	
     	
     	NDEX = NNM - 8 + 1	
	ALLOCATE(NODEX(NDEX))
C     ----------------------------------------------------------
C     LOOP OVER GAUSS TO DET. STIFFNESS & FORCE VECTOR
C     ----------------------------------------------------------
      SELECTCASE(LTYP)
C     ----------------------------------------------------------     
      CASE(0) !BODY LOAD  
C     -------------------------
C     VOLUME INTEGRATION
C     -------------------------
      NGR = 2
      NGS = 2
      NGT = 2
      DO 300 IGR = 1,NGR
      DO 300 IGS = 1,NGS
      DO 300 IGT = 1,NGT
      
      RI = GAUSP(IGR,NGR)
      SI = GAUSP(IGS,NGS)
      TI = GAUSP(IGT,NGT)
      WW = GAUSW(IGR,NGR)*GAUSW(IGS,NGS)*GAUSW(IGT,NGT)

      CALL SHAP3D_S (RI,SI,TI,H,HD,NODEX,NNM)
      CALL JACO3D_S (COORD,HD,XJ,XJI,DET,IEL,NNM)
C     -------------------------
	FW(1) = FDAT(1)*RHO*DET*WW
	FW(2) = FDAT(2)*RHO*DET*WW
	FW(3) = FDAT(3)*RHO*DET*WW
C     -------------------------	
	DO IDR = 1,3
	NDUM = 3-IDR
	DO INM = 1,NNM
	FIXE(3*INM-NDUM) = FIXE(3*INM-NDUM) + H(INM)*FW(IDR)
	ENDDO
	ENDDO	
C     -------------------------	
300	CONTINUE
      
C     ---------------------------------------------------------- 
      CASE(1,2,3)  !TRACTION LOAD, PRESSURE LOAD, HYDROSTATIC LOAD 
C     ----------------------
C     SURFACE INTEGRATION
C     ----------------------
	IPT = 0
	MG1 = 3
	MG2 = 3
	IFACE = INT(FDAT(1))
	
      DO 400 II = 1,MG1
      DO 400 JJ = 1,MG2
      IPT = IPT + 1	      
      
	! DEFINE GAUSS LOACATION AND WEIGTH
	CALL GFACE3D(IFACE,II,JJ,RI,SI,TI,WT,MG1,MG2)
      ! SHAPE FUNCTION
	CALL SHAP3D (RI,SI,TI,H,HD,NODEX,NNM)
      ! JACOBIAN
	CALL JACO3D (COORD,HD,XJ,XJI,DET,IEL,NNM)
      ! DETERMINE THE AREA FACTOR ACCORDING TO FACE
	CALL SOLIDVECT(IFACE,XJ,DET,VT)
	
C     ----------------------
	SELECTCASE(LTYP) 
	CASE(1) !TRACTION LOAD
	FW(1) = FDAT(2)*DET*WT
	FW(2) = FDAT(3)*DET*WT
	FW(3) = FDAT(4)*DET*WT
	CASE(2) !PRESSURE LOAD
	PRES  = FDAT(2)
	FW(1) = PRES*VT(1)*DET*WT
	FW(2) = PRES*VT(2)*DET*WT
	FW(3) = PRES*VT(3)*DET*WT
	CASE(3) !HYDROSTATIC LOAD
	RHOW = FDAT(2)
	WLEV = FDAT(3)		!WATER LEVEL
	IGV  = INT(FDAT(4))
	WLEG = 0.0D0
	DO INM = 1,NNM
	WLEG = WLEG + H(INM)*COORD(IGV,INM)
	ENDDO
	IF(WLEG.LT.WLEV) THEN
	WDEP = WLEV - WLEG
	FW(1) = RHOW*VT(1)*DET*WT*WDEP
	FW(2) = RHOW*VT(2)*DET*WT*WDEP
	FW(3) = RHOW*VT(3)*DET*WT*WDEP
	ENDIF
	ENDSELECT
C     ----------------------	
	DO IDR = 1,3
	NDUM = 3-IDR
	DO INM = 1,NNM
	FIXE(3*INM-NDUM) = FIXE(3*INM-NDUM) + H(INM)*FW(IDR)
	ENDDO
	ENDDO
C     ----------------------	 
	
400	CONTINUE
C     -----------------------------------------------------------
	ENDSELECT  
		
	
C     -----------------------------------------------------------
C	BACK UP AF6 FOR ELEMENT LOAD FIXEND
	DO IEF = 1,NEF
	IEQ  = IF2(IEF)						    !IF2(1:NEF) = ORIGINAL ELEMENT EQAUATION
	CALL RELFILL('$XLI',FIXE(IEF),IEQ,1,2)    !ADD TO INCREMENTAL EXTERNAL LOAD			(IO = 0 ADD)
	NUM = IEF+NEF+NEF+NEF
	AF6(NUM) = AF6(NUM)+FIXE(IEF)             !ACCUMULATE FIXEND FORCES.					(IO = 0 ADD)	
C	AF6 -------------------------------------	
	NPM(1) = N6
	NPI(1) = N6
	CALL CALLREAL(AF6,AAX,NDX6,NPM,NPI,1,'WRIT')        !UPDATE AF6 FOR ELEMENT LOAD
C     -----------------------------------------	
	ENDDO


C	BACK UP AF8 FOR ELEMENT LOAD FIXEND
	DO IEF = 1,NEF
	IEQ  = IF2(IEF)						    !IF2(1:NEF) = ORIGINAL ELEMENT EQAUATION
	SELECTCASE(LDAP) !LOAD APPLY TYPE  0 = CONSTRUCTION LOAD  1 = DEAD LOAD 
	CASE(0)
	    CALL RELFILL('#LCT',FIXE(IEF),IEQ,1,2)    !ADD TO CONSTRUCTION LOAD			
	    NUM = IEF+NEF*4
	    AF8(NUM) = AF8(NUM)+FIXE(IEF)             !ACCUMULATE FIXEND CONSTRUCTION FORCES.					(IO = 0 ADD)
      CASE(1)
	    CALL RELFILL('#LDD',FIXE(IEF),IEQ,1,2) !ADD TO DEAD LOAD 
	    NUM = IEF
	    AF8(NUM) = AF8(NUM)+FIXE(IEF)          !ACCUMULATE FIXEND DEAD LOAD FORCES.					(IO = 0 ADD)
	ENDSELECT
	ENDDO
C	AF8 -------------------------------------	
	NPM(1) = N8
	NPI(1) = N8
	CALL CALLREAL(AF8,AAX,NDX8,NPM,NPI,1,'WRIT')   !UPDATE AF8 FOR FIXEND
C     -----------------------------------------

      WRITE(NFLI,REC=IEL) IAX
      WRITE(NFLR,REC=IEL) AAX
      
	DEALLOCATE(IAX,AAX)
	DEALLOCATE(IF1,IF2,IF3,AF6,AF8)
	DEALLOCATE(COORD,FIXE)	
	DEALLOCATE(FDAT)
	DEALLOCATE(NODEX)

	RETURN
	END





C	=======================================================================
C	=== CONSTRUCTION ANALYSIS =============== SONGSAK NOV2007 =============
C	=======================================================================

      SUBROUTINE SEFRED(PA,AF5,ELN,AL,BXW,VR,VS,VT,NNF,
	1LREAS,WW,PL,LOC,LOE,IMOM)
	IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER*4 (I-N)
	DIMENSION PA(1),AF5(1),WW(1),PL(1)
	DIMENSION VR(3),VS(3),VT(3),LREAS(1)

C	LTMOPT(1)  SELFWEIGHT
C	----------------------------------------	
C	N = 1  A     
C	N = 2  SC     
C	N = 3  TC     
C	N = 4  QS     
C	N = 5  QT     
C	N = 6  IS     
C	N = 7  IT     
C	N = 8  IST     
C	N = 9  J     
C	N = 10 IW     
C	N = 11 MATERIAL FLAG     
C	N = 12 CONC or STEEL   

C	----------------------------------------
C	CALLING DATA FROM WORKING ARRAY HERE


	Ao    = AF5(1 )
	QSo   = AF5(4 )
	QTo   = AF5(5 )
	SCo   = AF5(2 ) + QTo/Ao
	TCo   = AF5(3 ) + QSo/Ao

	RHO   = AF5(20)

	DO IDR = 1,3
	W1   = Ao*RHO*WW(IDR)*BXW
	W2   = W1
	BL   = AL
	IPRO = 0
	ECR = 0.0D0
	ECT = TCo
	ECS = SCo
	CALL CSAFFIX(W1,W2,AL,BL,ECR,ECT,ECS,IDR,IPRO,VR,VS,VT,
	1			 ELN,PA,NNF,LOC,LOE,IMOM,LREAS,PL)
	ENDDO

	RETURN
	END


C	=======================================================================
C	=== CONSTRUCTION ANALYSIS =============== SONGSAK NOV2007 =============
C	=======================================================================
      SUBROUTINE SEFFIB(NPM,NPI,NPIB,PA,ELN,AL,BXW,
	1				  VR,VS,VT,NNF,LREAS,WW,PL,LOC,LOE,IMOM,AAX,NDX5)
	IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER*4 (I-N)
C	LTMOPT(1)  WORKING ON MECHANICAL DATA
C	 0 = NO UPDATE STRESS & MATERIAL STATE
C	 1 = UPDATE STRESS & MATERIAL STATE
C	 2 = STIFFNESS ONLY (FOR THIS SUBROUTINE)

	DIMENSION PA(1),PL(1),AAX(1)
	DIMENSION NPM(1),NPI(1),WW(1)
	DIMENSION VR(3),VS(3),VT(3),LREAS(1)
	ALLOCATABLE AF5(:)


	N5 = NPM(1)
	ALLOCATE(AF5(N5))


	DO 1000 IFIB = 1,NPIB

	NPI(2) = IFIB
	CALL CALLREAL(AF5,AAX,NDX5,NPM,NPI,4,'READ')    !CALLING DATA OF THIS PART

C	----------------------------------------
C	CALLING DATA FROM WORKING ARRAY HERE

	DA      = AF5(1)  !FIBER AREA
	SC      = AF5(2)  !FIBER DISTANCE S
	TC      = AF5(3)  !FIBER DISTANCE T
	RHO     = AF5(20)
C	----------------------------------------
	DO IDR = 1,3	
	W1   = DA*RHO*WW(IDR)*BXW
	W2   = W1
	BL   = AL
	IPRO = 0
	ECR = 0.0D0
	ECT = TC
	ECS = SC
	CALL CSAFFIX(W1,W2,AL,BL,ECR,ECT,ECS,IDR,IPRO,VR,VS,VT,
	1			 ELN,PA,NNF,LOC,LOE,IMOM,LREAS,PL)
	ENDDO

1000	CONTINUE


	DEALLOCATE(AF5)


	RETURN
	END


C	=======================================================================
C	=== CONSTRUCTION ANALYSIS =============== SONGSAK NOV2007 =============
C	=======================================================================
	SUBROUTINE CSAFFIX(W1,W2,AL,BL,ECR,ECT,ECS,IDR,IPRO,VR,VS,VT,
	1				   ELN,RG,NNF,LOC,LOE,IMOM,LREAS,RL)
	IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER*4 (I-N)
C	==============================================================
	DIMENSION VR(3),VS(3),VT(3),RG(NNF,2),RL(NNF,2)
	DIMENSION COEF(6),TRANS(14,14)
	DIMENSION FIXG(14),FIXD(14)
	DIMENSION ECCMT(3,3)
	DIMENSION VPRO(3),VL(3)
	DIMENSION TRANH(14,14),LREAS(14)
	DIMENSION TRANE(3,3)

C	FOR LOCAL LOAD
	VL(1:3) = 0.0
	IF(LOC.NE.0) VL(IDR) = 1.0

C	LOC = 0 !LOCAL LOAD FLAG 0=GLOBAL 1=LOCAL
C	LOE = 0 !LOCAL ECC  FLAG 0=GLOBAL 1=LOCAL
C	IMOM = 0 !MOMENT LOAD FLAG 0=FORCE 1=MOMENT
C	ECR , ECS, ECT !ECCENTRICITY

	ECCMT = 0.0
	ECCMT(1,1) =  0.0D0
	ECCMT(1,2) = -ECT
	ECCMT(1,3) =  ECS
	ECCMT(2,1) =  ECT
	ECCMT(2,2) =  0.0D0
	ECCMT(2,3) = -ECR
	ECCMT(3,1) = -ECS
	ECCMT(3,2) =  ECR
	ECCMT(3,3) =  0.0D0

C     IF ECC IS IN GLOBAL THEN DO THE TRANSFORMATION
	IF(LOE.EQ.0) THEN !TRANSFORM THE ECC FROM GLOBAL TO LOCAL (E-XYZ TO E-RST)
	    TRANE(1:3,1) = VR(1:3)
	    TRANE(1:3,2) = VS(1:3)
	    TRANE(1:3,3) = VT(1:3)
	    ECCMT = MATMUL(TRANSPOSE(TRANE),MATMUL(ECCMT,TRANE))
	ENDIF
	
	VPRO(1:3) = 0.0D0
	VPRO(IDR) = 1.0D0


	COST = VR(1)*VPRO(1) +  VR(2)*VPRO(2) + VR(3)*VPRO(3)
	COST = SQRT(1.0D0 - COST*COST)

	IF(IPRO.EQ.1) THEN
	W1 = W1*COST
	W2 = W2*COST
	ENDIF

	IF(AL.EQ.BL) THEN
C	DX = ELN*1.0E-8
C	BL = BL+DX
C	W2 = W1/DX
C	W1 = W1/DX
	W2 = W1
	ENDIF


	CALL TRANLG(VR,VS,VT,TRANS)

	IF(LOC.EQ.0) THEN
	W1R = VR(IDR)*W1
	W1S = VS(IDR)*W1
	W1T = VT(IDR)*W1
	ELSE
	W1R = VL(1)*W1
	W1S = VL(2)*W1
	W1T = VL(3)*W1
	ENDIF

	W1MR = ECCMT(1,1)*W1R + ECCMT(1,2)*W1S + ECCMT(1,3)*W1T
	W1MS = ECCMT(2,1)*W1R + ECCMT(2,2)*W1S + ECCMT(2,3)*W1T 
	W1MT = ECCMT(3,1)*W1R + ECCMT(3,2)*W1S + ECCMT(3,3)*W1T 

	IF(LOC.EQ.0) THEN
	W2R = VR(IDR)*W2
	W2S = VS(IDR)*W2
	W2T = VT(IDR)*W2
	ELSE
	W2R = VL(1)*W2
	W2S = VL(2)*W2
	W2T = VL(3)*W2
	ENDIF

	W2MR = ECCMT(1,1)*W2R + ECCMT(1,2)*W2S + ECCMT(1,3)*W2T
	W2MS = ECCMT(2,1)*W2R + ECCMT(2,2)*W2S + ECCMT(2,3)*W2T 
	W2MT = ECCMT(3,1)*W2R + ECCMT(3,2)*W2S + ECCMT(3,3)*W2T 

	FIXD(1:14) = 0.0

	IF(IMOM.EQ.1) THEN
	W1MR = W1R
	W1MS = W1S
	W1MT = W1T

	W2MR = W2R
	W2MS = W2S
	W2MT = W2T
	GOTO 100
	ENDIF


C	FROM CONCENTRIC LOAD

C	LOCAL AXIAL FORCE
	CALL FXCONT(W1R,W2R,AL,BL,ELN,COEF)
	FIXD(1) = COEF(5)
	FIXD(8) = COEF(6)


C	SHEAR IN S-AXIS AND MOMENT IN T-AXIS
	CALL FXCONT(W1S,W2S,AL,BL,ELN,COEF)
	FIXD(2)  = COEF(1)
	FIXD(6)  = COEF(2)
	FIXD(9)  = COEF(3)
	FIXD(13) = COEF(4)	

C	SHEAR IN T-AXIS AND MOMENT IN S-AXIS
	CALL FXCONT(W1T,W2T,AL,BL,ELN,COEF)
	FIXD(3)  = COEF(1)
	FIXD(5)  =-COEF(2)
	FIXD(10) = COEF(3)
	FIXD(12) =-COEF(4)	

C	GOTO 200
100	CONTINUE
C	FROM ECCENTRICITY MOMENT

C	LOCAL AXIAL MOMENT
	CALL FMCONT(W1MR,W2MR,AL,BL,ELN,COEF)
	FIXD(4)  = FIXD(4)  + COEF(5)
	FIXD(11) = FIXD(11) + COEF(6)


C	SHEAR IN T-AXIS AND MOMENT IN S-AXIS
	CALL FMCONT(W1MS,W2MS,AL,BL,ELN,COEF)
	FIXD(3)  = FIXD(3)  - COEF(1)
	FIXD(5)  = FIXD(5)  + COEF(2)
	FIXD(10) = FIXD(10) - COEF(3)
	FIXD(12) = FIXD(12) + COEF(4)


C	SHEAR IN S-AXIS AND MOMENT IN T-AXIS
	CALL FMCONT(W1MT,W2MT,AL,BL,ELN,COEF)
	FIXD(2)  = FIXD(2)  + COEF(1)
	FIXD(6)  = FIXD(6)  + COEF(2)
	FIXD(9)  = FIXD(9)  + COEF(3)
	FIXD(13) = FIXD(13) + COEF(4)

200	CONTINUE
C	------------------------------------------------------------
C	TRANSFORM CORRESPONDING RELEASE CONDITION
C	------------------------------------------------------------


	CALL TRNHIG(TRANH,ELN,LREAS)
	CALL TRNMUL(TRANH,FIXD,2)

	DO I = 1,NNF
	RL(I,1) = RL(I,1)+FIXD(I)
	RL(I,2) = RL(I,2)+FIXD(I+7)
	ENDDO


	FIXG = MATMUL(TRANS,FIXD)

	DO I = 1,NNF
	RG(I,1) = RG(I,1)+FIXG(I)
	RG(I,2) = RG(I,2)+FIXG(I+7)
	ENDDO




      RETURN
      END

C	=======================================================================
C	=== CONSTRUCTION ANALYSIS =============== SONGSAK NOV2007 =============
C	=======================================================================














C	=======================================================================
C	=== CONSTRUCTION ANALYSIS =============== SONGSAK NOV2007 =============
C	=======================================================================

      SUBROUTINE SEFWFRM(IEG,IEL,IPRT,FIXE,FIXL,IAX,AAX)
	IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER*4 (I-N)
C	LTMOPT(1)  WORKING ON MECHANICAL DATA
C	 0 = NO UPDATE STRESS & MATERIAL STATE
C	 1 = UPDATE STRESS & MATERIAL STATE
C	 2 = STIFFNESS ONLY

	COMMON /GASEC/  GAUSP(10,10),GAUSW(10,10)


	DIMENSION VR(3),VS(3),VT(3)
	DIMENSION LREAS(14)
	DIMENSION BPG(10),BWG(10)
	DIMENSION NPM(10),NPI(10)
	DIMENSION FIXE(1),FIXL(1),WW1(3),IAX(1),AAX(1)


	ALLOCATABLE IF1(:),IF3(:),AF4(:),AF5(:)
	ALLOCATABLE COORD(:,:)
	ALLOCATABLE GPL(:),GPW(:)
C	----------------------------------------
C	GROUP DATA
C	----------------------------------------
	CALL INTFILL('%GRP',ITYPE,1 ,IEG,0) !
	CALL INTFILL('%GRP',ISTYP,2 ,IEG,0) !
	CALL INTFILL('%GRP',NELE ,3 ,IEG,0) !
	CALL INTFILL('%GRP',MPRT ,4 ,IEG,0) ! MAXP
	CALL INTFILL('%GRP',MGAS ,5 ,IEG,0) !
	CALL INTFILL('%GRP',MFIB ,6 ,IEG,0) !
	CALL INTFILL('%GRP',NEF  ,7 ,IEG,0) !
	CALL INTFILL('%GRP',NNM  ,8 ,IEG,0) !
	CALL INTFILL('%GRP',NNF  ,9 ,IEG,0) !
	CALL INTFILL('%GRP',NGR  ,10,IEG,0) !
	CALL INTFILL('%GRP',NGS  ,11,IEG,0) !
	CALL INTFILL('%GRP',NGT  ,12,IEG,0) !
C	GROUP FILE
	CALL INTFILL('%GRF',N1   ,1 ,IEG,0) !
	CALL INTFILL('%GRF',N3   ,3 ,IEG,0) !
	CALL INTFILL('%GRF',N4   ,4 ,IEG,0) !
	CALL INTFILL('%GRF',N5   ,5 ,IEG,0) !

	CALL INTFILL('%GRF',NDX1 ,11,IEG,0) !
	CALL INTFILL('%GRF',NDX3 ,13,IEG,0) !
	CALL INTFILL('%GRF',NDX4 ,14,IEG,0) !
	CALL INTFILL('%GRF',NDX5 ,15,IEG,0) !
C	----------------------------------------
	ALLOCATE(IF1(N1),IF3(N3),AF4(N4),AF5(N5))
	ALLOCATE(COORD(3,NNM))

C	CALLING GRAVITY
	DO I = 1,3
	CALL RELFILL('%GRV',WW1(I),1,I,0)
	ENDDO


	CALL INTFILL('%NUB',NSC,1,4,0)
C	--------------------------
C	EXTRACT NODAL COORDINATE
	NPM(1) = N1
	NPI(1) = N1
	CALL CALLINTG(IF1,IAX,NDX1,NPM,NPI,1,'READ')
	DO INM = 1,NNM
	NOD = IF1(INM)
	COORD(1:3,INM) = 0.0D0
	DO ISC = 1,NSC
	CALL RELFILL('$XYZ',COORD(ISC,INM),ISC,NOD,0)  !GETTING HERE NODAL COORDINATE
	ENDDO
	ENDDO
C	--------------------------


C	---------------------------------------------------------
	NPM(1) = N3
	NPI(1) = N3
	CALL CALLINTG(IF3,IAX,NDX3,NPM,NPI,1,'READ') !ELEMENT DATA

	ISEC = IF3(2)     !SECTION SET
	LSTY = IF3(5)     !SEC TYPE FLAG
	NPRT = IF3(6)     !NUMBER OF PART
	
C	GET RELEASE FLAG
	DO I = 1,14
	LREAS(I) = IF3(7+I)
	ENDDO



C	----------------------------------------------------------
C	CALCULATE ORIGINAL S BASE VECTOR
	DO I = 1,3
	VR(I) = COORD(I,2) - COORD(I,1)
	ENDDO
	CALL SCALEN(VR,VR,ELN,3)            !GET LENGTH OF ELEMENT HERE
	CALL FMVEVR(VR,VS,VT)
	CALL RELFILL('$RNG',RANG,1,ISEC,0)  !SECTION ROTATION
	CALL ROMBAC(VR,VS,VT,RANG)


C	DETERMINE GAUSS POINT POSITION AND WEIGHT	
	ALLOCATE(GPL(NGR),GPW(NGR))

	DO IGR = 1,NGR
	IF(IGR.EQ.1  ) GPL(IGR) = -1.0D0
	IF(IGR.EQ.NGR) GPL(IGR) =  1.0D0 
	IF(IGR.NE.1.AND.IGR.NE.NGR) GPL(IGR) =  GAUSP(IGR-1,NGR-2)
	IF(IGR.EQ.1  ) GPW(IGR) =  0.0D0
	IF(IGR.EQ.NGR) GPW(IGR) =  0.0D0 
	IF(IGR.NE.1.AND.IGR.NE.NGR) GPW(IGR) =  GAUSW(IGR-1,NGR-2)
	ENDDO

	DO IGR = 1,NGR
	RI = GPL(IGR)  !GAUSP(IGR,NGR)
	RW = GPW(IGR)  !GAUSW(IGR,NGR)
	BPG(IGR) = 0.5*ELN*(1.0 + RI)
	BWG(IGR) = 0.5*ELN*RW
	ENDDO

	LOC  = 0 !LOCAL LOAD FLAG 0=GLOBAL 1=LOCAL  DEFAULT TO GLOBAL FOR SELFWEIGHT
	LOE  = 0 !LOCAL ECC  FLAG 0=GLOBAL 1=LOCAL
	IMOM = 0 !MOMENT LOAD FLAG 0=FORCE 1=MOMENT
C     ----------------------------------------------------------
C     LOOP OVER GAUSS TO DET. STIFFNESS & FORCE VECTOR
C     ----------------------------------------------------------
      DO 400 IGR = 1,NGR

C     GAUSS LOCATION ALONG ELEMENT AXIS
	BXD = BPG(IGR)
	BXW = BWG(IGR)

C     ------------------------------------------------------------

	NPM(1:2) = [N4,MPRT]
	NPI(1:2) = [N4,IPRT]
	CALL CALLREAL(AF4,AAX,NDX4,NPM,NPI,2,'READ') 
	IXIST   = INT(AF4(1))   !EXISTING FLAG
	NPIB    = INT(AF4(2))   !NUM FIBER FOR THIS PART


	SELECTCASE(LSTY)

	CASE(0) !READY PROP
	NPM(1:4) = [N5,MFIB,MGAS,MPRT]
	NPI(1:4) = [N5,1   ,IGR ,IPRT]
	CALL CALLREAL(AF5,AAX,NDX5,NPM,NPI,4,'READ')    !CALLING DATA OF THIS PART
	CALL SEFRED(FIXE,AF5,ELN,BXD,BXW,VR,VS,VT,NNF,
	1LREAS,WW1,FIXL,LOC,LOE,IMOM)

	CASE(1) !FIBER PROP
	NPM(1:4) = [N5,MFIB,MGAS,MPRT]
	NPI(1:4) = [N5,   0,IGR ,IPRT]   !NFIB TO BE MODIFIED IN NEXT SUBRUTINE
	CALL SEFFIB(NPM,NPI,NPIB,FIXE,ELN,BXD,BXW,
	1			VR,VS,VT,NNF,LREAS,WW1,FIXL,LOC,LOE,IMOM,AAX,NDX5)

	ENDSELECT


C     ----------------------------------------------------------
400	CONTINUE
C     ----------------------------------------------------------


	DEALLOCATE(IF1,IF3,AF4,AF5)
	DEALLOCATE(COORD)
	DEALLOCATE(GPL,GPW)



	RETURN

	END



C	=======================================================================
C	=== CONSTRUCTION ANALYSIS =============== SONGSAK NOV2007 =============
C	=======================================================================
      SUBROUTINE SEFWLIE(IEG,IEL,FIXE,IAX)
	IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER*4 (I-N)
C	TRUSS ELEMENT LOAD


	DIMENSION VR(3),VS(3),VT(3),FIXE(1)
	DIMENSION NPM(10),NPI(10),WW1(3),IAX(1)


	ALLOCATABLE IF1(:),IF3(:)
	ALLOCATABLE COORD(:,:),FDAT(:)
C	----------------------------------------
C	GROUP DATA
C	----------------------------------------
	CALL INTFILL('%GRP',ITYPE,1 ,IEG,0) !
	CALL INTFILL('%GRP',ISTYP,2 ,IEG,0) !
	CALL INTFILL('%GRP',NELE ,3 ,IEG,0) !
	CALL INTFILL('%GRP',MPRT ,4 ,IEG,0) ! MAXP
	CALL INTFILL('%GRP',MGAS ,5 ,IEG,0) !
	CALL INTFILL('%GRP',MFIB ,6 ,IEG,0) !
	CALL INTFILL('%GRP',NEF  ,7 ,IEG,0) !
	CALL INTFILL('%GRP',NNM  ,8 ,IEG,0) !
	CALL INTFILL('%GRP',NNF  ,9 ,IEG,0) !
	CALL INTFILL('%GRP',NGR  ,10,IEG,0) !
	CALL INTFILL('%GRP',NGS  ,11,IEG,0) !
	CALL INTFILL('%GRP',NGT  ,12,IEG,0) !
C	GROUP FILE
	CALL INTFILL('%GRF',N1   ,1 ,IEG,0) !
	CALL INTFILL('%GRF',N3   ,3 ,IEG,0) !

	CALL INTFILL('%GRF',NDX1 ,11,IEG,0) !
	CALL INTFILL('%GRF',NDX3 ,13,IEG,0) !
C	----------------------------------------
	ALLOCATE(IF1(N1),IF3(N3))
	ALLOCATE(COORD(3,NNM))
	FIXE(1:NEF) = 0.0D0


C	CALLING GRAVITY
	DO I = 1,3
	CALL RELFILL('%GRV',WW1(I),1,I,0)
	ENDDO

	CALL INTFILL('%NUB',NSC,1,4,0)   !NSC
C	---------------------------------------------------------
	NPM(1) = N3
	NPI(1) = N3
	CALL CALLINTG(IF3,IAX,NDX3,NPM,NPI,1,'READ') !ELEMENT DATA
	IXIST = IF3(4)     !TOTAL EXISTING FLAG 
	ISEC  = IF3(2)     !SECTION SET
	NPRT  = IF3(6)     !NUMBER OF PART
	

C	--------------------------
C	EXTRACT NODAL COORDINATE
	NPM(1) = N1
	NPI(1) = N1
	CALL CALLINTG(IF1,IAX,NDX1,NPM,NPI,1,'READ')
	DO INM = 1,NNM
	NOD = IF1(INM)
	COORD(1:3,INM) = 0.0D0
	DO ISC = 1,NSC
	CALL RELFILL('$XYZ',COORD(ISC,INM),ISC,NOD,0)  !GETTING HERE NODAL COORDINATE
	ENDDO
	ENDDO
C	--------------------------

C	----------------------------------------------------------
C	CALCULATE ORIGINAL S BASE VECTOR
	DO I = 1,3
	VR(I) = COORD(I,2) - COORD(I,1)
	ENDDO
	CALL SCALEN(VR,VR,ELN,3)            !GET LENGTH OF ELEMENT HERE
	CALL FMVEVR(VR,VS,VT)

C	SECTION PROP MASS DENSITY
	SELECT CASE(ISTYP)
	CASE(3)
	CALL RELFILL('$TSC',AREA ,1,ISEC,0)
	CALL RELFILL('$TSC',FM   ,2,ISEC,0)
	CALL RELFILL('$TSC',FL   ,3,ISEC,0)
	CASE(4)
	CALL RELFILL('$CSP',AREA ,1,ISEC,0)
	CALL RELFILL('$CSP',FM   ,2,ISEC,0)
	CALL RELFILL('$CSP',FL   ,3,ISEC,0)
	CASE(7)
	CALL RELFILL('$CSC',AREA ,1,ISEC,0)
	CALL RELFILL('$CSC',FM   ,2,ISEC,0)
	CALL RELFILL('$CSC',FL   ,3,ISEC,0)
	ENDSELECT

	MATN = INT(FM)
	MATY = INT(FL) !MAT TYPE 0=STEEL 1=PRESTRESS 2=CABLE
	SELECTCASE(MATY)
	CASE(0)
	CALL RELFILL('%MSL',DDEN,9,MATN,0)     !MASS DENSITY
	CASE(1)
	CALL RELFILL('%CPS',DDEN,7,MATN,0)     !MASS DENSITY
	CASE(2)
	CALL RELFILL('%CBS',DDEN,8,MATN,0)     !MASS DENSITY
	ENDSELECT

	IF(ISTYP.EQ.7) THEN  !GET ACTUAL LENGTH FROM CATENARY ELEMENT
	DDEN = 0.0D0         !FOR CATENARY  THE SELFWEIGHT IS AUTOMATICALLY ADD AND REPLACE
	ENDIF

C	--------------------------------------------------------
	WT = 0.5*ELN
      DO INM=1,NNM
      DO I = 1,NNF
	GLOAD = WW1(I)
	FIXE(I+NNF*(INM-1)) = FIXE(I+NNF*(INM-1)) + WT*DDEN*GLOAD*AREA
	ENDDO
	ENDDO

C	--------------------------------------------------------

	DEALLOCATE(IF1,IF3)
	DEALLOCATE(COORD)


	RETURN

	END



C	=======================================================================
C	=== CONSTRUCTION ANALYSIS ================ PRAMIN NOV2010 =============
C	=======================================================================
      SUBROUTINE SEFWSOD(IEG,IEL,IPRT,FIXE,IAX)
	IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER*4 (I-N)
C	LTMOPT(1)  WORKING ON MECHANICAL DATA
C	 0 = NO UPDATE STRESS & MATERIAL STATE
C	 1 = UPDATE STRESS & MATERIAL STATE
C	 2 = STIFFNESS ONLY

	COMMON /GASEC/  GAUSP(10,10),GAUSW(10,10)

	DIMENSION NPM(10),NPI(10),IAX(1)
	DIMENSION FIXE(24),WW1(3)
	DIMENSION XJ(3,3),XJI(3,3) 
	DIMENSION H(21),HD(3,21)	

	ALLOCATABLE IF1(:),IF3(:)
	ALLOCATABLE COORD(:,:)   
	ALLOCATABLE NODEX(:)   
C	----------------------------------------
C	GROUP DATA
C	----------------------------------------
	CALL INTFILL('%GRP',ITYPE,1 ,IEG,0) !
	CALL INTFILL('%GRP',ISTYP,2 ,IEG,0) !
	CALL INTFILL('%GRP',NELE ,3 ,IEG,0) !
	CALL INTFILL('%GRP',MPRT ,4 ,IEG,0) ! MAXP
	CALL INTFILL('%GRP',MGAS ,5 ,IEG,0) !
	CALL INTFILL('%GRP',MFIB ,6 ,IEG,0) !
	CALL INTFILL('%GRP',NEF  ,7 ,IEG,0) !
	CALL INTFILL('%GRP',NNM  ,8 ,IEG,0) !
	CALL INTFILL('%GRP',NNF  ,9 ,IEG,0) !
	CALL INTFILL('%GRP',NGR  ,10,IEG,0) !
	CALL INTFILL('%GRP',NGS  ,11,IEG,0) !
	CALL INTFILL('%GRP',NGT  ,12,IEG,0) !
C	GROUP FILE
	CALL INTFILL('%GRF',N1   ,1 ,IEG,0) !
	CALL INTFILL('%GRF',N3   ,3 ,IEG,0) !
	
	CALL INTFILL('%GRF',NDX1 ,11,IEG,0) !
	CALL INTFILL('%GRF',NDX3 ,13,IEG,0) !
C	----------------------------------------

	ALLOCATE(IF1(N1),IF3(N3))
	ALLOCATE(COORD(3,NNM))
	

C	CALLING GRAVITY
	DO I = 1,3
	CALL RELFILL('%GRV',WW1(I),1,I,0)
	ENDDO


	CALL INTFILL('%NUB',NSC,1,4,0)
C	IF1 ------------------------------------
C	EXTRACT NODAL COORDINATE
	NPM(1) = N1
	NPI(1) = N1
	CALL CALLINTG(IF1,IAX,NDX1,NPM,NPI,1,'READ')
C	----------------------------------------	
	DO INM = 1,NNM
	NOD = IF1(INM)
	COORD(1:3,INM) = 0.0D0
	DO ISC = 1,NSC
	CALL RELFILL('$XYZ',COORD(ISC,INM),ISC,NOD,0)  !GETTING HERE NODAL COORDINATE
	ENDDO
	ENDDO
C	----------------------------------------

C	IF3 ------------------------------------
	NPM(1) = N3
	NPI(1) = N3
	CALL CALLINTG(IF3,IAX,NDX3,NPM,NPI,1,'READ') !ELEMENT DATA
C	----------------------------------------
	ISEC = IF3(2)     !SECTION SET
	NPRT = IF3(6)     !NUMBER OF PART (EQUAL TO 1 FOR SHELL)
	
	CALL RELFILL('$SOC',FMAT,1,ISEC,0)           !MAT NO
	CALL RELFILL('$SOC',FTYP,2,ISEC,0)           !MAT TYPE  0=CONCRETE 1=STEEL
	
	MATN = INT(FMAT)
	MTYP = INT(FTYP)
	IF(MTYP.EQ.0) CALL RELFILL('%FNC',RHO,4,MATN,0)
	IF(MTYP.EQ.1) CALL RELFILL('%MSL',RHO,9,MATN,0)
C     ----------------------------------------------------------
C     LOOP OVER GAUSS TO DET. STIFFNESS & FORCE VECTOR
C     LOOP OVER GAUSS TO DET. BOBY FORCE
C     ----------------------------------------------------------
      NDEX = NNM - 8 + 1	
	ALLOCATE(NODEX(NDEX))
	NODEX(1) = 0
	DO 400 IGR = 1,NGR
      DO 400 IGS = 1,NGS
      DO 400 IGT = 1,NGT
	RI = GAUSP(IGR,NGR)
	SI = GAUSP(IGS,NGS)
	TI = GAUSP(IGT,NGT)
	WW = GAUSW(IGR,NGR)*GAUSW(IGS,NGS)*GAUSW(IGT,NGT)

C     FOR SOLID ELEMENT
	CALL SHAP3D_S (RI,SI,TI,H,HD,NODEX,NNM)
      CALL JACO3D_S (COORD,HD,XJ,XJI,DET,IEL,NNM)      
            
C     ------------------------------------------------------------
	DO IGRAV = 1,3
	DWEG = RHO*DET*WW*WW1(IGRAV)

	NDUM = 3-IGRAV
	DO INM = 1,NNM
	FIXE(3*INM-NDUM) = FIXE(3*INM-NDUM) + H(INM)*DWEG
	ENDDO

	ENDDO      

C     ----------------------------------------------------------
400	CONTINUE
C     ----------------------------------------------------------

	DEALLOCATE(IF1,IF3)
	DEALLOCATE(COORD,NODEX)
	
	RETURN
	END	





C	=======================================================================
C	=== CONSTRUCTION ANALYSIS =============== SONGSAK NOV2007 =============
C	=======================================================================


      SUBROUTINE FRMVRST(IEG,IEL,FIX,IND,IAX)
	IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER*4 (I-N)


	DIMENSION VR(3),VS(3),VT(3),FIX(14),TRANS(14,14)
	DIMENSION NPM(10),NPI(10),IAX(1)


	ALLOCATABLE IF1(:),IF3(:)
	ALLOCATABLE COORD(:,:)
C	----------------------------------------
C	GROUP DATA
C	----------------------------------------
	CALL INTFILL('%GRP',ITYPE,1 ,IEG,0) !
	CALL INTFILL('%GRP',ISTYP,2 ,IEG,0) !
	CALL INTFILL('%GRP',NELE ,3 ,IEG,0) !
	CALL INTFILL('%GRP',MPRT ,4 ,IEG,0) ! MAXP
	CALL INTFILL('%GRP',MGAS ,5 ,IEG,0) !
	CALL INTFILL('%GRP',MFIB ,6 ,IEG,0) !
	CALL INTFILL('%GRP',NEF  ,7 ,IEG,0) !
	CALL INTFILL('%GRP',NNM  ,8 ,IEG,0) !
	CALL INTFILL('%GRP',NNF  ,9 ,IEG,0) !
	CALL INTFILL('%GRP',NGR  ,10,IEG,0) !
	CALL INTFILL('%GRP',NGS  ,11,IEG,0) !
	CALL INTFILL('%GRP',NGT  ,12,IEG,0) !
C	GROUP FILE
	CALL INTFILL('%GRF',N1   ,1 ,IEG,0) !
	CALL INTFILL('%GRF',N3   ,3 ,IEG,0) !

	CALL INTFILL('%GRF',NDX1 ,11,IEG,0) !
	CALL INTFILL('%GRF',NDX3 ,13,IEG,0) !
C	----------------------------------------
	ALLOCATE(IF1(N1),IF3(N3))
	ALLOCATE(COORD(3,NNM))


	CALL INTFILL('%NUB',NSC,1,4,0)
C	--------------------------
C	EXTRACT NODAL COORDINATE
	NPM(1) = N1
	NPI(1) = N1
	CALL CALLINTG(IF1,IAX,NDX1,NPM,NPI,1,'READ')
	DO INM = 1,NNM
	NOD = IF1(INM)
	COORD(1:3,INM) = 0.0D0
	DO ISC = 1,NSC
	CALL RELFILL('$XYZ',COORD(ISC,INM),ISC,NOD,0)  !GETTING HERE NODAL COORDINATE
	ENDDO
	ENDDO
C	--------------------------


C	---------------------------------------------------------
	NPM(1) = N3
	NPI(1) = N3
	CALL CALLINTG(IF3,IAX,NDX3,NPM,NPI,1,'READ') !ELEMENT DATA

	ISEC = IF3(2)     !SECTION SET
	
C	----------------------------------------------------------
C	CALCULATE ORIGINAL S BASE VECTOR
	DO I = 1,3
	VR(I) = COORD(I,2) - COORD(I,1)
	ENDDO
	CALL SCALEN(VR,VR,ELN,3)            !GET LENGTH OF ELEMENT HERE
	CALL FMVEVR(VR,VS,VT)
	CALL RELFILL('$RNG',RANG,1,ISEC,0)  !SECTION ROTATION
	CALL ROMBAC(VR,VS,VT,RANG)
C	----------------------------------------------------------

	CALL TRANLG(VR,VS,VT,TRANS)

	SELECTCASE(IND)
	CASE(0) !GLOBAL TO LOCAL
	FIX = MATMUL(TRANSPOSE(TRANS),FIX)
	CASE(1) !LOCAL TO GLOBAL
	FIX = MATMUL(TRANS,FIX)
	ENDSELECT
	


	DEALLOCATE(IF1,IF3)
	DEALLOCATE(COORD)


	RETURN

	END



C	=======================================================================
C	=== CONSTRUCTION ANALYSIS =============== SONGSAK NOV2007 =============
C	=======================================================================
      SUBROUTINE TRAVELOD
	IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER*4 (I-N)
      DIMENSION IDF(3),IDM(3),WGRV(3),VG(3),ECC(3)
      DIMENSION FV(3),FMV(3),FECC(3)
	ALLOCATABLE NODL(:),NWET(:)
C	FORM TRAVELER LOAD

C	CALLING IDOFB
      ISF = 0
      IDF(1:3) = 0 ; IDM(1:3) = 0
	DO I = 1,9
	    CALL INTFILL('%DOB',ID,1,I,0)
	    IF(ID.EQ.0) THEN
	        ISF = ISF + 1
	        IF(I.GE.1.AND.I.LE.3) THEN
        	        IDF(I) = ISF
	        ENDIF
	        IF(I.GE.4.AND.I.LE.6) THEN
        	        IDM(I-3) = ISF
	        ENDIF
	    ENDIF
	ENDDO      
      
      
C	CALLING GRAVITY ACCELERATION
	DO I = 1,3
	    CALL RELFILL('%GRV',WGRV(I),1,I,0)
	    VAL = 0.0D0
	    IF(WGRV(I).NE.0.0D0) THEN
	      VAL = 1.0D0
	      IF(WGRV(I).LT.0.0D0) VAL = -1.0D0
          ENDIF 
          VG(I) = VAL
	ENDDO
	
	
	CALL INTFILL('%IOL',ITI,1,1,0)   !ITI FILE	

      NM = 0
      CALL FREINT('N',NM  ,1 )	    !NUMBER OF NODE  
      NE = 0
      CALL FREINT('W',NE  ,1 )	    !NUMBER OF WET ELEMENT CONNECTED TO TRAVELER

      IOP = 0
      CALL FREINT('O',IOP ,1)	    !TYPE OF TRAVELER 1=CANTILEVER(1-NODE CONNECTED)  2=SYMMETRICAL(2-NODE CONNECTED)
      
      WEIG = 0.0D0
      CALL FREREL('P',WEIG,1)	    !WEIGTH OF TRAVELER (NO ECCENTRICITY)       
      PLOD = 0.0D0
      CALL FREREL('F',PLOD,1)	    !LOAD APPLIED ON TRAVELER
      ECC = 0.0D0
      CALL FREREL('E',ECC ,3)	    !LOAD ECCENTRICITY OF TRAVELER
 
 
      ALLOCATE(NODL(NM),NWET(NE))
      NODL = 0
      IF(NM.GT.0) READ(ITI,*) NODL(1:NM)    !NODE NUMBER LIST
      NWET = 0
      IF(NE.GT.0) READ(ITI,*) NWET(1:NE)    !WET ELEMENT NUMBER LIST
      
      
C	-----------------------------------------------------
	IF(NE.LE.0) GOTO 200

      TEWEIG = 0.0D0 !TOTAL WEIGHT OF ALL ELEMENT CARRIED BY TRAVELER
C	-------------------------------------------
      DO 100 IE = 1,NE
C	GET GROUP & ELEMENT NUMBER DUE TO INPUT GID NUMBER
      KE = NWET(IE)
	CALL INTFILL('%GDM',IEG,1,KE,0)
	CALL INTFILL('%GDM',IEL,2,KE,0)
	IF(IEG.EQ.0.OR.IEL.EQ.0) GOTO 100
C	-------------------------------------------
C     CALCULATE ELEMENT TOTAL WEIGHT
	CALL ELWEIG(IEG,IEL,EWEIG)
      TEWEIG = TEWEIG + EWEIG
C	-------------------------------------------
100	CONTINUE
C	-------------------------------------------
      
200   CONTINUE
C	-----------------------------------------------------



C	-----------------------------------------------------
	NS = 0  
	DO INM = 1,NM
	    ISN = NODL(INM)
	    CALL INTFILL('$NXF',IX,1,ISN,0) !IX = EXISTING FLAG
	    IF(IX.GT.0) THEN
	        NS = NS + 1 !NUMBER OF TRAVELER SUPPORTED NODE
	    ELSE
	      NODL(INM) = 0 !SET THE SUPPORT NODe TO BE ZERO IF NODe IS NOT YET EXIST
	    ENDIF
	ENDDO
	IF(NS.LE.0) GOTO 700
      FNS = FLOAT(NS)    
C	-----------------------------------------------------


C	-----------------------------------------------------
      SELECTCASE(IOP)
      CASE(1)
          FV = (VG*WEIG+VG*PLOD+WGRV*TEWEIG)/FNS !WEIG IS ACTING AT CENTROID
          FECC=         (VG*PLOD+WGRV*TEWEIG)/FNS !WEIG IS ACTING AT CENTROID SO EXCLUDE
          CALL VECPRD(ECC,FECC,FMV)
      CASE(2)
          FV = (VG*WEIG+VG*PLOD+WGRV*TEWEIG)/FNS !WEIG IS ACTING AT CENTROID
          FMV = 0.0D0
      ENDSELECT
C	-----------------------------------------------------
      
      
C	-----------------------------------------------------
      DO 600 IM = 1,NM      
          ISN = NODL(IM)
          IF(ISN.LE.0) GOTO 600

      
	DO 300 IS = 1,3
	    ISF = IDF(IS)
          IF(ISF.LE.0) GOTO 300
          FOC = FV(IS)
	    CALL RELFILL('*LTV',FOC,ISF,ISN,2)   !ADD TO TEMPORARY TRAVELER LOAD 
300   CONTINUE

	DO 400 IS = 1,3
	    ISF = IDM(IS)
          IF(ISF.LE.0) GOTO 400
          FOC = FMV(IS)
	    CALL RELFILL('*LTV',FOC,ISF,ISN,2)   !ADD TO TEMPORARY TRAVELER LOAD 
400   CONTINUE

600	CONTINUE
C	-----------------------------------------------------

700   DEALLOCATE(NODL,NWET)
      
	RETURN

	END


C	=======================================================================
C	=== CONSTRUCTION ANALYSIS =============== SONGSAK NOV2007 =============
C	=======================================================================
      SUBROUTINE ELWEIG(IEG,IEL,EWEIG)
	IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER*4 (I-N)
C     ELEMENT LOAD


	CALL MDWEIG(IEG,IEL,EWEIG)


	RETURN
	END



C	=======================================================================
C	=== CONSTRUCTION ANALYSIS =============== SONGSAK NOV2007 =============
C	=======================================================================

      SUBROUTINE MDWEIG(IEG,IEL,EWEIG)
	IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER*4 (I-N)
C     ELEMENT LOAD

	CALL INTFILL('%GRP',ITYPE,1 ,IEG,0) !

	SELECTCASE(ITYPE)


	CASE(2)
	CALL LIWEIG(IEG,IEL,EWEIG)

	CASE(5)
	CALL FMWEIG(IEG,IEL,EWEIG)

	CASE(9)
	CALL SHWEIG(IEG,IEL,EWEIG)

	CASE(10)
	CALL SOWEIG(IEG,IEL,EWEIG)


	ENDSELECT



	RETURN
	END




C	=======================================================================
C	=== CONSTRUCTION ANALYSIS =============== SONGSAK NOV2007 =============
C	=======================================================================
      SUBROUTINE LIWEIG(IEG,IEL,EWEIG)
	IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER*4 (I-N)
C	TRUSS ELEMENT WEIGTH


	DIMENSION VR(3)
	DIMENSION NPM(10),NPI(10)

	ALLOCATABLE IF1(:),IF3(:)
	ALLOCATABLE COORD(:,:)
	ALLOCATABLE IAX(:),AAX(:)


C	----------------------------------------
C	GROUP DATA
C	----------------------------------------
	CALL INTFILL('%GRP',ITYPE,1 ,IEG,0) !
	CALL INTFILL('%GRP',ISTYP,2 ,IEG,0) !
	CALL INTFILL('%GRP',NELE ,3 ,IEG,0) !
	CALL INTFILL('%GRP',MPRT ,4 ,IEG,0) ! MAXP
	CALL INTFILL('%GRP',MGAS ,5 ,IEG,0) !
	CALL INTFILL('%GRP',MFIB ,6 ,IEG,0) !
	CALL INTFILL('%GRP',NEF  ,7 ,IEG,0) !
	CALL INTFILL('%GRP',NNM  ,8 ,IEG,0) !
	CALL INTFILL('%GRP',NNF  ,9 ,IEG,0) !
	CALL INTFILL('%GRP',NGR  ,10,IEG,0) !
	CALL INTFILL('%GRP',NGS  ,11,IEG,0) !
	CALL INTFILL('%GRP',NGT  ,12,IEG,0) !
C	GROUP FILE
	CALL INTFILL('%GRF',N1   ,1 ,IEG,0) !
	CALL INTFILL('%GRF',N2   ,2 ,IEG,0) !
	CALL INTFILL('%GRF',N3   ,3 ,IEG,0) !
	CALL INTFILL('%GRF',N4   ,4 ,IEG,0) !
	CALL INTFILL('%GRF',N5   ,5 ,IEG,0) !
	CALL INTFILL('%GRF',N6   ,6 ,IEG,0) !
	CALL INTFILL('%GRF',N7   ,7 ,IEG,0) !
	CALL INTFILL('%GRF',N8   ,8 ,IEG,0) !

	CALL INTFILL('%GRF',NDX1 ,11,IEG,0) !
	CALL INTFILL('%GRF',NDX2 ,12,IEG,0) !
	CALL INTFILL('%GRF',NDX3 ,13,IEG,0) !
	CALL INTFILL('%GRF',NDX4 ,14,IEG,0) !
	CALL INTFILL('%GRF',NDX5 ,15,IEG,0) !
	CALL INTFILL('%GRF',NDX6 ,16,IEG,0) !
	CALL INTFILL('%GRF',NDX7 ,17,IEG,0) !
	CALL INTFILL('%GRF',NDX8 ,18,IEG,0) !
	
	CALL INTFILL('%GRF',NFLI ,21,IEG,0) !
	CALL INTFILL('%GRF',NFLR ,22,IEG,0) !
	
	CALL INTFILL('%GRF',LASI ,23,IEG,0) !
	CALL INTFILL('%GRF',LASR ,24,IEG,0) !
C	----------------------------------------

	ALLOCATE(IF1(N1),IF3(N3))
	ALLOCATE(COORD(3,NNM))
	ALLOCATE(IAX(LASI),AAX(LASR))

      READ(NFLI,REC=IEL) IAX
      READ(NFLR,REC=IEL) AAX
      
C	---------------------------------------------------------
	NPM(1) = N3
	NPI(1) = N3
	CALL CALLINTG(IF3,IAX,NDX3,NPM,NPI,1,'READ') !ELEMENT DATA
	ISEC  = IF3(2)     !SECTION SET

C	--------------------------
C	EXTRACT NODAL COORDINATE
	NPM(1) = N1
	NPI(1) = N1
	CALL CALLINTG(IF1,IAX,NDX1,NPM,NPI,1,'READ')
	DO INM = 1,NNM
	NOD = IF1(INM)
	COORD(1:3,INM) = 0.0D0
	DO ISC = 1,3
	CALL RELFILL('$XYZ',COORD(ISC,INM),ISC,NOD,0)  !GETTING HERE NODAL COORDINATE
	ENDDO
	ENDDO
C	--------------------------

C	----------------------------------------------------------
C	CALCULATE ORIGINAL S BASE VECTOR
	DO I = 1,3
	VR(I) = COORD(I,2) - COORD(I,1)
	ENDDO
	CALL SCALEN(VR,VR,ELN,3)            !GET LENGTH OF ELEMENT HERE
C	----------------------------------------------------------

C	----------------------------------------------------------
C	SECTION PROP MASS DENSITY
	SELECT CASE(ISTYP)
	CASE(3)
	CALL RELFILL('$TSC',AREA ,1,ISEC,0)
	CALL RELFILL('$TSC',FM   ,2,ISEC,0)
	CALL RELFILL('$TSC',FL   ,3,ISEC,0)
	CASE(4)
	CALL RELFILL('$CSP',AREA ,1,ISEC,0)
	CALL RELFILL('$CSP',FM   ,2,ISEC,0)
	CALL RELFILL('$CSP',FL   ,3,ISEC,0)
	CASE(7)
	CALL RELFILL('$CSC',AREA ,1,ISEC,0)
	CALL RELFILL('$CSC',FM   ,2,ISEC,0)
	CALL RELFILL('$CSC',FL   ,3,ISEC,0)
	ENDSELECT

	MATN = INT(FM)
	MATY = INT(FL) !MAT TYPE 0=STEEL 1=PRESTRESS 2=CABLE
	SELECTCASE(MATY)
	CASE(0)
	CALL RELFILL('%MSL',DDEN,9,MATN,0)     !MASS DENSITY
	CASE(1)
	CALL RELFILL('%CPS',DDEN,7,MATN,0)     !MASS DENSITY
	CASE(2)
	CALL RELFILL('%CBS',DDEN,8,MATN,0)     !MASS DENSITY
	ENDSELECT

C	--------------------------------------------------------
      EWEIG = DDEN*AREA*ELN


      WRITE(NFLI,REC=IEL) IAX
      WRITE(NFLR,REC=IEL) AAX
      
	DEALLOCATE(IAX,AAX)
	DEALLOCATE(IF1,IF3)
	DEALLOCATE(COORD)


	RETURN

	END



C	=======================================================================
C	=== CONSTRUCTION ANALYSIS =============== SONGSAK NOV2007 =============
C	=======================================================================

      SUBROUTINE FMWEIG(IEG,IEL,EWEIG)
	IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER*4 (I-N)
C	FRAME ELEMENT LOAD

	COMMON /GASEC/  GAUSP(10,10),GAUSW(10,10)

	DIMENSION VR(3)
	DIMENSION BPG(10),BWG(10)
	DIMENSION NPM(10),NPI(10)


	ALLOCATABLE IF1(:),IF3(:),AF4(:),AF5(:)
	ALLOCATABLE COORD(:,:)
	ALLOCATABLE GPL(:),GPW(:)
	ALLOCATABLE IAX(:),AAX(:)
	
C	----------------------------------------
C	GROUP DATA
C	----------------------------------------
	CALL INTFILL('%GRP',ITYPE,1 ,IEG,0) !
	CALL INTFILL('%GRP',ISTYP,2 ,IEG,0) !
	CALL INTFILL('%GRP',NELE ,3 ,IEG,0) !
	CALL INTFILL('%GRP',MPRT ,4 ,IEG,0) ! MAXP
	CALL INTFILL('%GRP',MGAS ,5 ,IEG,0) !
	CALL INTFILL('%GRP',MFIB ,6 ,IEG,0) !
	CALL INTFILL('%GRP',NEF  ,7 ,IEG,0) !
	CALL INTFILL('%GRP',NNM  ,8 ,IEG,0) !
	CALL INTFILL('%GRP',NNF  ,9 ,IEG,0) !
	CALL INTFILL('%GRP',NGR  ,10,IEG,0) !
	CALL INTFILL('%GRP',NGS  ,11,IEG,0) !
	CALL INTFILL('%GRP',NGT  ,12,IEG,0) !
C	GROUP FILE
	CALL INTFILL('%GRF',N1   ,1 ,IEG,0) !
	CALL INTFILL('%GRF',N2   ,2 ,IEG,0) !
	CALL INTFILL('%GRF',N3   ,3 ,IEG,0) !
	CALL INTFILL('%GRF',N4   ,4 ,IEG,0) !
	CALL INTFILL('%GRF',N5   ,5 ,IEG,0) !
	CALL INTFILL('%GRF',N6   ,6 ,IEG,0) !
	CALL INTFILL('%GRF',N7   ,7 ,IEG,0) !
	CALL INTFILL('%GRF',N8   ,8 ,IEG,0) !

	CALL INTFILL('%GRF',NDX1 ,11,IEG,0) !
	CALL INTFILL('%GRF',NDX2 ,12,IEG,0) !
	CALL INTFILL('%GRF',NDX3 ,13,IEG,0) !
	CALL INTFILL('%GRF',NDX4 ,14,IEG,0) !
	CALL INTFILL('%GRF',NDX5 ,15,IEG,0) !
	CALL INTFILL('%GRF',NDX6 ,16,IEG,0) !
	CALL INTFILL('%GRF',NDX7 ,17,IEG,0) !
	CALL INTFILL('%GRF',NDX8 ,18,IEG,0) !
	
	CALL INTFILL('%GRF',NFLI ,21,IEG,0) !
	CALL INTFILL('%GRF',NFLR ,22,IEG,0) !
	
	CALL INTFILL('%GRF',LASI ,23,IEG,0) !
	CALL INTFILL('%GRF',LASR ,24,IEG,0) !
C	----------------------------------------

	ALLOCATE(IF1(N1),IF3(N3),AF4(N4),AF5(N5))
	ALLOCATE(COORD(3,NNM))
	ALLOCATE(IAX(LASI),AAX(LASR))

      READ(NFLI,REC=IEL) IAX
      READ(NFLR,REC=IEL) AAX
      
C	---------------------------------------------------------
	NPM(1) = N3
	NPI(1) = N3
	CALL CALLINTG(IF3,IAX,NDX3,NPM,NPI,1,'READ') !ELEMENT DATA
	ISEC = IF3(2)     !SECTION SET
	LSTY = IF3(5)     !SEC TYPE FLAG
	NPRT = IF3(6)     !NUMBER OF PART
C	----------------------------------------------------------

C	--------------------------
C	EXTRACT NODAL COORDINATE
	NPM(1) = N1
	NPI(1) = N1
	CALL CALLINTG(IF1,IAX,NDX1,NPM,NPI,1,'READ')
	DO INM = 1,NNM
	NOD = IF1(INM)
	COORD(1:3,INM) = 0.0D0
	DO ISC = 1,3
	CALL RELFILL('$XYZ',COORD(ISC,INM),ISC,NOD,0)  !GETTING HERE NODAL COORDINATE
	ENDDO
	ENDDO
C	--------------------------

C	----------------------------------------------------------
C	CALCULATE ORIGINAL S BASE VECTOR
	DO I = 1,3
	VR(I) = COORD(I,2) - COORD(I,1)
	ENDDO
	CALL SCALEN(VR,VR,ELN,3)            !GET LENGTH OF ELEMENT HERE
C	----------------------------------------------------------


C	----------------------------------------------------------
C	DETERMINE GAUSS POINT POSITION AND WEIGHT
	ALLOCATE(GPL(NGR),GPW(NGR))

	DO IGR = 1,NGR
	IF(IGR.EQ.1  ) GPL(IGR) = -1.0D0
	IF(IGR.EQ.NGR) GPL(IGR) =  1.0D0 
	IF(IGR.NE.1.AND.IGR.NE.NGR) GPL(IGR) =  GAUSP(IGR-1,NGR-2)
	IF(IGR.EQ.1  ) GPW(IGR) =  0.0D0
	IF(IGR.EQ.NGR) GPW(IGR) =  0.0D0 
	IF(IGR.NE.1.AND.IGR.NE.NGR) GPW(IGR) =  GAUSW(IGR-1,NGR-2)
	ENDDO

	DO IGR = 1,NGR
	RI = GPL(IGR)  !GAUSP(IGR,NGR)
	RW = GPW(IGR)  !GAUSW(IGR,NGR)
	BPG(IGR) = 0.5*ELN*(1.0 + RI)
	BWG(IGR) = 0.5*ELN*RW
	ENDDO
C	----------------------------------------------------------


      LPRT = -1  !LOOP FOR ALL SECTION PART
      
      EWEIG = 0.0D0
C     ----------------------------------------------------------
C     LOOP OVER GAUSS TO DET. STIFFNESS & FORCE VECTOR
C     ----------------------------------------------------------
      DO 400 IGR = 1,NGR

C     GAUSS LOCATION ALONG ELEMENT AXIS
	BXD = BPG(IGR)
	BXW = BWG(IGR)

	DO 300 IPRT = 1,NPRT
C     ------------------------------------------------------------
	IF(LPRT.NE.-1) THEN  !(-1 IS FOR ALL PART)
	  IF(IPRT.NE.LPRT) GOTO 300   
	ENDIF

	NPM(1:2) = [N4,MPRT]
	NPI(1:2) = [N4,IPRT]
	CALL CALLREAL(AF4,AAX,NDX4,NPM,NPI,2,'READ')
	IXIST   = INT(AF4(1))   !EXISTING FLAG
	NPIB    = INT(AF4(2))   !NUM FIBER FOR THIS PART

	SELECTCASE(LSTY)
	CASE(0) !READY PROP
	NPM(1:4) = [N5,MFIB,MGAS,MPRT]
	NPI(1:4) = [N5,1   ,IGR ,IPRT]
	CALL CALLREAL(AF5,AAX,NDX5,NPM,NPI,4,'READ')    !CALLING DATA OF THIS PART
	CALL SEFWEIGR(AF5,ARHO)

	CASE(1) !FIBER PROP
	NPM(1:4) = [N5,MFIB,MGAS,MPRT]
	NPI(1:4) = [N5,   0,IGR ,IPRT]   !NFIB TO BE MODIFIED IN NEXT SUBRUTINE
	CALL SEFWEIGF(NPM,NPI,NPIB,AAX,NDX5,ARHO)
	ENDSELECT

      EWEIG = EWEIG + ARHO*BXW
300	CONTINUE
C     ----------------------------------------------------------
400	CONTINUE
C     ----------------------------------------------------------


      WRITE(NFLI,REC=IEL) IAX
      WRITE(NFLR,REC=IEL) AAX
      
	DEALLOCATE(IAX,AAX)
	DEALLOCATE(IF1,IF3,AF4,AF5)
	DEALLOCATE(COORD)
	DEALLOCATE(GPL,GPW)

	RETURN

	END



C	=======================================================================
C	=== CONSTRUCTION ANALYSIS =============== SONGSAK NOV2007 =============
C	=======================================================================

      SUBROUTINE SEFWEIGR(AF5,ARHO)
	IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER*4 (I-N)
	DIMENSION AF5(1)

C	LTMOPT(1)  SELFWEIGHT
C	----------------------------------------	
C	N = 1  A     
C	N = 2  SC     
C	N = 3  TC     
C	N = 4  QS     
C	N = 5  QT     
C	N = 6  IS     
C	N = 7  IT     
C	N = 8  IST     
C	N = 9  J     
C	N = 10 IW     
C	N = 11 MATERIAL FLAG     
C	N = 12 CONC or STEEL   

C	----------------------------------------
C	CALLING DATA FROM WORKING ARRAY HERE

	Ao    = AF5(1 )
	RHO   = AF5(20)

      ARHO = Ao*RHO

	RETURN
	END


C	=======================================================================
C	=== CONSTRUCTION ANALYSIS =============== SONGSAK NOV2007 =============
C	=======================================================================
      SUBROUTINE SEFWEIGF(NPM,NPI,NPIB,AAX,NDX5,ARHO)
	IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER*4 (I-N)
	DIMENSION AAX(1)
	DIMENSION NPM(1),NPI(1)
	ALLOCATABLE AF5(:)


	N5 = NPM(1)
	ALLOCATE(AF5(N5))

      ARHO = 0.0D0
      
	DO 1000 IFIB = 1,NPIB

	NPI(2) = IFIB
	CALL CALLREAL(AF5,AAX,NDX5,NPM,NPI,4,'READ')    !CALLING DATA OF THIS PART

C	----------------------------------------
C	CALLING DATA FROM WORKING ARRAY HERE
	DA      = AF5(1)  !FIBER AREA
	SC      = AF5(2)  !FIBER DISTANCE S
	TC      = AF5(3)  !FIBER DISTANCE T
	RHO     = AF5(20)
C	----------------------------------------
      ARHO = ARHO + DA*RHO

1000	CONTINUE


	DEALLOCATE(AF5)


	RETURN
	END


C	=======================================================================
C	=== CONSTRUCTION ANALYSIS =============== SONGSAK NOV2007 =============
C	=======================================================================
      SUBROUTINE SHWEIG(IEG,IEL,EWEIG)
	IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER*4 (I-N)

	COMMON /GASEC/  GAUSP(10,10),GAUSW(10,10)

	DIMENSION NPM(10),NPI(10)
	DIMENSION FJ(4),XJI(4) 
	DIMENSION H(8),HD(2,8),VR(3),VS(3),VT(3)

	ALLOCATABLE IF1(:),IF3(:)
	ALLOCATABLE COORD(:,:)
	ALLOCATABLE IAX(:),AAX(:)

C	----------------------------------------
C	GROUP DATA
C	----------------------------------------
	CALL INTFILL('%GRP',ITYPE,1 ,IEG,0) !
	CALL INTFILL('%GRP',ISTYP,2 ,IEG,0) !
	CALL INTFILL('%GRP',NELE ,3 ,IEG,0) !
	CALL INTFILL('%GRP',MPRT ,4 ,IEG,0) ! MAXP
	CALL INTFILL('%GRP',MGAS ,5 ,IEG,0) !
	CALL INTFILL('%GRP',MFIB ,6 ,IEG,0) !
	CALL INTFILL('%GRP',NEF  ,7 ,IEG,0) !
	CALL INTFILL('%GRP',NNM  ,8 ,IEG,0) !
	CALL INTFILL('%GRP',NNF  ,9 ,IEG,0) !
	CALL INTFILL('%GRP',NGR  ,10,IEG,0) !
	CALL INTFILL('%GRP',NGS  ,11,IEG,0) !
	CALL INTFILL('%GRP',NGT  ,12,IEG,0) !
C	GROUP FILE
	CALL INTFILL('%GRF',N1   ,1 ,IEG,0) !
	CALL INTFILL('%GRF',N2   ,2 ,IEG,0) !
	CALL INTFILL('%GRF',N3   ,3 ,IEG,0) !
	CALL INTFILL('%GRF',N6   ,6 ,IEG,0) !
	CALL INTFILL('%GRF',N8   ,8 ,IEG,0) !

	CALL INTFILL('%GRF',NDX1 ,11,IEG,0) !
	CALL INTFILL('%GRF',NDX2 ,12,IEG,0) !
	CALL INTFILL('%GRF',NDX3 ,13,IEG,0) !
	CALL INTFILL('%GRF',NDX6 ,16,IEG,0) !
	CALL INTFILL('%GRF',NDX8 ,18,IEG,0) !
	
	CALL INTFILL('%GRF',NFLI ,21,IEG,0) !
	CALL INTFILL('%GRF',NFLR ,22,IEG,0) !
	
	CALL INTFILL('%GRF',LASI ,23,IEG,0) !
	CALL INTFILL('%GRF',LASR ,24,IEG,0) !
C	----------------------------------------

	ALLOCATE(IF1(N1),IF3(N3))
	ALLOCATE(COORD(3,NNM))
	ALLOCATE(IAX(LASI),AAX(LASR))

      READ(NFLI,REC=IEL) IAX
      READ(NFLR,REC=IEL) AAX

C	--------------------------
C	EXTRACT NODAL COORDINATE
	NPM(1) = N1
	NPI(1) = N1
	CALL CALLINTG(IF1,IAX,NDX1,NPM,NPI,1,'READ')
	DO INM = 1,NNM
	NOD = IF1(INM)
	COORD(1:3,INM) = 0.0D0
	DO ISC = 1,3
	CALL RELFILL('$XYZ',COORD(ISC,INM),ISC,NOD,0)  !GETTING HERE NODAL COORDINATE
	ENDDO
	ENDDO
C	--------------------------

C	---------------------------------------------------------
	NPM(1) = N3
	NPI(1) = N3
	CALL CALLINTG(IF3,IAX,NDX3,NPM,NPI,1,'READ') !ELEMENT DATA

	ISEC = IF3(2)     !SECTION SET
	NPRT = IF3(6)     !NUMBER OF PART (EQUAL TO 1 FOR SHELL)
	
	CALL RELFILL('$SSC',TH  ,1,ISEC,0)           !THICKNESS
	CALL RELFILL('$SSC',FMAT,2,ISEC,0)           !MAT NO
	CALL RELFILL('$SSC',FTYP,3,ISEC,0)           !MAT TYPE  0=CONCRETE 1=STEEL
	MATN = INT(FMAT)
	MTYP = INT(FTYP)


	IF(MTYP.EQ.0) CALL RELFILL('%FNC',RHO,4,MATN,0)
	IF(MTYP.EQ.1) CALL RELFILL('%MSL',RHO,9,MATN,0)
C	---------------------------------------------------------

      EWEIG = 0.0D0
C     ----------------------------------------------------------
C     LOOP OVER GAUSS TO DET. STIFFNESS & FORCE VECTOR
C     ----------------------------------------------------------
	NGR = 3
	NGS = 3
      DO 400 IGR = 1,NGR
      DO 400 IGS = 1,NGS
	RI = GAUSP(IGR,NGR)
	SI = GAUSP(IGS,NGS)
	WW = GAUSW(IGR,NGR)*GAUSW(IGS,NGS)

	CALL SHAP4D(RI,SI,H,HD)
	CALL SHJACB(NNM,COORD,HD,VR,VS,VT,DET,FJ,XJI)
C     ------------------------------------------------------------

	EWEIG = EWEIG + TH*RHO*DET*WW

C     ----------------------------------------------------------
400	CONTINUE
C     ----------------------------------------------------------

      WRITE(NFLI,REC=IEL) IAX
      WRITE(NFLR,REC=IEL) AAX
      
      
	DEALLOCATE(IAX,AAX)
	DEALLOCATE(IF1,IF3)
	DEALLOCATE(COORD)	


	RETURN

	END



C	=======================================================================
C	=== CONSTRUCTION ANALYSIS =============== PRAMIN NOV 2010 =============
C	=======================================================================
      SUBROUTINE SOWEIG(IEG,IEL,EWEIG)
	IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER*4 (I-N)

	COMMON /GASEC/  GAUSP(10,10),GAUSW(10,10)

	DIMENSION NPM(10),NPI(10)
	DIMENSION XJ(3,3),XJI(3,3) 
	DIMENSION H(21),HD(3,21)	

	ALLOCATABLE IF1(:),IF3(:)
	ALLOCATABLE COORD(:,:)   
	ALLOCATABLE NODEX(:)   
	ALLOCATABLE IAX(:),AAX(:)

C	----------------------------------------
C	GROUP DATA
C	----------------------------------------
	CALL INTFILL('%GRP',ITYPE,1 ,IEG,0) !
	CALL INTFILL('%GRP',ISTYP,2 ,IEG,0) !
	CALL INTFILL('%GRP',NELE ,3 ,IEG,0) !
	CALL INTFILL('%GRP',MPRT ,4 ,IEG,0) ! MAXP
	CALL INTFILL('%GRP',MGAS ,5 ,IEG,0) !
	CALL INTFILL('%GRP',MFIB ,6 ,IEG,0) !
	CALL INTFILL('%GRP',NEF  ,7 ,IEG,0) !
	CALL INTFILL('%GRP',NNM  ,8 ,IEG,0) !
	CALL INTFILL('%GRP',NNF  ,9 ,IEG,0) !
	CALL INTFILL('%GRP',NGR  ,10,IEG,0) !
	CALL INTFILL('%GRP',NGS  ,11,IEG,0) !
	CALL INTFILL('%GRP',NGT  ,12,IEG,0) !
C	GROUP FILE
	CALL INTFILL('%GRF',N1   ,1 ,IEG,0) !
	CALL INTFILL('%GRF',N2   ,2 ,IEG,0) !
	CALL INTFILL('%GRF',N3   ,3 ,IEG,0) !
	CALL INTFILL('%GRF',N6   ,6 ,IEG,0) !
	CALL INTFILL('%GRF',N8   ,8 ,IEG,0) !

	CALL INTFILL('%GRF',NDX1 ,11,IEG,0) !
	CALL INTFILL('%GRF',NDX2 ,12,IEG,0) !
	CALL INTFILL('%GRF',NDX3 ,13,IEG,0) !
	CALL INTFILL('%GRF',NDX6 ,16,IEG,0) !
	CALL INTFILL('%GRF',NDX8 ,18,IEG,0) !
	
	CALL INTFILL('%GRF',NFLI ,21,IEG,0) !
	CALL INTFILL('%GRF',NFLR ,22,IEG,0) !
	
	CALL INTFILL('%GRF',LASI ,23,IEG,0) !
	CALL INTFILL('%GRF',LASR ,24,IEG,0) !
C	----------------------------------------

	ALLOCATE(IF1(N1),IF3(N3))
	ALLOCATE(COORD(3,NNM))
	ALLOCATE(IAX(LASI),AAX(LASR))

      READ(NFLI,REC=IEL) IAX
      READ(NFLR,REC=IEL) AAX

      CALL INTFILL('%NUB',NSC,1,4,0)
C	IF1 ------------------------------------
C	EXTRACT NODAL COORDINATE
	NPM(1) = N1
	NPI(1) = N1
	CALL CALLINTG(IF1,IAX,NDX1,NPM,NPI,1,'READ')
C	----------------------------------------	
	DO INM = 1,NNM
	NOD = IF1(INM)
	COORD(1:3,INM) = 0.0D0
	DO ISC = 1,NSC
	CALL RELFILL('$XYZ',COORD(ISC,INM),ISC,NOD,0)  !GETTING HERE NODAL COORDINATE
	ENDDO
	ENDDO
C	----------------------------------------

C	IF3 ------------------------------------
	NPM(1) = N3
	NPI(1) = N3
	CALL CALLINTG(IF3,IAX,NDX3,NPM,NPI,1,'READ') !ELEMENT DATA
C	----------------------------------------
	ISEC = IF3(2)     !SECTION SET
	NPRT = IF3(6)     !NUMBER OF PART (EQUAL TO 1 FOR SHELL)
	
	CALL RELFILL('$SOC',FMAT,1,ISEC,0)           !MAT NO
	CALL RELFILL('$SOC',FTYP,2,ISEC,0)           !MAT TYPE  0=CONCRETE 1=STEEL
	
	MATN = INT(FMAT)
	MTYP = INT(FTYP)
	IF(MTYP.EQ.0) CALL RELFILL('%FNC',RHO,4,MATN,0)
	IF(MTYP.EQ.1) CALL RELFILL('%MSL',RHO,9,MATN,0)
C     ----------------------------------------------------------

      
C     ----------------------------------------------------------
C     LOOP OVER GAUSS TO DET. STIFFNESS & FORCE VECTOR
C     ----------------------------------------------------------
      NDEX = NNM - 8 + 1	
	ALLOCATE(NODEX(NDEX))
		
	EWEIG = 0.0D0
	DVOL = 0.0D0
      DO 400 IGR = 1,NGR
      DO 400 IGS = 1,NGS
      DO 400 IGT = 1,NGT
	RI = GAUSP(IGR,NGR)
	SI = GAUSP(IGS,NGS)
	TI = GAUSP(IGT,NGT)
	WW = GAUSW(IGR,NGR)*GAUSW(IGS,NGS)*GAUSW(IGT,NGT)

C     FOR SOLID ELEMENT
	CALL SHAP3D_S (RI,SI,TI,H,HD,NODEX,NNM)
      CALL JACO3D_S (COORD,HD,XJ,XJI,DET,IEL,NNM)      
C     ------------------------------------------------------------
      DVOL = DVOL + DET*WW
	EWEIG = EWEIG + RHO*DET*WW

C     ----------------------------------------------------------
400	CONTINUE
C     ----------------------------------------------------------

      WRITE(NFLI,REC=IEL) IAX
      WRITE(NFLR,REC=IEL) AAX
      
      
	DEALLOCATE(IAX,AAX)
	DEALLOCATE(IF1,IF3)
	DEALLOCATE(COORD)	
	DEALLOCATE(NODEX)	


	RETURN

	END



C	=======================================================================
C	=== CONSTRUCTION ANALYSIS =============== PRAMIN NOV 2010 =============
C	=======================================================================



